<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root" version="3.4.6">
  <include>qfs.qft</include>
  <TestSet id="_1qM4" name="lx">
    <variable name="platformDir">$(platformDir)</variable>
    <TestSet id="_1qMF" name="wdbrpc">
      <variable name="wdbrpcFlag">false</variable>
      <variable name="conName">""</variable>
      <comment>launch kinds of debuggee from UI, check if 
1, it launched successfully
2, it stopped at main</comment>
      <TestSet id="_1qab" name="penguin">
        <variable name="debuggee">penguin</variable>
        <TestSet id="_1sY4" name="launch">
          <variable name="tgtDebuggee">/dfe/penguin</variable>
          <DependencyReference id="_1saW" reference="wb.wdbrpcLaunch">
            <variable name="tgtDebuggee">/dfe/penguin</variable>
          </DependencyReference>
          <TestCase id="_1qaq" name="breakpoint">
            <comment>debug view should show the correct stackframes for penguin

</comment>
            <TestStep id="_1qok" name="breakpointAdd">
              <ProcedureCall id="_1qol" procedure="uiClickRse"/>
              <ProcedureCall id="_1qyG" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1qom" postdelay="4000" procedure="bpExpAdd">
                <variable name="expBp">BALL::Move</variable>
              </ProcedureCall>
              <TestStep id="_1saX" name="breakpointView">
                <TryStep id="_1saY" name="checkBreapointView">
                  <CheckStringStep client="$(client)"
                                   component="Breakpoints.tree&amp;/0"
                                   id="_1qoo" regexp="true">
                    <text>BALL::Move.*</text>
                  </CheckStringStep>
                  <CatchSequence exception="TestException" id="_1saZ"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1qop" name="resume">
              <RepeatSequence count="4" id="_1qp1">
                <TestStep id="_1sac" name="resumeFromDebugView"
                          postdelay="5000">
                  <TryStep id="_1qoq" name="resumeFromDebugView">
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="Debug.tree&amp;/0/0/0"
                                    event="MOUSE_MPRC" id="_1qor"
                                    modifiers="16" postdelay="2000"/>
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                                    event="MOUSE_MPRC" id="_1qos"
                                    modifiers="16" postdelay="2000"/>
                    <CatchSequence exception="TestException" id="_1qou"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep id="_1saa" name="debugView">
                  <TryStep id="_1sab" name="checkDebugView">
                    <ProcedureCall id="_1qot" postdelay="2000"
                                   procedure="qfs.swt.tree.expandNode">
                      <variable name="id">Debug.tree&amp;/0/0/0</variable>
                      <variable name="node">0</variable>
                      <variable name="separator">&amp;</variable>
                    </ProcedureCall>
                    <CheckStringStep client="$(client)"
                                     component="Debug.tree&amp;/0/0/0/0"
                                     id="_1qo-" regexp="true">
                      <text>BALL::Move.*</text>
                    </CheckStringStep>
                    <CatchSequence exception="TestException" id="_1sad"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep id="_1sbZ" name="registerView">
                  <ProcedureCall id="_1sba" postdelay="2000"
                                 procedure="uiClickRegisterView"/>
                  <TryStep id="_1sbh" name="valueCheck">
                    <ProcedureCall id="_1ser" postdelay="2000"
                                   procedure="qfs.swt.tree.expandNode">
                      <variable name="id">Registers.tree@Name</variable>
                      <variable name="node">0</variable>
                      <variable name="separator">&amp;</variable>
                    </ProcedureCall>
                    <CheckStringStep client="$(client)"
                                     component="Registers.tree@Value&amp;/0/0"
                                     id="_1sb+" regexp="true">
                      <text>0x[0-9a-fA-F]+</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="Registers.tree@Value&amp;/0/1"
                                     id="_1sc1" regexp="true">
                      <text>0x[0-9a-fA-F]+</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="Registers.tree@Value&amp;/0/2"
                                     id="_1sc2" regexp="true">
                      <text>0x[0-9a-fA-F]+</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="Registers.tree@Value&amp;/0/3"
                                     id="_1sc3" regexp="true">
                      <text>0x[0-9a-fA-F]+</text>
                    </CheckStringStep>
                    <CatchSequence exception="ComponentNotFoundException"
                                   id="_1sbl" maxerror="0" name="ignore"/>
                    <CatchSequence exception="TestException" id="_1sbm"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep id="_1sb2" name="variableView">
                  <ProcedureCall id="_1sb6" postdelay="2000"
                                 procedure="uiClickVariableView"/>
                  <TryStep id="_1sb3" name="nameTypeCheck">
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Name@/this"
                                     id="_1sbF">
                      <text>this</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Type@/this"
                                     id="_1sbG">
                      <text>class BALL *</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Name@/new_position"
                                     id="_1sbH">
                      <text>new_position</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Type@/new_position"
                                     id="_1sbI">
                      <text>POINT</text>
                    </CheckStringStep>
                    <CatchSequence exception="TestException" id="_1sb5"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                  <TryStep id="_1sbJ" name="expandCheck">
                    <ProcedureCall id="_1sbP" postdelay="2000"
                                   procedure="qfs.swt.tree.expandNode">
                      <variable name="id">WorkbenchWindow.tree2@Name</variable>
                      <variable name="node">new_position</variable>
                      <variable name="separator">@</variable>
                    </ProcedureCall>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Value@/new_position/x"
                                     id="_1sbV" regexp="true">
                      <text>[-]?[0-9]+[ \t]*</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Value@/new_position/y"
                                     id="_1sbW" regexp="true">
                      <text>[0-9]+[ \t]*</text>
                    </CheckStringStep>
                    <CatchSequence exception="ComponentNotFoundException"
                                   id="_1sbX" maxerror="0" name="ignore"/>
                    <CatchSequence exception="TestException" id="_1sbY"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep disabled="true" id="_1sc4" name="expressionView">
                  <ProcedureCall id="_1sc5"
                                 procedure="uiClickExpressionView"/>
                  <ProcedureCall id="_1scL" procedure="expAddwatch">
                    <variable name="item">grid.data</variable>
                  </ProcedureCall>
                  <TryStep id="_1scM" name="valueCheck">
                    <ProcedureCall id="_1scR"
                                   procedure="qfs.swt.tree.expandNode">
                      <variable name="id">Expressions.tree@Expression@/grid/data</variable>
                      <variable name="node"/>
                      <variable name="separator"/>
                    </ProcedureCall>
                    <ProcedureCall id="_1scQ"
                                   procedure="qfs.swt.tree.expandNodes">
                      <variable name="id">Expressions.tree@Expression@/grid/data</variable>
                      <variable name="callbackProc"/>
                    </ProcedureCall>
                  </TryStep>
                </TestStep>
              </RepeatSequence>
            </TestStep>
            <TestStep id="_1sae" name="breakpointViewDelAll">
              <ProcedureCall id="_1qb0" procedure="uiDelAllBp"/>
              <TryStep id="_1saf" name="checkBreapointView">
                <ProcedureCall id="_1saj"
                               procedure="qfs.swt.tree.checks.checkNumberOfRows">
                  <variable name="id">Breakpoints.tree&amp;/0</variable>
                  <variable name="compareValue">0</variable>
                  <variable name="compareMode">=</variable>
                  <variable name="errorLevel">ERROR</variable>
                  <variable name="appearInReport">1</variable>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_1sah"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestCase>
          <TestCase id="_1qbt" name="memoryBrowserView">
            <comment>memory browser view should show the changing memory value 
</comment>
            <TestStep id="_1qbu" name="dbgPenguinContinueOnBreak">
              <ProcedureCall id="_1qbv" procedure="uiClickBreakpointView"/>
              <ServerScriptStep id="_1qn+" name="computeLine">
                <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
srcfsDir = os.path.join(rootfsDir,'usr','src','debug')
penguinFile = os.path.join(srcfsDir,'penguin-0.1','b_main.cpp')

rc.setLocal('penguinFile',penguinFile)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1qnz" postdelay="1000"
                             procedure="bpLineContinueOnBreakAdd">
                <variable name="debuggeeFile">$(penguinFile)</variable>
                <variable name="debuggeeLineNum">31</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1qo1"
                               regexp="true">
                <text>b_main[.]cpp:31.*</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1qbz" postdelay="1000"
                           procedure="uiShowMemoryBrowserView"/>
            <TextInputStep clear="true" client="$(client)"
                           component="Memory_Browser2.combo" id="_1qb+"
                           postdelay="1000" single="false">
              <text>&amp;grid.data</text>
            </TextInputStep>
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonGo2" event="MOUSE_MPRC"
                            id="_1qb-" modifiers="16" postdelay="1000"/>
            <CheckBooleanStep checktype="visible" client="$(client)"
                              component="Memory_Browser2.canvas" id="_1qc0"/>
            <CheckBooleanStep checktype="visible" client="$(client)"
                              component="Memory_Browser2.canvas2" id="_1qc1"/>
            <TryStep id="_1qp2">
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/0"
                              event="MOUSE_MPRC" id="_1qp3" modifiers="16"
                              postdelay="2000"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                              event="MOUSE_MPRC" id="_1qp4" modifiers="16"
                              postdelay="2000"/>
              <ProcedureCall id="_1qp5" procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CatchSequence exception="TestException" id="_1qp6" maxerror="0"
                             name="ignore"/>
            </TryStep>
            <TestStep id="_1sak" name="breakpointViewDelAll">
              <ProcedureCall id="_1sal" procedure="uiDelAllBp"/>
              <TryStep id="_1sam" name="checkBreapointView">
                <ProcedureCall id="_1san"
                               procedure="qfs.swt.tree.checks.checkNumberOfRows">
                  <variable name="id">Breakpoints.tree&amp;/0</variable>
                  <variable name="compareValue">0</variable>
                  <variable name="compareMode">=</variable>
                  <variable name="errorLevel">ERROR</variable>
                  <variable name="appearInReport">1</variable>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_1sao"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1qc5" procedure="uiCloseMemoryBrowserView"/>
          </TestCase>
          <TestCase id="_1qc6" name="stepReturn">
            <comment>run-control step return test for C++ functions

</comment>
            <TestStep id="_1qyJ" name="bpMove">
              <ProcedureCall id="_1qyK" procedure="uiClickRse"/>
              <ProcedureCall id="_1qyL" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1qyM" postdelay="1000" procedure="bpExpAdd">
                <variable name="expBp">BALL::Move</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1qyN"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
            </TestStep>
            <TestStep id="_1qyO" name="stepReturn">
              <RepeatSequence count="4" id="_1qyP">
                <WhileSequence id="_1qyQ" name="stopAtMove" postdelay="2000"
                               test="1">
                  <TryStep id="_1qyR">
                    <SelectionEventStep client="$(client)"
                                        component="menu-org.eclipse.ui.run"
                                        event="SELECTION" id="_1qyd"
                                        postdelay="1000"/>
                    <SelectionEventStep client="$(client)"
                                        component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.Resume"
                                        event="SELECTION" id="_1qyw"/>
                    <CatchSequence exception="TestException" id="_1qyV"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                  <TryStep id="_1qyW">
                    <CheckStringStep client="$(client)"
                                     component="Debug.tree&amp;/0/0/0/0"
                                     id="_1qyX" local="true" notcheck="true"
                                     resvarname="res"/>
                    <IfSequence id="_1qyY"
                                test="&#34;$(res)&#34; == &#34;true&#34;">
                      <BreakStep id="_1qyZ"/>
                    </IfSequence>
                    <CatchSequence exception="TestException" id="_1qya"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </WhileSequence>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1qyb" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <WhileSequence id="_1qyk" name="stepReturn" test="1">
                  <TryStep id="_1qyl">
                    <SelectionEventStep client="$(client)"
                                        component="menu-org.eclipse.ui.run"
                                        event="SELECTION" id="_1qyu"
                                        postdelay="1000"/>
                    <SelectionEventStep client="$(client)"
                                        component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                                        event="SELECTION" id="_1qyv"
                                        postdelay="4000"/>
                    <CatchSequence exception="TestException" id="_1qyo"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                  <TryStep id="_1qyp">
                    <CheckStringStep client="$(client)"
                                     component="Debug.tree&amp;/0/0/0/0"
                                     id="_1qyq" local="true" notcheck="true"
                                     resvarname="res"/>
                    <IfSequence id="_1qyr"
                                test="&#34;$(res)&#34; == &#34;true&#34;">
                      <BreakStep id="_1qys"/>
                    </IfSequence>
                    <CatchSequence exception="TestException" id="_1qyt"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </WhileSequence>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1qyj" regexp="true">
                  <text>main.*</text>
                </CheckStringStep>
              </RepeatSequence>
            </TestStep>
            <TestStep id="_1sap" name="breakpointViewDelAll">
              <ProcedureCall id="_1saq" procedure="uiDelAllBp"/>
              <TryStep id="_1sar" name="checkBreapointView">
                <ProcedureCall id="_1sas"
                               procedure="qfs.swt.tree.checks.checkNumberOfRows">
                  <variable name="id">Breakpoints.tree&amp;/0</variable>
                  <variable name="compareValue">0</variable>
                  <variable name="compareMode">=</variable>
                  <variable name="errorLevel">ERROR</variable>
                  <variable name="appearInReport">1</variable>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_1sat"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestCase>
          <TestCase id="_1qcO" name="terminateAndRelaunch">
            <comment>run-control terminate and relaunch 
</comment>
            <TestStep id="_1scU" name="breakpointAdd">
              <ProcedureCall id="_1scV" procedure="uiClickRse"/>
              <ProcedureCall id="_1scW" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1scX" postdelay="4000" procedure="bpExpAdd">
                <variable name="expBp">BALL::Move</variable>
              </ProcedureCall>
              <TestStep id="_1scY" name="breakpointView">
                <TryStep id="_1scZ" name="checkBreapointView">
                  <CheckStringStep client="$(client)"
                                   component="Breakpoints.tree&amp;/0"
                                   id="_1sca" regexp="true">
                    <text>BALL::Move.*</text>
                  </CheckStringStep>
                  <CatchSequence exception="TestException" id="_1scb"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1scc" name="terminateAndRelaunch">
              <RepeatSequence count="3" id="_1qcR" name="terminateRelaunch">
                <TestStep id="_1sde" name="resumeFromDebugView"
                          postdelay="5000">
                  <TryStep id="_1sdf" name="resumeFromDebugView">
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="Debug.tree&amp;/0/0/0"
                                    event="MOUSE_MPRC" id="_1sdg"
                                    modifiers="16" postdelay="2000"/>
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                                    event="MOUSE_MPRC" id="_1sdh"
                                    modifiers="16" postdelay="2000"/>
                    <CatchSequence exception="TestException" id="_1sdj"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep id="_1sdk" name="debugView">
                  <TryStep id="_1sdl" name="checkDebugView">
                    <ProcedureCall id="_1sdi"
                                   procedure="qfs.swt.tree.expandNode">
                      <variable name="id">Debug.tree&amp;/0/0/0</variable>
                      <variable name="node">0</variable>
                      <variable name="separator">&amp;</variable>
                    </ProcedureCall>
                    <CheckStringStep client="$(client)"
                                     component="Debug.tree&amp;/0/0/0/0"
                                     id="_1sdm" regexp="true">
                      <text>BALL::Move.*</text>
                    </CheckStringStep>
                    <CatchSequence exception="TestException" id="_1sdn"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep id="_1se0" name="registerView">
                  <ProcedureCall id="_1se1" postdelay="2000"
                                 procedure="uiClickRegisterView"/>
                  <TryStep id="_1se2" name="valueCheck">
                    <ProcedureCall id="_1se3" postdelay="2000"
                                   procedure="qfs.swt.tree.expandNode">
                      <variable name="id">Registers.tree@Name</variable>
                      <variable name="node">0</variable>
                      <variable name="separator">&amp;</variable>
                    </ProcedureCall>
                    <CheckStringStep client="$(client)"
                                     component="Registers.tree@Value&amp;/0/0"
                                     id="_1se4" regexp="true">
                      <text>0x[0-9a-fA-F]+</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="Registers.tree@Value&amp;/0/1"
                                     id="_1se5" regexp="true">
                      <text>0x[0-9a-fA-F]+</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="Registers.tree@Value&amp;/0/2"
                                     id="_1se6" regexp="true">
                      <text>0x[0-9a-fA-F]+</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="Registers.tree@Value&amp;/0/3"
                                     id="_1se7" regexp="true">
                      <text>0x[0-9a-fA-F]+</text>
                    </CheckStringStep>
                    <CatchSequence exception="ComponentNotFoundException"
                                   id="_1se8" maxerror="0" name="ignore"/>
                    <CatchSequence exception="TestException" id="_1se9"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep id="_1sdo" name="variableView">
                  <ProcedureCall id="_1sdp" postdelay="2000"
                                 procedure="uiClickVariableView"/>
                  <TryStep id="_1sdq" name="nameTypeCheck">
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Name@/this"
                                     id="_1sdr">
                      <text>this</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Type@/this"
                                     id="_1sds">
                      <text>class BALL *</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Name@/new_position"
                                     id="_1sdt">
                      <text>new_position</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Type@/new_position"
                                     id="_1sdu">
                      <text>POINT</text>
                    </CheckStringStep>
                    <CatchSequence exception="TestException" id="_1sdv"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                  <TryStep id="_1sdw" name="expandCheck">
                    <ProcedureCall id="_1sdx" postdelay="2000"
                                   procedure="qfs.swt.tree.expandNode">
                      <variable name="id">WorkbenchWindow.tree2@Name</variable>
                      <variable name="node">new_position</variable>
                      <variable name="separator">@</variable>
                    </ProcedureCall>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Value@/new_position/x"
                                     id="_1sdy" regexp="true">
                      <text>[-]?[0-9]+[ \t]*</text>
                    </CheckStringStep>
                    <CheckStringStep client="$(client)"
                                     component="WorkbenchWindow.tree2@Value@/new_position/y"
                                     id="_1sdz" regexp="true">
                      <text>[0-9]+[ \t]*</text>
                    </CheckStringStep>
                    <CatchSequence exception="ComponentNotFoundException"
                                   id="_1sd+" maxerror="0" name="ignore"/>
                    <CatchSequence exception="TestException" id="_1sd-"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep id="_1sdG" name="terminateAndRelauch"
                          postdelay="5000">
                  <TryStep id="_1sdH" name="terminateAndRelaunch">
                    <ProcedureCall id="_1sdI"
                                   procedure="dbgViewTerminateRelaunch"/>
                    <CatchSequence exception="TestException" id="_1sdJ"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
                <TestStep id="_1seA" name="relaunchAtMain">
                  <TryStep id="_1seB" name="checkDebugView">
                    <CheckStringStep client="$(client)"
                                     component="Debug.tree&amp;/0/0/0/0"
                                     id="_1seE" local="true" regexp="true"
                                     resvarname="stopAtMain">
                      <text>main().*</text>
                    </CheckStringStep>
                    <CatchSequence exception="TestException" id="_1seD"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </TestStep>
              </RepeatSequence>
            </TestStep>
            <TestStep id="_1saz" name="breakpointViewDelAll">
              <ProcedureCall id="_1sa+" procedure="uiDelAllBp"/>
              <TryStep id="_1sa-" name="checkBreapointView">
                <ProcedureCall id="_1sb0"
                               procedure="qfs.swt.tree.checks.checkNumberOfRows">
                  <variable name="id">Breakpoints.tree&amp;/0</variable>
                  <variable name="compareValue">0</variable>
                  <variable name="compareMode">=</variable>
                  <variable name="errorLevel">ERROR</variable>
                  <variable name="appearInReport">1</variable>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_1sb1"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestCase>
          <TestCase id="_1qcD" name="openDebugCmdShell">
            <comment>debug view "Debug Command Shell" test
</comment>
            <TestStep id="_1qyx" name="bpMove">
              <ProcedureCall id="_1qyy" procedure="uiClickRse"/>
              <ProcedureCall id="_1qyz" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1qy+" postdelay="1000" procedure="bpExpAdd">
                <variable name="expBp">BALL::Move</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1qy-"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1qcJ" procedure="uiOpenDbgShell"/>
            <ProcedureCall id="_1qcK" procedure="dbgCmdErrorCheck"/>
            <ProcedureCall id="_1qcL" procedure="uiCloseDbgShell"/>
            <ProcedureCall id="_1qcM" procedure="uiDelAllBp"/>
          </TestCase>
          <TestSet id="_1r1F" name="debugCmdShell">
            <DependencyReference id="_1r1U"
                                 reference="wb.wdbrpcLaunchDebugCmdShell"/>
            <TestCase id="_1r2h" name="cmdUntil">
              <comment>Debug Command Shell "command" test
1,until
2,enter


</comment>
              <ProcedureCall id="_1r2i" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <TestStep id="_1r3R" name="untilMove">
                <ProcedureCall id="_1r3K" postdelay="2000"
                               procedure="cmdUntil"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1r2k">
                  <text>main() - b_main.cpp:31</text>
                </CheckStringStep>
              </TestStep>
              <ProcedureCall id="_1r2p" procedure="dbgCmdSave"/>
            </TestCase>
            <TestCase id="_1q+5" name="cmdNext">
              <comment>Debug Command Shell "command" test
1,next
2,enter
3,n

</comment>
              <ProcedureCall id="_1r1X" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <TestStep id="_1r3S" name="untilMove">
                <ProcedureCall id="_1r3T" postdelay="2000"
                               procedure="cmdUntil"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1r3U">
                  <text>main() - b_main.cpp:31</text>
                </CheckStringStep>
              </TestStep>
              <ProcedureCall id="_1r1Z" postdelay="2000" procedure="cmdNext"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r23">
                <text>main() - b_main.cpp:30</text>
              </CheckStringStep>
              <KeyEventStep client="$(client)"
                            component="Debug_Command_Shell.canvas"
                            event="KEY_PTR" id="_1r26" keychar="13"
                            keycode="10" modifiers="0" postdelay="2000"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r27">
                <text>main() - b_main.cpp:31</text>
              </CheckStringStep>
              <ProcedureCall id="_1r28" postdelay="2000" procedure="cmdN"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r29">
                <text>main() - b_main.cpp:30</text>
              </CheckStringStep>
              <ProcedureCall id="_1r1Y" procedure="dbgCmdSave"/>
            </TestCase>
            <TestCase id="_1r2W" name="cmdStep">
              <comment>Debug Command Shell "command" test
1,step
2,enter
3,s

</comment>
              <ProcedureCall id="_1r2X" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <TestStep id="_1r3V" name="untilMove">
                <ProcedureCall id="_1r3W" postdelay="2000"
                               procedure="cmdUntil"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1r3X">
                  <text>main() - b_main.cpp:31</text>
                </CheckStringStep>
              </TestStep>
              <ProcedureCall id="_1r2Y" postdelay="1000" procedure="cmdStep"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r3Y"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
              <KeyEventStep client="$(client)"
                            component="Debug_Command_Shell.canvas"
                            event="KEY_PTR" id="_1r2a" keychar="13"
                            keycode="10" modifiers="0" postdelay="1000"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r2b"
                               regexp="true">
                <text>POINT.*</text>
              </CheckStringStep>
              <ProcedureCall id="_1r2c" postdelay="1000" procedure="cmdS"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r3Z"
                               regexp="true">
                <text>POINT.*</text>
              </CheckStringStep>
              <ProcedureCall id="_1r2e" procedure="dbgCmdSave"/>
            </TestCase>
            <TestCase id="_1r3a" name="cmdFinish">
              <comment>Debug Command Shell "command" test
1,Finish
2,enter

</comment>
              <ProcedureCall id="_1r3b" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <TestStep id="_1r3c" name="untilMove">
                <ProcedureCall id="_1r4n" postdelay="5000"
                               procedure="cmdUntil174"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1r3e">
                  <text>POINT() - b_main.cpp:174</text>
                </CheckStringStep>
              </TestStep>
              <ProcedureCall id="_1r4C" postdelay="2000"
                             procedure="cmdFinish"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r4D">
                <text>BALL() - b_main.cpp:106</text>
              </CheckStringStep>
              <KeyEventStep client="$(client)"
                            component="Debug_Command_Shell.canvas"
                            event="KEY_PTR" id="_1r4E" keychar="13"
                            keycode="10" modifiers="0" postdelay="2000"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r4F">
                <text>SOFT() - b_soft.h:10</text>
              </CheckStringStep>
              <ProcedureCall id="_1r3l" procedure="dbgCmdSave"/>
            </TestCase>
            <TestCase id="_1r4G" name="cmdBreak">
              <comment>Debug Command Shell "break" test


</comment>
              <ProcedureCall id="_1r4H" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <TestStep id="_1r4I" name="breakLine" postdelay="2000">
                <ProcedureCall id="_1r5l" procedure="cmdBreakLine"/>
              </TestStep>
              <ProcedureCall id="_1r5p" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1r86">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1r87" regexp="true">
                  <text>b_main.cpp:174.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1r88"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1r4R" procedure="dbgCmdSave"/>
            </TestCase>
            <TestCase id="_1r7i" name="cmdContinue">
              <comment>Debug Command Shell "continue" test


</comment>
              <ProcedureCall id="_1r7j" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <TestStep id="_1r7k" name="breakLine" postdelay="2000">
                <ProcedureCall id="_1r7l" procedure="cmdBreakLine"/>
              </TestStep>
              <ProcedureCall id="_1r7m" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1r80">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1r82" regexp="true">
                  <text>b_main.cpp:174.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1r81"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1r7o" name="continue" postdelay="3000">
                <ProcedureCall id="_1r7p" procedure="cmdContinue"/>
              </TestStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r7r">
                <text>POINT() - b_main.cpp:174</text>
              </CheckStringStep>
              <ProcedureCall id="_1r7q" procedure="dbgCmdSave"/>
            </TestCase>
            <TestCase id="_1r5q" name="cmdScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <ProcedureCall id="_1r5r" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1r6i" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1r5u" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1r83">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1r84" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1r85"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1r7s" name="continue" postdelay="3000">
                <ProcedureCall id="_1r7t" procedure="cmdContinue"/>
              </TestStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1r7u"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
              <ProcedureCall id="_1r5w" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
        <TestSet id="_1sY5" name="attach">
          <variable name="tgtDebuggee">/dfe/penguin</variable>
          <variable name="object">penguin</variable>
          <DependencyReference id="_1sYi" reference="wb.penguinAttachWdbrpc"/>
          <TestCase id="_1sYj" name="debugView">
            <comment>debug view should show the correct stackframes for penguin

</comment>
            <TestStep id="_1sYk" name="bpMove">
              <ProcedureCall id="_1sYl" procedure="uiClickRse"/>
              <ProcedureCall id="_1sYm" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1sYn" postdelay="1000" procedure="bpExpAdd">
                <variable name="expBp">BALL::Move</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1sYo"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
            </TestStep>
            <TestStep id="_1sYp" name="dbgMove">
              <RepeatSequence count="4" id="_1sYq">
                <WhileSequence id="_1sYr" test="1">
                  <TryStep id="_1sYs">
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="Debug.tree&amp;/0/0/0"
                                    event="MOUSE_MPRC" id="_1sYt"
                                    modifiers="16" postdelay="2000"/>
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                                    event="MOUSE_MPRC" id="_1sYu"
                                    modifiers="16" postdelay="2000"/>
                    <ProcedureCall id="_1sYv"
                                   procedure="qfs.swt.tree.expandNode">
                      <variable name="id">Debug.tree&amp;/0/0/0</variable>
                      <variable name="node">0</variable>
                      <variable name="separator">&amp;</variable>
                    </ProcedureCall>
                    <CatchSequence exception="TestException" id="_1sYw"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                  <TryStep id="_1sYx">
                    <CheckStringStep client="$(client)"
                                     component="Debug.tree&amp;/0/0/0/0"
                                     id="_1sYy" local="true" notcheck="true"
                                     resvarname="res"/>
                    <IfSequence id="_1sYz"
                                test="&#34;$(res)&#34; == &#34;true&#34;">
                      <BreakStep id="_1sY+"/>
                    </IfSequence>
                    <CatchSequence exception="TestException" id="_1sY-"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1sZ0" regexp="true">
                    <text>BALL::Move.*</text>
                  </CheckStringStep>
                </WhileSequence>
              </RepeatSequence>
            </TestStep>
            <TestStep id="_1sh8" name="breakpointViewDelAll">
              <ProcedureCall id="_1sh9" procedure="uiDelAllBp"/>
              <TryStep id="_1shA" name="checkBreapointView">
                <ProcedureCall id="_1shB"
                               procedure="qfs.swt.tree.checks.checkNumberOfRows">
                  <variable name="id">Breakpoints.tree&amp;/0</variable>
                  <variable name="compareValue">0</variable>
                  <variable name="compareMode">=</variable>
                  <variable name="errorLevel">ERROR</variable>
                  <variable name="appearInReport">1</variable>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_1shC"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestCase>
          <TestCase id="_1sZ2" name="stepReturn">
            <comment>run-control step return test for C++ functions

</comment>
            <TestStep id="_1sZ3" name="bpMove">
              <ProcedureCall id="_1sZ4" procedure="uiClickRse"/>
              <ProcedureCall id="_1sZ5" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1sZ6" postdelay="4000" procedure="bpExpAdd">
                <variable name="expBp">BALL::Move</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1sZ7"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
            </TestStep>
            <TestStep id="_1sZ8" name="stepReturn">
              <RepeatSequence count="4" id="_1sZ9">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sZK" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <WhileSequence id="_1sZL" name="stepReturn" test="1">
                  <TryStep id="_1sZM">
                    <SelectionEventStep client="$(client)"
                                        component="menu-org.eclipse.ui.run"
                                        event="SELECTION" id="_1sZN"
                                        postdelay="1000"/>
                    <SelectionEventStep client="$(client)"
                                        component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                                        event="SELECTION" id="_1sZO"
                                        postdelay="4000"/>
                    <CatchSequence exception="TestException" id="_1sZP"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                  <TryStep id="_1sZQ">
                    <CheckStringStep client="$(client)"
                                     component="Debug.tree&amp;/0/0/0/0"
                                     id="_1sZR" local="true" notcheck="true"
                                     resvarname="res"/>
                    <IfSequence id="_1sZS"
                                test="&#34;$(res)&#34; == &#34;true&#34;">
                      <BreakStep id="_1sZT"/>
                    </IfSequence>
                    <CatchSequence exception="TestException" id="_1sZU"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </WhileSequence>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sZV" regexp="true">
                  <text>main.*</text>
                </CheckStringStep>
                <WhileSequence id="_1sZA" name="stopAtMove" postdelay="2000"
                               test="1">
                  <TryStep id="_1sZB">
                    <SelectionEventStep client="$(client)"
                                        component="menu-org.eclipse.ui.run"
                                        event="SELECTION" id="_1sZC"
                                        postdelay="1000"/>
                    <SelectionEventStep client="$(client)"
                                        component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.Resume"
                                        event="SELECTION" id="_1sZD"/>
                    <CatchSequence exception="TestException" id="_1sZE"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                  <TryStep id="_1sZF">
                    <CheckStringStep client="$(client)"
                                     component="Debug.tree&amp;/0/0/0/0"
                                     id="_1sZG" local="true" notcheck="true"
                                     resvarname="res"/>
                    <IfSequence id="_1sZH"
                                test="&#34;$(res)&#34; == &#34;true&#34;">
                      <BreakStep id="_1sZI"/>
                    </IfSequence>
                    <CatchSequence exception="TestException" id="_1sZJ"
                                   maxerror="0" name="ignore"/>
                  </TryStep>
                </WhileSequence>
              </RepeatSequence>
            </TestStep>
            <TestStep id="_1shD" name="breakpointViewDelAll">
              <ProcedureCall id="_1shE" procedure="uiDelAllBp"/>
              <TryStep id="_1shF" name="checkBreapointView">
                <ProcedureCall id="_1shG"
                               procedure="qfs.swt.tree.checks.checkNumberOfRows">
                  <variable name="id">Breakpoints.tree&amp;/0</variable>
                  <variable name="compareValue">0</variable>
                  <variable name="compareMode">=</variable>
                  <variable name="errorLevel">ERROR</variable>
                  <variable name="appearInReport">1</variable>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_1shH"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestCase>
          <TestCase id="_1sZm" name="gdbScript">
            <comment>Debug Command Shell gdb script test

</comment>
            <TestStep id="_1sZn" name="debugCmdShellOpen">
              <ProcedureCall id="_1sZo" procedure="uiOpenDbgShell">
                <variable name="level">3</variable>
              </ProcedureCall>
              <ProcedureCall id="_1sZp" procedure="dbgCmdErrorCheck"/>
            </TestStep>
            <TestStep id="_1saI" name="debugCmdShellAttach">
              <TryStep id="_1sa0" name="suspendCheck">
                <ProcedureCall id="_1sa3" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1sa4"
                                 regexp="true">
                  <text>.*Stopped - container.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1sa8"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1sa9"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1saJ" name="debugCmdShellViewClean">
              <ProcedureCall id="_1sZq" postdelay="1000"
                             procedure="dbgCmdClean"/>
            </TestStep>
            <TestStep id="_1saK" name="gdbScript">
              <ProcedureCall id="_1sZr" procedure="cmdScriptPenguin"/>
            </TestStep>
            <TestStep id="_1saD" name="breakpointView">
              <ProcedureCall id="_1sZs" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sZt" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sZu" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sZv"
                               maxerror="0"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1sZw" name="continue" postdelay="3000">
              <ProcedureCall id="_1sZx" procedure="cmdContinue"/>
            </TestStep>
            <TestStep id="_1saC" name="debugViewBrekpointHit">
              <TryStep id="_1sZy" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sZz" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sZ+"
                               maxerror="0"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1shI" name="breakpointViewDelAll">
              <ProcedureCall id="_1shJ" procedure="uiDelAllBp"/>
              <TryStep id="_1shK" name="checkBreapointView">
                <ProcedureCall id="_1shL"
                               procedure="qfs.swt.tree.checks.checkNumberOfRows">
                  <variable name="id">Breakpoints.tree&amp;/0</variable>
                  <variable name="compareValue">0</variable>
                  <variable name="compareMode">=</variable>
                  <variable name="errorLevel">ERROR</variable>
                  <variable name="appearInReport">1</variable>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_1shM"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1sZ-" procedure="dbgCmdSave"/>
            <TestStep id="_1sem" name="closeDebugCmdShell">
              <ProcedureCall id="_1sen" procedure="uiCloseDbgShell"/>
            </TestStep>
          </TestCase>
        </TestSet>
      </TestSet>
      <TestSet id="_1qMb" name="mthreads">
        <variable name="debuggee">mthread_stack</variable>
        <DependencyReference id="_1seo" reference="wb.wdbrpcLaunch">
          <variable name="tgtDebuggee">/dfe/mthread_stack</variable>
        </DependencyReference>
        <TestCase id="_1qMh" name="resumeAndSuspend">
          <comment>run control test :
resume
suspend
</comment>
          <TestStep id="_1rch" name="resumeFromBeginning">
            <TryStep id="_1rd9" name="resume">
              <ProcedureCall id="_1rdF" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rdA" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rci" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1rcl" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rcm"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1rcn"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1rco"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1rcp"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rdB"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rdC" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rcr" name="suspendAll">
            <comment>suspend all the threads</comment>
            <TryStep id="_1rdI" name="suspend">
              <ProcedureCall id="_1rdK" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rd8" procedure="dbgViewSuspend"/>
              <ProcedureCall id="_1rcv" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rcw"
                               regexp="true">
                <text>.*Stopped - container.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1rcx"
                               regexp="true">
                <text>.*Stopped - container.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1rcy"
                               regexp="true">
                <text>.*Stopped - container.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1rcz"
                               regexp="true">
                <text>.*Stopped - container.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rdM"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rdN" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rdO" name="resumeOnlyOneThread">
            <comment>resume only the 2nd thread</comment>
            <TryStep id="_1rdP" name="resume">
              <ProcedureCall id="_1rdQ" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rdR" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/1</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rdS" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1rdW" postdelay="2000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rdd"
                               regexp="true">
                <text>.*Stopped - container.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1rde"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1rdf"
                               regexp="true">
                <text>.*Stopped - container.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1rdg"
                               regexp="true">
                <text>.*Stopped - container.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rdT"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rdU" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rdn" name="suspendOnlyOneThread">
            <comment>suspend only the 3rd thread</comment>
            <TestStep id="_1re3" name="resumeFromBeginning">
              <TryStep id="_1re4" name="resumeAll">
                <ProcedureCall id="_1re5" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1re6" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1re7" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1reC" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1reD"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1reE"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1reF"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1reG"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1re8"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1re9"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TryStep id="_1rdo" name="suspendOneThread">
              <ProcedureCall id="_1rdp" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rdq" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/2</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1reI" procedure="dbgViewSuspend"/>
              <ProcedureCall id="_1rds" postdelay="2000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rdt"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1rdu"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1rdv"
                               regexp="true">
                <text>.*Stopped - User Request.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1rdw"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rdx"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rdy" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
        </TestCase>
        <TestCase id="_1qMn" name="lineBreakpoint">
          <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
          <ProcedureCall id="_1qMo" procedure="uiClickRse"/>
          <ProcedureCall id="_1rae" procedure="uiClickBreakpointView"/>
          <TestStep id="_1rbC" name="lineBreakpoint">
            <comment>Breakpoint view : line breakpoint add and delete</comment>
            <ProcedureCall id="_1rbs" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1rbJ" name="computeFile">
              <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
srcfsDir = os.path.join(rootfsDir,'usr','src','debug')
mthreadStackFile = os.path.join(srcfsDir,'mthread-stack-0.1','mthread_stack.c')

rc.setLocal('mthreadStackFile',mthreadStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1rbK" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">212</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rbw">
              <text>mthread_stack.c:212 (*Planted*, Restricted Scope)</text>
            </CheckStringStep>
            <TestStep id="_1reJ" name="resumeFromBeginning">
              <TryStep id="_1reK" name="resume">
                <ProcedureCall id="_1reL" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1reM" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1reN" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1reO" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rfN"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1reX">
                  <text>main() - mthread_stack.c:212</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1reT"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1reU"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1reY" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">216</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/1" id="_1reZ">
              <text>mthread_stack.c:216 (*Planted*, Restricted Scope)</text>
            </CheckStringStep>
            <TestStep id="_1rea" name="resume">
              <TryStep id="_1reb" name="resume">
                <ProcedureCall id="_1rec" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1red" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1ree" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1ref" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rfO"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rfP">
                  <text>main() - mthread_stack.c:216</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1reh"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1rei"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1rej" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">280</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/2" id="_1rek">
              <text>mthread_stack.c:280 (*Planted*, Restricted Scope)</text>
            </CheckStringStep>
            <TestStep id="_1vTj" name="resume">
              <TryStep id="_1vTk" name="resume">
                <ProcedureCall id="_1vTl" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1vTm" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1vTn" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1vTo" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1vTp"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1vTq">
                  <text>main() - mthread_stack.c:280</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1vTr"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1vTs"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1vTh" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">306</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/3" id="_1vTi">
              <text>mthread_stack.c:306 (*Planted*, Restricted Scope)</text>
            </CheckStringStep>
            <TestStep id="_1rel" name="resumeFromThreadCreaate">
              <TryStep id="_1rem" name="resume">
                <ProcedureCall id="_1ren" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1reo" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rep" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1req" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rfQ"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rfR">
                  <text>main() - mthread_stack.c:306</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1res"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1ret"
                               maxerror="2" name="ignore"/>
              </TryStep>
              <TryStep id="_1reu" name="resume">
                <ProcedureCall id="_1rev" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rew" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rex" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1rey" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rfS"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rfT">
                  <text>main() - mthread_stack.c:306</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1rf0"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1re+"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1re-"
                               maxerror="2" name="ignore"/>
              </TryStep>
              <TryStep id="_1rfB" name="resume">
                <ProcedureCall id="_1rfC" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rfD" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rfE" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1rfF" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1rfM"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rfH"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1rfI"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1rfL"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1rfJ"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1rfK"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1rbI" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1rmF" name="temporyBreakpoint">
          <comment>tempory breakpoint

</comment>
          <TestStep id="_1rnJ" name="temporyBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1roT" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1roU" name="computeFile">
              <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
srcfsDir = os.path.join(rootfsDir,'usr','src','debug')
mthreadStackFile = os.path.join(srcfsDir,'mthread-stack-0.1','mthread_stack.c')

rc.setLocal('mthreadStackFile',mthreadStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1rom" postdelay="3000"
                           procedure="bpLineTempory">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">212</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1roW"
                             regexp="true">
              <text>.*Temporary.*</text>
            </CheckStringStep>
            <TestStep id="_1ros" name="resumeFromBeginning">
              <TryStep id="_1rot" name="resume">
                <ProcedureCall id="_1rov" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1row" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1rox" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1roy"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1roz">
                  <text>main() - mthread_stack.c:212</text>
                </CheckStringStep>
                <TryStep id="_1rp0" name="waitForTemoryBreakpointDelete">
                  <ComponentWaiter absence="true" client="$(client)"
                                   component="Breakpoints.tree&amp;/0"
                                   id="_1rp1" timeout="5000"/>
                  <CatchSequence exception="IndexFoundException" id="_1rp2"
                                 maxerror="2" name="error"/>
                </TryStep>
                <CatchSequence exception="IndexNotFoundException" id="_1ro+"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1ro-"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1rr7" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rqb" name="conditionBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <TestStep id="_1rqt" name="conditionBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1rqu" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1rqv" name="computeFile">
              <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
srcfsDir = os.path.join(rootfsDir,'usr','src','debug')
mthreadStackFile = os.path.join(srcfsDir,'mthread-stack-0.1','mthread_stack.c')

rc.setLocal('mthreadStackFile',mthreadStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1rqw" postdelay="1000"
                           procedure="bpLineCondition">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">306</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rqx"
                             regexp="true">
              <text>.*Condition=t==1.*</text>
            </CheckStringStep>
            <TestStep id="_1rqy" name="resume">
              <TryStep id="_1rqz" name="resume">
                <ProcedureCall id="_1rq+" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rq-" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1rr0" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rr1"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rr2">
                  <text>main() - mthread_stack.c:306</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1rr3"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <TryStep id="_1rr8">
                  <ComponentWaiter client="$(client)"
                                   component="Debug.tree&amp;/0/0/2"
                                   id="_1rr9" timeout="2000"/>
                  <CatchSequence exception="IndexFoundException" id="_1rrA"
                                 maxerror="2"/>
                  <CatchSequence exception="IndexNotFoundException" id="_1rrB"
                                 maxerror="0" name="success"/>
                </TryStep>
                <CatchSequence exception="IndexNotFoundException" id="_1rr4"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1rr5"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1rr6" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rrR" name="skipBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <TestStep id="_1rrS" name="skipBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1rrT" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1rrU" name="computeFile">
              <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
srcfsDir = os.path.join(rootfsDir,'usr','src','debug')
midStackFile = os.path.join(srcfsDir,'mthread-stack-0.1','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1rrV" postdelay="1000" procedure="bpLineSkip">
              <variable name="debuggeeFile">$(midStackFile)</variable>
              <variable name="debuggeeLineNum">72</variable>
              <variable name="skipNum">3</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rrW"
                             regexp="true">
              <text>.*Planted.*Skip Count=3.*</text>
            </CheckStringStep>
            <TestStep id="_1rrX" name="resume">
              <TryStep id="_1rrY" name="resume">
                <ProcedureCall id="_1rrZ" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rra" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1rrb" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rrc"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <ProcedureCall id="_1rsh" procedure="uiClickVariableView"/>
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2@Value@/i"
                                 id="_1rr+">
                  <text>3 </text>
                </CheckStringStep>
                <ProcedureCall id="_1rsi" procedure="uiClickExpressionView"/>
                <ProcedureCall id="_1rsq" procedure="expAddwatch">
                  <variable name="item">i</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Expressions.tree@Value@/i"
                                 id="_1rst">
                  <text>3 </text>
                </CheckStringStep>
                <ProcedureCall id="_1rsu"
                               procedure="qfs.run-log.screenshots.logScreenshot">
                  <variable name="inSUT">false</variable>
                  <variable name="title"/>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1rsw" procedure="expDelAll"/>
                <ProcedureCall id="_1rsv" procedure="uiCloseExpressionView"/>
                <CatchSequence exception="IndexNotFoundException" id="_1rrj"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1rrk"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1rrl" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rfW" name="expressionBreakpoint">
          <comment>expression breakpoint test 
debug view 
breakpoint view
</comment>
          <ProcedureCall id="_1rfX" procedure="uiClickRse"/>
          <ProcedureCall id="_1rfY" procedure="uiClickBreakpointView"/>
          <TestStep id="_1rgW" name="expressionBreakpoint">
            <comment>Breakpoint view : expression breakpoint add and delete</comment>
            <ProcedureCall id="_1rgd" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rge" procedure="bpExp1"/>
            <ProcedureCall id="_1rgf" procedure="bpExp2"/>
            <ProcedureCall id="_1rgg" procedure="bpExp3"/>
            <ProcedureCall id="_1rgh" procedure="bpExp4"/>
            <ProcedureCall id="_1rgi" procedure="bpExp5"/>
            <ProcedureCall id="_1rgj" procedure="uiCheckFrame1"/>
            <ProcedureCall id="_1rgk" procedure="uiCheckFrame2"/>
            <ProcedureCall id="_1rgl" procedure="uiCheckFrame3"/>
            <ProcedureCall id="_1rgm" procedure="uiCheckFrame4"/>
            <ProcedureCall id="_1rgn" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rgo" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1rs-" name="prologBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <TestStep id="_1rt0" name="prologBreakpoint1">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1rt1" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rtX" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack1</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rt4"
                             predelay="1000" regexp="true">
              <text>mid_stack1.*</text>
            </CheckStringStep>
            <TestStep id="_1rt5" name="resume">
              <TryStep id="_1rt6" name="resume">
                <ProcedureCall id="_1rt7" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rt8" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1rt9" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rtA"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rtl">
                  <text>mid_stack1() - mid_stack.c:40</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1rtJ"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1rtK"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1rtm" name="prologBreakpoint2">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1rtn" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rto" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack2</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/1" id="_1rtp"
                             predelay="1000" regexp="true">
              <text>mid_stack2.*</text>
            </CheckStringStep>
            <TestStep id="_1rtq" name="resume">
              <TryStep id="_1rtr" name="resume">
                <ProcedureCall id="_1rts" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1rtt" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1rtu" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1rtv"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rtw">
                  <text>mid_stack2() - mid_stack.c:109</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1rtx"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1rty"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1rtz" name="prologBreakpoint3">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1rt+" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rt-" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack3</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/2" id="_1ru0"
                             predelay="1000" regexp="true">
              <text>mid_stack3.*</text>
            </CheckStringStep>
            <TestStep id="_1ru1" name="resume">
              <TryStep id="_1ru2" name="resume">
                <ProcedureCall id="_1ru3" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1ru4" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1ru5" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1ru6"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1ru7">
                  <text>mid_stack3() - mid_stack.c:355</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1ru8"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1ru9"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1ruA" name="prologBreakpoint4">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1ruB" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1ruC" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack4</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/3" id="_1ruD"
                             predelay="1000" regexp="true">
              <text>mid_stack4.*</text>
            </CheckStringStep>
            <TestStep id="_1ruE" name="resume">
              <TryStep id="_1ruF" name="resume">
                <ProcedureCall id="_1ruG" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1ruH" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1ruI" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1ruJ"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1ruK">
                  <text>mid_stack4() - mid_stack.c:522</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1ruL"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1ruM"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1ruN" name="prologBreakpoint5">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1ruO" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1ruP" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack5</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/4" id="_1ruQ"
                             predelay="1000" regexp="true">
              <text>mid_stack5.*</text>
            </CheckStringStep>
            <TestStep id="_1ruR" name="resume">
              <TryStep id="_1ruS" name="resume">
                <ProcedureCall id="_1ruT" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1ruU" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1ruV" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1ruW"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1ruX">
                  <text>mid_stack5() - mid_stack.c:690</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1ruY"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1ruZ"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1rtL" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qNr" name="stepReturn">
          <comment>run-control step return

</comment>
          <ProcedureCall id="_1ria" procedure="uiClickRse"/>
          <ProcedureCall id="_1qNs" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1qNt" procedure="bpExpMid5"/>
          <TestStep id="_1rjb" name="resumeFromBeginning">
            <TryStep id="_1rjc" name="resume">
              <ProcedureCall id="_1rjd" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rje" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rjf" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1rjg" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rjh"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rji"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rjj"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rjk" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rjS" name="stepReturnFrom5">
            <TryStep id="_1rjT" name="stepReturn">
              <ProcedureCall id="_1rjU" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rjV" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1rjW" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rjX"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rjY"
                               regexp="true">
                <text>mid_stack4.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rjZ"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rja" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1ril" name="stepReturnFrom4">
            <TryStep id="_1rim" name="stepReturn">
              <ProcedureCall id="_1rjO" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rip" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1riq" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rir"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1ris"
                               regexp="true">
                <text>mid_stack3.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rit"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1riu" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1riv" name="stepReturnFrom3">
            <TryStep id="_1riw" name="stepReturn">
              <ProcedureCall id="_1rjP" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1riz" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1ri+" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1ri-"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rj0"
                               regexp="true">
                <text>mid_stack2.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rj1"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rj2" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rj3" name="stepReturnFrom2">
            <TryStep id="_1rj4" name="stepReturn">
              <ProcedureCall id="_1rjQ" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rj7" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1rj8" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rj9"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rjA"
                               regexp="true">
                <text>mid_stack1.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rjB"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rjC" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rjD" name="stepReturnFrom1">
            <TryStep id="_1rjE" name="stepReturn">
              <ProcedureCall id="_1rjR" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rjH" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1rjI" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rjJ"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rjK"
                               regexp="true">
                <text>main.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rjL"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rjM" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1qNx" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rgp" name="stepOver">
          <comment>run-control : step over
</comment>
          <ProcedureCall id="_1rgq" procedure="uiClickRse"/>
          <ProcedureCall id="_1rgr" procedure="uiClickBreakpointView"/>
          <ServerScriptStep id="_1rh3" name="computeFile">
            <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
srcfsDir = os.path.join(rootfsDir,'usr','src','debug')
midStackFile = os.path.join(srcfsDir,'mthread-stack-0.1','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
          </ServerScriptStep>
          <ProcedureCall id="_1rh4" postdelay="2000" procedure="bpLineAdd">
            <variable name="debuggeeFile">$(midStackFile)</variable>
            <variable name="debuggeeLineNum">680</variable>
          </ProcedureCall>
          <TestStep id="_1rh5" name="stopAtLine680">
            <TryStep id="_1rh6" name="resume">
              <ProcedureCall id="_1rh7" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rh8" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rh9" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1rhA" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rhB"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rhC">
                <text>mid_stack4() - mid_stack.c:680</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rhD"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rhE" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rhi" name="stepOver">
            <TryStep id="_1rhj" name="stepOver">
              <ProcedureCall id="_1rhl" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rhm" postdelay="3000"
                             procedure="dbgViewStepOver"/>
              <ProcedureCall id="_1rhn" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rho"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rhp">
                <text>mid_stack4() - mid_stack.c:682</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rhq"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rhr" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rhs" name="stepOver">
            <TryStep id="_1rht" name="stepOver">
              <ProcedureCall id="_1rhv" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rhw" postdelay="3000"
                             procedure="dbgViewStepOver"/>
              <ProcedureCall id="_1rhx" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rhy"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rhz">
                <text>mid_stack3() - mid_stack.c:514</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rh+"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rh-" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1rkb" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rjl" name="stepInto">
          <comment>run-control : step into
</comment>
          <ProcedureCall id="_1rjm" procedure="uiClickRse"/>
          <ProcedureCall id="_1rjn" procedure="uiClickBreakpointView"/>
          <ServerScriptStep id="_1rjo" name="computeFile">
            <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
srcfsDir = os.path.join(rootfsDir,'usr','src','debug')
midStackFile = os.path.join(srcfsDir,'mthread-stack-0.1','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
          </ServerScriptStep>
          <ProcedureCall id="_1rjp" postdelay="2000" procedure="bpLineAdd">
            <variable name="debuggeeFile">$(midStackFile)</variable>
            <variable name="debuggeeLineNum">680</variable>
          </ProcedureCall>
          <TestStep id="_1rjq" name="stopAtLine680">
            <TryStep id="_1rjr" name="resume">
              <ProcedureCall id="_1rjt" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rju" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1rjv" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rjw"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rjx">
                <text>mid_stack4() - mid_stack.c:680</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rjy"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rjz" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rj+" name="stepInto">
            <TryStep id="_1rj-" name="stepInto">
              <ProcedureCall id="_1rk1" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rk2" postdelay="3000"
                             procedure="dbgViewStepInto"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rk4"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rk5"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rk6"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rk7" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rkI" name="stepInto">
            <TryStep id="_1rkJ" name="stepInto">
              <ProcedureCall id="_1rkL" postdelay="3000"
                             procedure="dbgViewStepInto"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rkN"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rkO"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/1" id="_1rka"
                               regexp="true">
                <text>mid_stack4.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rkP"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rkQ" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1rkc" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rkd" name="scopeBreakpoint">
          <comment>scope breakpoint test
</comment>
          <TestStep id="_1rlA" name="resumeFromBeginning">
            <TryStep id="_1rlB" name="resume">
              <ProcedureCall id="_1rlC" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rlD" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1rlE" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1rlF" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1rlG"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1rlH"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1rlI"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1rlJ"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1rlK"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1rlL" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1rke" procedure="uiClickRse"/>
          <ProcedureCall id="_1rkf" procedure="uiClickBreakpointView"/>
          <TestStep id="_1rlM" name="bpExpSharedCode">
            <TryStep id="_1rlW" name="add sharedCode" postdelay="3000">
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run"
                                  event="SELECTION" id="_1rlN"/>
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run-dfeBreakpoints"
                                  event="SELECTION" id="_1rlO"/>
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                                  event="SELECTION" id="_1rlP"/>
              <ComponentWaiter client="$(client)"
                               component="ExpressionBreakpointDialog"
                               id="_1rlQ"/>
              <SelectionEventStep client="$(client)"
                                  component="ExpressionBreakpointDialog.tabbed@General"
                                  event="SELECTION" id="_1rlR"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="tabGeneral2.text" event="MOUSE_MPRC"
                              id="_1rlS" modifiers="16" x="19" y="5"/>
              <TextInputStep clear="true" client="$(client)"
                             component="tabGeneral2.text" id="_1rlT"
                             postdelay="1000">
                <text>sharedCode</text>
              </TextInputStep>
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonOk11" event="MOUSE_MPRC"
                              id="_1rlU" modifiers="16" postdelay="1000"
                              predelay="1000"/>
              <ProcedureCall id="_1rlV" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1rlX"
                               regexp="true">
                <text>sharedCode.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1rlY" maxerror="0"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1rla" name="dbgViewShareCodeStop">
            <WhileSequence id="_1rlg" postdelay="1000" test="1">
              <TryStep id="_1rlh">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1/0"
                                 id="_1rli" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1rlj"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1rlk"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1rll"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/0" id="_1rlm"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/1" id="_1rln"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <WhileSequence id="_1rlo" postdelay="1000" test="2">
              <TryStep id="_1rlp">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2/0"
                                 id="_1rlq" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1rlr"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1rls"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1rlt"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/2/0" id="_1rlu"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/2/1" id="_1rlv"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <ProcedureCall id="_1rlZ" procedure="uiCheckSharedCodeFrame"/>
          </TestStep>
          <TestStep id="_1rkg" name="threadSpecificBreakpoint">
            <comment>thread specific breakpoint</comment>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/1/0"
                            event="MOUSE_MPRC" id="_1rl3" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Breakpoints.tree&amp;/0"
                            event="MOUSE_MPRC" id="_1rl4" modifiers="4"
                            popup="true" postdelay="1000"/>
            <SelectionEventStep client="$(client)"
                                component="menu-com.windriver.ide.debug.ui.restrictBreakpointScopeAction"
                                event="SELECTION" id="_1rl5"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/1/0"
                            event="MOUSE_MPRC" id="_1rl6" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                            event="MOUSE_MPRC" id="_1rl7" modifiers="16"/>
            <WhileSequence id="_1rlw" postdelay="1000" test="1">
              <TryStep id="_1rlx">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1/0"
                                 id="_1rly" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1rlz"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1rl+"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1rl-"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/0" id="_1rm0"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/1" id="_1rm1"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/2/0"
                            event="MOUSE_MPRC" id="_1rl8" modifiers="16"
                            postdelay="1000"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                            event="MOUSE_MPRC" id="_1rl9" modifiers="16"/>
            <TryStep id="_1rm8"
                     name="if the 2nd thread could hit the breakpoint specific for the 1st in 15 seconds">
              <ComponentWaiter client="$(client)"
                               component="Debug.tree&amp;/0/0/2/0"
                               id="_1rm9"/>
              <CatchSequence exception="IndexNotFoundException" id="_1rmA"
                             maxerror="0" name="success">
                <ProcedureCall id="_1rmE" procedure="qfs.run-log.logMessage">
                  <variable name="message">scope breakpoint success</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1rmD"
                               procedure="qfs.run-log.screenshots.logScreenshot">
                  <variable name="inSUT">false</variable>
                  <variable name="title"/>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
              </CatchSequence>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1rks" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rce" name="debugSymbolBrowser">
          <comment>debug symbol browser view test
</comment>
          <ProcedureCall id="_1rcf" procedure="symbolSharedCode"/>
          <ProcedureCall id="_1rcg" procedure="symbolMidStack"/>
          <ProcedureCall id="_1vjT" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qMk" name="sourceView">
          <comment>source view test

</comment>
          <ProcedureCall id="_1qMl" procedure="srcOpenSymbol"/>
        </TestCase>
        <TestCase id="_1qMw" name="debugView">
          <comment>debug view test
debug view should show the correct stackframes when different breakpoints are hit

</comment>
          <ProcedureCall id="_1qMx" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1qMy" procedure="bpExp1"/>
          <ProcedureCall id="_1qMz" procedure="bpExp2"/>
          <ProcedureCall id="_1qM+" procedure="bpExp3"/>
          <ProcedureCall id="_1qM-" procedure="bpExp4"/>
          <ProcedureCall id="_1qN0" procedure="bpExp5"/>
          <ProcedureCall id="_1qN1" procedure="uiCheckFrame1"/>
          <ProcedureCall id="_1qN2" procedure="uiCheckFrame2"/>
          <ProcedureCall id="_1qN3" procedure="uiCheckFrame3"/>
          <ProcedureCall id="_1qN4" procedure="uiCheckFrame4"/>
          <ProcedureCall id="_1qN5" procedure="uiCheckFrame5"/>
          <ProcedureCall id="_1qN6" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qN7" name="variableView">
          <comment>variable view test
</comment>
          <TestStep id="_1qN8" name="dbgMid5Stop">
            <ProcedureCall id="_1qN9" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qNA" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qNB" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qNC" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qND" procedure="uiClickVariableView"/>
          <ProcedureCall id="_1qNE" predelay="1000" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/1"
                          event="MOUSE_MPRC" id="_1qNF" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qNG" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/2"
                          event="MOUSE_MPRC" id="_1qNH" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qNI" procedure="frameCheck"/>
        </TestCase>
        <TestCase id="_1qNJ" name="expressionView">
          <comment>expression view test
</comment>
          <TestStep id="_1qNK" name="dbgMid5Stop">
            <ProcedureCall id="_1qNL" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qNM" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qNN" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qNO" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qNP" procedure="uiShowExpressionView"/>
          <ProcedureCall id="_1qNQ" local="true" procedure="expAddwatch">
            <variable name="item">q</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qNR" local="true" procedure="expAddwatch">
            <variable name="item">rectest</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qNS" local="true" procedure="expAddwatch">
            <variable name="item">s1</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qNT" postdelay="1000"
                         procedure="expExpandItems"/>
          <ProcedureCall id="_1qNU" predelay="1000"
                         procedure="expCollapsetems"/>
          <ProcedureCall id="_1qNV" procedure="expDelAll"/>
          <ProcedureCall id="_1qNW" procedure="uiCloseExpressionView"/>
        </TestCase>
        <TestCase id="_1qNX" name="registerView">
          <comment>register view test
</comment>
          <TestStep id="_1qNY" name="dbgMid5Stop">
            <ProcedureCall id="_1qNZ" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qNa" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qNb" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qNc" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qNd" procedure="uiShowRegisterView"/>
          <ProcedureCall id="_1qNe" procedure="regExpandItems"/>
          <ProcedureCall id="_1qNf" procedure="regCollapsetems"/>
        </TestCase>
        <TestCase id="_1qNg" name="memoryBrowserView">
          <comment>memory browser view test
</comment>
          <TestStep id="_1qNh" name="dbgMid5Stop">
            <ProcedureCall id="_1qNi" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qNj" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qNk" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qNl" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qNm" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1qNn"
                         postdelay="1000">
            <text>&amp;p_q</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1qNo" modifiers="16"
                          postdelay="1000"/>
          <ProcedureCall id="_1qNp" postdelay="2000"
                         procedure="memBrowserAddItem"/>
          <ProcedureCall id="_1qNq" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1qNy" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1qNz" name="dbgMid5Stop">
            <ProcedureCall id="_1qN+" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qN-" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qO0" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qO1" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qO2" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1qO3" procedure="dbgCmdErrorCheck"/>
          <ProcedureCall id="_1qO4" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qO6" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1qO7" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1qO8" procedure="bpExpMid5"/>
          <TestStep id="_1raY" name="terminateAndRelaunch">
            <RepeatSequence count="3" id="_1raZ" name="stepLoop">
              <ProcedureCall id="_1raa" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1rab" procedure="dbgViewTerminateRelaunch"/>
              <ProcedureCall id="_1rac" procedure="dbgStopAtMain"/>
            </RepeatSequence>
          </TestStep>
          <ProcedureCall id="_1qOC" procedure="uiDelAllBp"/>
        </TestCase>
      </TestSet>
      <TestSet id="_1qOH" name="library">
        <variable name="debuggee">mthread_lib</variable>
        <DependencyReference id="_1sep" reference="wb.wdbrpcLaunch">
          <variable name="tgtDebuggee">/dfe/mthread_lib</variable>
        </DependencyReference>
        <TestCase id="_1qOT" name="breakpointView">
          <comment>breakpoint view should show the breakpoint successfully added in library correctly
</comment>
          <ProcedureCall id="_1qOU" procedure="uiClickRse"/>
          <ProcedureCall id="_1qOV" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1qOW" procedure="bpExp1"/>
          <ProcedureCall id="_1qOX" procedure="bpExp2"/>
          <ProcedureCall id="_1qOY" procedure="bpExp3"/>
          <ProcedureCall id="_1qOZ" procedure="bpExp4"/>
          <ProcedureCall id="_1qOa" procedure="bpExp5"/>
          <ProcedureCall id="_1qOb" procedure="bpExpSCode"/>
          <ProcedureCall id="_1qOc" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qOd" name="debugView">
          <comment>debug view should show the correct stackframes when different breakpoints are hit even if the stack frame reside in library

</comment>
          <ProcedureCall id="_1qOe" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1qOf" procedure="bpExp1"/>
          <ProcedureCall id="_1qOg" procedure="bpExp2"/>
          <ProcedureCall id="_1qOh" procedure="bpExp3"/>
          <ProcedureCall id="_1qOi" procedure="bpExp4"/>
          <ProcedureCall id="_1qOj" procedure="bpExp5"/>
          <ProcedureCall id="_1qOk" procedure="uiCheckFrame1"/>
          <ProcedureCall id="_1qOl" procedure="uiCheckFrame2"/>
          <ProcedureCall id="_1qOm" procedure="uiCheckFrame3"/>
          <ProcedureCall id="_1qOn" procedure="uiCheckFrame4"/>
          <ProcedureCall id="_1qOo" procedure="uiCheckFrame5"/>
          <ProcedureCall id="_1qOp" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qOq" name="debugViewThread">
          <comment>debug view should show the correct threads stackframes when different breakpoints are hit

</comment>
          <TestStep id="_1qOr" name="dbgSharedCodeStop">
            <ProcedureCall id="_1qOs" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qOt" procedure="bpExpSharedCode"/>
            <ProcedureCall id="_1qOu" procedure="uiCheckSharedCodeFrame"/>
            <ProcedureCall id="_1qOv" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1qOw" name="variableViewLib">
          <comment>variable view should show library stack frame correctly 
</comment>
          <TestStep id="_1qOx" name="dbgMid5Stop">
            <ProcedureCall id="_1qOy" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qOz" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qO+" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qO-" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qP0" postdelay="2000"
                         procedure="uiShowVariableView"/>
          <ProcedureCall id="_1qP1" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/1"
                          event="MOUSE_MPRC" id="_1qP2" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qP3" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/2"
                          event="MOUSE_MPRC" id="_1qP4" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qP5" procedure="frameCheck"/>
        </TestCase>
        <TestCase id="_1qP6" name="variableViewThreads">
          <comment>variable view should show threads stack frame correctly
</comment>
          <TestStep id="_1qP7" name="dbgSharedCodeStop">
            <ProcedureCall id="_1qP8" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qP9" procedure="bpExpSharedCode"/>
            <ProcedureCall id="_1qPA" procedure="uiCheckSharedCodeFrame"/>
            <ProcedureCall id="_1qPB" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qPC" postdelay="2000"
                         procedure="uiClickVariableView"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/1/1"
                          event="MOUSE_MPRC" id="_1qPD" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qPE" procedure="threadFrameCheck0"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/2/1"
                          event="MOUSE_MPRC" id="_1qPF" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qPG" procedure="threadFrameCheck1"/>
        </TestCase>
        <TestCase id="_1qPH" name="expressionViewLib">
          <comment>expression view should show library symbols correctlly
</comment>
          <TestStep id="_1qPI" name="dbgMid5Stop">
            <ProcedureCall id="_1qPJ" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qPK" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qPL" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qPM" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qPN" procedure="uiShowExpressionView"/>
          <ProcedureCall id="_1qPO" local="true" procedure="expAddwatch">
            <variable name="item">q</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qPP" local="true" procedure="expAddwatch">
            <variable name="item">rectest</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qPQ" local="true" procedure="expAddwatch">
            <variable name="item">s1</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qPR" postdelay="1000"
                         procedure="expExpandItems"/>
          <ProcedureCall id="_1qPS" predelay="1000"
                         procedure="expCollapsetems"/>
          <ProcedureCall id="_1qPT" procedure="expDelAll"/>
          <ProcedureCall id="_1qPU" procedure="uiCloseExpressionView"/>
        </TestCase>
        <TestCase id="_1qPV" name="registerView">
          <comment>register view test
</comment>
          <TestStep id="_1qPW" name="dbgMid5Stop">
            <ProcedureCall id="_1qPX" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qPY" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qPZ" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qPa" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qPb" procedure="uiShowRegisterView"/>
          <ProcedureCall id="_1qPc" procedure="regExpandItems"/>
          <CheckStringStep client="$(client)"
                           component="Registers.tree@Value&amp;/0/1"
                           id="_1qPd" regexp="true">
            <text>0x[0-9A-F]+</text>
          </CheckStringStep>
          <CheckStringStep client="$(client)"
                           component="Registers.tree@Value&amp;/0/2"
                           id="_1qPe" regexp="true">
            <text>0x[0-9A-F]+</text>
          </CheckStringStep>
          <ProcedureCall id="_1qPf" procedure="regCollapsetems"/>
        </TestCase>
        <TestCase id="_1qPg" name="memoryBrowserView">
          <comment>memory browser view should show library symbols in memory correctly
</comment>
          <TestStep id="_1qPh" name="dbgMid5Stop">
            <ProcedureCall id="_1qPi" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qPj" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qPk" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qPl" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qPm" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1qPn"
                         postdelay="1000" single="false">
            <text>&amp;p_q</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1qPo" modifiers="16"
                          postdelay="1000"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1qPp"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1qPq"/>
          <ProcedureCall id="_1qPr" postdelay="2000"
                         procedure="memBrowserAddItem"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1qPs"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1qPt"/>
          <ProcedureCall id="_1qPu" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1qPv" name="stepReturn">
          <comment>run-control step return test for library functions

</comment>
          <ProcedureCall id="_1qPw" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1qPx" procedure="bpExpMid5"/>
          <RepeatSequence count="5" id="_1qPy" name="stepLoop">
            <ProcedureCall id="_1qPz" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qP+" procedure="stepReturn"/>
          </RepeatSequence>
          <ProcedureCall id="_1qP-" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qQ0" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1qQ1" name="dbgMid5Stop">
            <ProcedureCall id="_1qQ2" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qQ3" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qQ4" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qQ5" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qQ6" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1qQ7" procedure="dbgCmdErrorCheck"/>
          <ProcedureCall id="_1qQ8" procedure="uiCloseDbgShell"/>
          <ProcedureCall id="_1qQ9" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1qQA" procedure="fileCloseAll"/>
        </TestCase>
        <TestCase id="_1qQB" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1qQC" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1qQD" procedure="bpExpMid5"/>
          <TestStep id="_1raT" name="terminateAndRelaunch">
            <RepeatSequence count="3" id="_1raU" name="stepLoop">
              <ProcedureCall id="_1raV" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1raW" procedure="dbgViewTerminateRelaunch"/>
              <ProcedureCall id="_1raX" procedure="dbgStopAtMain"/>
            </RepeatSequence>
          </TestStep>
          <ProcedureCall id="_1qQH" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1qQI" procedure="fileCloseAll"/>
        </TestCase>
      </TestSet>
      <TestSet id="_1qQM" name="mprocess">
        <variable name="debuggee">mprocess_lib</variable>
        <DependencyReference id="_1seq" reference="wb.wdbrpcLaunch">
          <variable name="tgtDebuggee">/dfe/mprocess_lib</variable>
        </DependencyReference>
        <TestCase id="_1qQS" name="debugSymbolBrowser">
          <comment>debug symbol browser should list symbols in shared library and child processes correctly
</comment>
          <ProcedureCall id="_1qQT" procedure="symbolSharedCode"/>
          <ProcedureCall id="_1qQU" procedure="symbolMidStack"/>
        </TestCase>
        <TestCase id="_1qQV" name="breakpointView">
          <comment>breakpoint view should show the breakpoint successfully added in library correctly
</comment>
          <ProcedureCall id="_1qQW" procedure="uiClickRse"/>
          <ProcedureCall id="_1qQX" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1qQY" procedure="bpExp1"/>
          <ProcedureCall id="_1qQZ" procedure="bpExp2"/>
          <ProcedureCall id="_1qQa" procedure="bpExp3"/>
          <ProcedureCall id="_1qQb" procedure="bpExp4"/>
          <ProcedureCall id="_1qQc" procedure="bpExp5"/>
          <ProcedureCall id="_1qQd" procedure="bpExpSCode"/>
          <ProcedureCall id="_1qQe" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qQf" name="debugView">
          <comment>debug view should show the correct stackframes when different breakpoints are hit even if the stack frame reside in library

</comment>
          <ProcedureCall id="_1qQg" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1qQh" procedure="bpExp1"/>
          <ProcedureCall id="_1qQi" procedure="bpExp2"/>
          <ProcedureCall id="_1qQj" procedure="bpExp3"/>
          <ProcedureCall id="_1qQk" procedure="bpExp4"/>
          <ProcedureCall id="_1qQl" procedure="bpExp5"/>
          <ProcedureCall id="_1qQm" procedure="uiCheckFrame1"/>
          <ProcedureCall id="_1qQn" procedure="uiCheckFrame2"/>
          <ProcedureCall id="_1qQo" procedure="uiCheckFrame3"/>
          <ProcedureCall id="_1qQp" procedure="uiCheckFrame4"/>
          <ProcedureCall id="_1qQq" procedure="uiCheckFrame5"/>
          <ProcedureCall id="_1qQr" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qQs" name="debugViewSubProcesses">
          <comment>debug view should show the correct sub processes stackframes when different breakpoints are hit

</comment>
          <TestStep id="_1qQt" name="dbgSubProcessesStop">
            <ProcedureCall id="_1qQu" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qQv" procedure="bpExpSharedCode"/>
            <ProcedureCall id="_1qQw" procedure="uiCheckSubProcessFrame"/>
            <ProcedureCall id="_1qQx" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1qQy" name="variableViewLib">
          <comment>variable view should show library stack frame correctly 
</comment>
          <TestStep id="_1qQz" name="dbgMid5Stop">
            <ProcedureCall id="_1qQ+" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qQ-" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qR0" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qR1" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qR2" postdelay="2000"
                         procedure="uiClickVariableView"/>
          <ProcedureCall id="_1qR3" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/1"
                          event="MOUSE_MPRC" id="_1qR4" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qR5" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/2"
                          event="MOUSE_MPRC" id="_1qR6" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qR7" procedure="frameCheck"/>
        </TestCase>
        <TestCase id="_1qR8" name="variableViewSubProcesses">
          <comment>variable view should show threads stack frame correctly
</comment>
          <TestStep id="_1qR9" name="dbgSubProcessesStop">
            <ProcedureCall id="_1qRA" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qRB" procedure="bpExpSharedCode"/>
            <ProcedureCall id="_1qRC" procedure="uiCheckSubProcessFrame"/>
            <ProcedureCall id="_1qRD" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qRE" postdelay="2000"
                         procedure="uiClickVariableView"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/1/0/1"
                          event="MOUSE_MPRC" id="_1qRF" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qRG" procedure="threadFrameCheck0"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/2/0/1"
                          event="MOUSE_MPRC" id="_1qRH" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1qRI" procedure="threadFrameCheck1"/>
        </TestCase>
        <TestCase id="_1qRJ" name="expressionViewLib">
          <comment>expression view should show library symbols correctlly
</comment>
          <TestStep id="_1qRK" name="dbgMid5Stop">
            <ProcedureCall id="_1qRL" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qRM" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qRN" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qRO" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qRP" procedure="uiShowExpressionView"/>
          <ProcedureCall id="_1qRQ" local="true" procedure="expAddwatch">
            <variable name="item">q</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qRR" local="true" procedure="expAddwatch">
            <variable name="item">rectest</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qRS" local="true" procedure="expAddwatch">
            <variable name="item">s1</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qRT" postdelay="1000"
                         procedure="expExpandItems"/>
          <ProcedureCall id="_1qRU" predelay="1000"
                         procedure="expCollapsetems"/>
          <ProcedureCall id="_1qRV" procedure="expDelAll"/>
          <ProcedureCall id="_1qRW" procedure="uiCloseExpressionView"/>
        </TestCase>
        <TestCase id="_1qRX" name="registerView">
          <comment>register view test
</comment>
          <TestStep id="_1qRY" name="dbgMid5Stop">
            <ProcedureCall id="_1qRZ" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qRa" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qRb" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qRc" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qRd" procedure="uiShowRegisterView"/>
          <ProcedureCall id="_1qRe" procedure="regExpandItems"/>
          <CheckStringStep client="$(client)"
                           component="Registers.tree@Value&amp;/0/1"
                           id="_1qRf" regexp="true">
            <text>0x[0-9A-F]+</text>
          </CheckStringStep>
          <CheckStringStep client="$(client)"
                           component="Registers.tree@Value&amp;/0/2"
                           id="_1qRg" regexp="true">
            <text>0x[0-9A-F]+</text>
          </CheckStringStep>
          <ProcedureCall id="_1qRh" procedure="regCollapsetems"/>
        </TestCase>
        <TestCase id="_1qRi" name="memoryBrowserView">
          <comment>memory browser view should show library symbols in memory correctly
</comment>
          <TestStep id="_1qRj" name="dbgMid5Stop">
            <ProcedureCall id="_1qRk" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qRl" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qRm" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qRn" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qRo" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1qRp"
                         postdelay="1000" single="false">
            <text>&amp;p_q</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1qRq" modifiers="16"
                          postdelay="1000"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1qRr"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1qRs"/>
          <ProcedureCall id="_1qRt" postdelay="2000"
                         procedure="memBrowserAddItem"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1qRu"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1qRv"/>
          <ProcedureCall id="_1qRw" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1qRx" name="stepReturn">
          <comment>run-control step return test for library functions

</comment>
          <ProcedureCall id="_1qRy" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1qRz" procedure="bpExpMid5"/>
          <RepeatSequence count="5" id="_1qR+" name="stepLoop">
            <ProcedureCall id="_1qR-" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qS0" procedure="stepReturn"/>
          </RepeatSequence>
          <ProcedureCall id="_1qS1" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1qS2" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1qS3" name="dbgMid5Stop">
            <ProcedureCall id="_1qS4" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1qS5" procedure="bpExpMid5"/>
            <ProcedureCall id="_1qS6" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1qS7" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1qS8" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1qS9" procedure="dbgCmdErrorCheck"/>
          <ProcedureCall id="_1qSA" procedure="uiCloseDbgShell"/>
          <ProcedureCall id="_1qSB" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1qSC" procedure="fileCloseAll"/>
        </TestCase>
        <TestCase id="_1qSD" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1qSE" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1qSF" procedure="bpExpMid5"/>
          <TestStep id="_1raS" name="terminateAndRelaunch">
            <RepeatSequence count="3" id="_1qSG" name="stepLoop">
              <ProcedureCall id="_1qSH" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1qSI" procedure="dbgViewTerminateRelaunch"/>
              <ProcedureCall id="_1raR" procedure="dbgStopAtMain"/>
            </RepeatSequence>
          </TestStep>
          <ProcedureCall id="_1qSJ" predelay="2000" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1qSK" procedure="fileCloseAll"/>
        </TestCase>
      </TestSet>
    </TestSet>
    <TestSet id="_1rQa" name="wdbproxyUdp">
      <comment>launch kinds of debuggee from UI, check if 
1, it launched successfully
2, it stopped at main</comment>
      <TestSet id="_1rQb" name="penguin">
        <DependencyReference id="_1rQc"
                             reference="wb.penguinLaunchWdbproxyUdp"/>
        <TestCase id="_1rQd" name="breakpointView">
          <comment>breakpoint view should show the breakpoint successfully added in C++ debuggee
</comment>
          <TestStep id="_1rQe" name="bpMove">
            <ProcedureCall id="_1rQf" procedure="uiClickRse"/>
            <ProcedureCall id="_1rQg" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rQh" procedure="bpExpAdd">
              <variable name="expBp">BALL::Move</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rQi"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
          </TestStep>
          <ProcedureCall id="_1rQj" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rQk" name="debugView">
          <comment>debug view should show the correct stackframes for penguin

</comment>
          <TestStep id="_1rQl" name="bpMove">
            <ProcedureCall id="_1rQm" procedure="uiClickRse"/>
            <ProcedureCall id="_1rQn" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rQo" postdelay="1000" procedure="bpExpAdd">
              <variable name="expBp">BALL::Move</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rQp"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
          </TestStep>
          <TestStep id="_1rQq" name="dbgMove">
            <RepeatSequence count="4" id="_1rQr">
              <WhileSequence id="_1rQs" test="1">
                <TryStep id="_1rQt">
                  <MouseEventStep clicks="1" client="$(client)"
                                  component="Debug.tree&amp;/0/0/0"
                                  event="MOUSE_MPRC" id="_1rQu" modifiers="16"
                                  postdelay="2000"/>
                  <MouseEventStep clicks="1" client="$(client)"
                                  component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                                  event="MOUSE_MPRC" id="_1rQv" modifiers="16"
                                  postdelay="2000"/>
                  <ProcedureCall id="_1rQw"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CatchSequence exception="TestException" id="_1rQx"
                                 maxerror="0" name="ignore"/>
                </TryStep>
                <TryStep id="_1rQy">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1rQz" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1rQ+"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1rQ-"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1rR0"
                                 maxerror="0" name="ignore"/>
                </TryStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rR1" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
              </WhileSequence>
            </RepeatSequence>
          </TestStep>
          <ProcedureCall id="_1rR2" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rR3" name="memoryBrowserView">
          <comment>memory browser view should show the changing memory value 
</comment>
          <TestStep id="_1rR4" name="dbgPenguinContinueOnBreak">
            <ProcedureCall id="_1rR5" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1rR6" name="computeLine">
              <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
srcfsDir = os.path.join(rootfsDir,'usr','src','debug')
penguinFile = os.path.join(srcfsDir,'penguin-0.1','b_main.cpp')

rc.setLocal('penguinFile',penguinFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1rR7" postdelay="1000"
                           procedure="bpLineContinueOnBreakAdd">
              <variable name="debuggeeFile">$(penguinFile)</variable>
              <variable name="debuggeeLineNum">31</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rR8"
                             regexp="true">
              <text>b_main[.]cpp:31.*</text>
            </CheckStringStep>
          </TestStep>
          <ProcedureCall id="_1rR9" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1rRA"
                         postdelay="1000" single="false">
            <text>&amp;grid.data</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1rRB" modifiers="16"
                          postdelay="1000"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1rRC"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1rRD"/>
          <TryStep id="_1rRE">
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0"
                            event="MOUSE_MPRC" id="_1rRF" modifiers="16"
                            postdelay="2000"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                            event="MOUSE_MPRC" id="_1rRG" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1rRH" procedure="qfs.swt.tree.expandNode">
              <variable name="id">Debug.tree&amp;/0/0/0</variable>
              <variable name="node">0</variable>
              <variable name="separator">&amp;</variable>
            </ProcedureCall>
            <CatchSequence exception="TestException" id="_1rRI" maxerror="0"
                           name="ignore"/>
          </TryStep>
          <ProcedureCall id="_1rRJ" predelay="15000" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rRK" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1rRL" name="stepReturn">
          <comment>run-control step return test for C++ functions

</comment>
          <TestStep id="_1rRM" name="bpMove">
            <ProcedureCall id="_1rRN" procedure="uiClickRse"/>
            <ProcedureCall id="_1rRO" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rRP" postdelay="1000" procedure="bpExpAdd">
              <variable name="expBp">BALL::Move</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rRQ"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
          </TestStep>
          <TestStep id="_1rRR" name="stepReturn">
            <RepeatSequence count="4" id="_1rRS">
              <WhileSequence id="_1rRT" name="stopAtMove" postdelay="1000"
                             test="1">
                <TryStep id="_1rRU">
                  <SelectionEventStep client="$(client)"
                                      component="menu-org.eclipse.ui.run"
                                      event="SELECTION" id="_1rRV"
                                      postdelay="1000"/>
                  <SelectionEventStep client="$(client)"
                                      component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.Resume"
                                      event="SELECTION" id="_1rRW"/>
                  <CatchSequence exception="TestException" id="_1rRX"
                                 maxerror="0" name="ignore"/>
                </TryStep>
                <TryStep id="_1rRY">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1rRZ" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1rRa"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1rRb"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1rRc"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </WhileSequence>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rRd"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
              <WhileSequence id="_1rRe" name="stepReturn" postdelay="1000"
                             test="1">
                <TryStep id="_1rRf">
                  <SelectionEventStep client="$(client)"
                                      component="menu-org.eclipse.ui.run"
                                      event="SELECTION" id="_1rRg"
                                      postdelay="1000"/>
                  <SelectionEventStep client="$(client)"
                                      component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                                      event="SELECTION" id="_1rRh"/>
                  <CatchSequence exception="TestException" id="_1rRi"
                                 maxerror="0" name="ignore"/>
                </TryStep>
                <TryStep id="_1rRj">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1rRk" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1rRl"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1rRm"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1rRn"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </WhileSequence>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rRo"
                               regexp="true">
                <text>main.*</text>
              </CheckStringStep>
            </RepeatSequence>
          </TestStep>
          <ProcedureCall id="_1rRp" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rRq" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1rRr" procedure="uiClickBreakpointView"/>
          <TestStep id="_1rRs" name="bpMove">
            <ProcedureCall id="_1rRt" procedure="uiClickRse"/>
            <ProcedureCall id="_1rRu" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rRv" postdelay="1000" procedure="bpExpAdd">
              <variable name="expBp">BALL::Move</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rRw"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
          </TestStep>
          <RepeatSequence count="3" id="_1rRx" name="terminateRelaunch">
            <WhileSequence id="_1rRy" name="stopAtMove" postdelay="1000"
                           test="1">
              <TryStep id="_1rRz">
                <SelectionEventStep client="$(client)"
                                    component="menu-org.eclipse.ui.run"
                                    event="SELECTION" id="_1rR+"
                                    postdelay="1000"/>
                <SelectionEventStep client="$(client)"
                                    component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.Resume"
                                    event="SELECTION" id="_1rR-"/>
                <CatchSequence exception="TestException" id="_1rS0"
                               maxerror="0" name="ignore"/>
              </TryStep>
              <TryStep id="_1rS1">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rS2" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1rS3"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1rS4"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1rS5"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rS6"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
            <WhileSequence id="_1rS7" name="terminateAndRelaunch"
                           postdelay="1000" test="1">
              <TryStep id="_1rS8">
                <ProcedureCall id="_1rS9"
                               procedure="dbgViewTerminateRelaunch"/>
                <CatchSequence exception="TestException" id="_1rSA"
                               maxerror="0" name="ignore"/>
              </TryStep>
              <TryStep id="_1rSB">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1rSC" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1rSD"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1rSE"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1rSF"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rSG"
                             regexp="true">
              <text>main.*</text>
            </CheckStringStep>
          </RepeatSequence>
          <ProcedureCall id="_1rSH" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rSI" procedure="fileCloseAll"/>
        </TestCase>
        <TestCase id="_1rSJ" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1rSK" name="bpMove">
            <ProcedureCall id="_1rSL" procedure="uiClickRse"/>
            <ProcedureCall id="_1rSM" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rSN" postdelay="1000" procedure="bpExpAdd">
              <variable name="expBp">BALL::Move</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1rSO"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
          </TestStep>
          <ProcedureCall id="_1rSP" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1rSQ" procedure="dbgCmdErrorCheck"/>
          <ProcedureCall id="_1rSR" procedure="uiCloseDbgShell"/>
          <ProcedureCall id="_1rSS" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rST" procedure="fileCloseAll"/>
        </TestCase>
        <TestSet id="_1rSU" name="debugCmdShell">
          <DependencyReference id="_1rSV"
                               reference="wb.penguinDebugCmdShellWdbproxyUdp"/>
          <TestCase id="_1rSW" name="cmdUntil">
            <comment>Debug Command Shell "command" test
1,until
2,enter


</comment>
            <ProcedureCall id="_1rSX" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1rSY" name="untilMove">
              <ProcedureCall id="_1rSZ" postdelay="2000"
                             procedure="cmdUntil"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rSa">
                <text>main() - b_main.cpp:31</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1rSb" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1rSc" name="cmdNext">
            <comment>Debug Command Shell "command" test
1,next
2,enter
3,n

</comment>
            <ProcedureCall id="_1rSd" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1rSe" name="untilMove">
              <ProcedureCall id="_1rSf" postdelay="2000"
                             procedure="cmdUntil"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rSg">
                <text>main() - b_main.cpp:31</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1rSh" postdelay="2000" procedure="cmdNext"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rSi">
              <text>main() - b_main.cpp:30</text>
            </CheckStringStep>
            <KeyEventStep client="$(client)"
                          component="Debug_Command_Shell.canvas"
                          event="KEY_PTR" id="_1rSj" keychar="13" keycode="10"
                          modifiers="0" postdelay="2000"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rSk">
              <text>main() - b_main.cpp:31</text>
            </CheckStringStep>
            <ProcedureCall id="_1rSl" postdelay="2000" procedure="cmdN"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rSm">
              <text>main() - b_main.cpp:30</text>
            </CheckStringStep>
            <ProcedureCall id="_1rSn" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1rSo" name="cmdStep">
            <comment>Debug Command Shell "command" test
1,step
2,enter
3,s

</comment>
            <ProcedureCall id="_1rSp" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1rSq" name="untilMove">
              <ProcedureCall id="_1rSr" postdelay="2000"
                             procedure="cmdUntil"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rSs">
                <text>main() - b_main.cpp:31</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1rSt" postdelay="1000" procedure="cmdStep"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rSu"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
            <KeyEventStep client="$(client)"
                          component="Debug_Command_Shell.canvas"
                          event="KEY_PTR" id="_1rSv" keychar="13" keycode="10"
                          modifiers="0" postdelay="1000"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rSw"
                             regexp="true">
              <text>POINT.*</text>
            </CheckStringStep>
            <ProcedureCall id="_1rSx" postdelay="1000" procedure="cmdS"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rSy"
                             regexp="true">
              <text>POINT.*</text>
            </CheckStringStep>
            <ProcedureCall id="_1rSz" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1rS+" name="cmdFinish">
            <comment>Debug Command Shell "command" test
1,Finish
2,enter

</comment>
            <ProcedureCall id="_1rS-" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1rT0" name="untilMove">
              <ProcedureCall id="_1rT1" postdelay="5000"
                             procedure="cmdUntil174"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1rT2">
                <text>POINT() - b_main.cpp:174</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1rT3" postdelay="2000" procedure="cmdFinish"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rT4">
              <text>BALL() - b_main.cpp:106</text>
            </CheckStringStep>
            <KeyEventStep client="$(client)"
                          component="Debug_Command_Shell.canvas"
                          event="KEY_PTR" id="_1rT5" keychar="13" keycode="10"
                          modifiers="0" postdelay="2000"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rT6">
              <text>SOFT() - b_soft.h:10</text>
            </CheckStringStep>
            <ProcedureCall id="_1rT7" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1rT8" name="cmdBreak">
            <comment>Debug Command Shell "break" test


</comment>
            <ProcedureCall id="_1rT9" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1rTA" name="breakLine" postdelay="2000">
              <ProcedureCall id="_1rTB" procedure="cmdBreakLine"/>
            </TestStep>
            <ProcedureCall id="_1rTC" postdelay="2000"
                           procedure="uiClickBreakpointView"/>
            <TryStep id="_1rTD">
              <CheckStringStep client="$(client)"
                               component="WorkbenchWindow.tree2&amp;/0"
                               id="_1rTE" regexp="true">
                <text>b_main.cpp:174.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1rTF"
                             maxerror="0"/>
            </TryStep>
            <ProcedureCall id="_1rTG" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1rTH" name="cmdContinue">
            <comment>Debug Command Shell "continue" test


</comment>
            <ProcedureCall id="_1rTI" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1rTJ" name="breakLine" postdelay="2000">
              <ProcedureCall id="_1rTK" procedure="cmdBreakLine"/>
            </TestStep>
            <ProcedureCall id="_1rTL" postdelay="2000"
                           procedure="uiClickBreakpointView"/>
            <TryStep id="_1rTM">
              <CheckStringStep client="$(client)"
                               component="WorkbenchWindow.tree2&amp;/0"
                               id="_1rTN" regexp="true">
                <text>b_main.cpp:174.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1rTO"
                             maxerror="0"/>
            </TryStep>
            <TestStep id="_1rTP" name="continue" postdelay="3000">
              <ProcedureCall id="_1rTQ" procedure="cmdContinue"/>
            </TestStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rTR">
              <text>POINT() - b_main.cpp:174</text>
            </CheckStringStep>
            <ProcedureCall id="_1rTS" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1rTT" name="cmdScript">
            <comment>Debug Command Shell gdb script test

</comment>
            <ProcedureCall id="_1rTU" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <ProcedureCall id="_1rTV" procedure="cmdScriptPenguin"/>
            <ProcedureCall id="_1rTW" postdelay="2000"
                           procedure="uiClickBreakpointView"/>
            <TryStep id="_1rTX">
              <CheckStringStep client="$(client)"
                               component="WorkbenchWindow.tree2&amp;/0"
                               id="_1rTY" regexp="true">
                <text>b_main.cpp:126.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1rTZ"
                             maxerror="0"/>
            </TryStep>
            <TestStep id="_1rTa" name="continue" postdelay="3000">
              <ProcedureCall id="_1rTb" procedure="cmdContinue"/>
            </TestStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1rTc"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
            <ProcedureCall id="_1rTd" procedure="dbgCmdSave"/>
          </TestCase>
        </TestSet>
      </TestSet>
      <TestSet disabled="true" id="_1rTe" name="umaLaunchMulti-ThreadsApp"
               reportname="umaMultithreadsApp">
        <DependencyReference id="_1rTf"
                             reference="wb.multiThreadsLaunchWdbrpc"/>
        <TestCase id="_1rTg" name="debugSymbolBrowser">
          <comment>debug symbol browser view test
</comment>
          <ProcedureCall id="_1rTh" procedure="symbolSharedCode"/>
          <ProcedureCall id="_1rTi" procedure="symbolMidStack"/>
        </TestCase>
        <TestCase id="_1rTj" name="sourceView">
          <comment>source view test

</comment>
          <ProcedureCall id="_1rTk" procedure="srcOpenSymbol"/>
          <ProcedureCall id="_1rTl" procedure="fileCloseAll"/>
        </TestCase>
        <TestCase id="_1rTm" name="breakpointView">
          <comment>breakpoint view test
</comment>
          <ProcedureCall id="_1rTn" procedure="uiClickRse"/>
          <ProcedureCall id="_1rTo" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rTp" procedure="bpExp1"/>
          <ProcedureCall id="_1rTq" procedure="bpExp2"/>
          <ProcedureCall id="_1rTr" procedure="bpExp3"/>
          <ProcedureCall id="_1rTs" procedure="bpExp4"/>
          <ProcedureCall id="_1rTt" procedure="bpExp5"/>
          <ProcedureCall id="_1rTu" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rTv" name="debugView">
          <comment>debug view test
debug view should show the correct stackframes when different breakpoints are hit

</comment>
          <ProcedureCall id="_1rTw" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rTx" procedure="bpExp1"/>
          <ProcedureCall id="_1rTy" procedure="bpExp2"/>
          <ProcedureCall id="_1rTz" procedure="bpExp3"/>
          <ProcedureCall id="_1rT+" procedure="bpExp4"/>
          <ProcedureCall id="_1rT-" procedure="bpExp5"/>
          <ProcedureCall id="_1rU0" procedure="uiCheckFrame1"/>
          <ProcedureCall id="_1rU1" procedure="uiCheckFrame2"/>
          <ProcedureCall id="_1rU2" procedure="uiCheckFrame3"/>
          <ProcedureCall id="_1rU3" procedure="uiCheckFrame4"/>
          <ProcedureCall id="_1rU4" procedure="uiCheckFrame5"/>
          <ProcedureCall id="_1rU5" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rU6" name="variableView">
          <comment>variable view test
</comment>
          <TestStep id="_1rU7" name="dbgMid5Stop">
            <ProcedureCall id="_1rU8" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rU9" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rUA" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rUB" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rUC" procedure="uiShowVariableView"/>
          <ProcedureCall id="_1rUD" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/1"
                          event="MOUSE_MPRC" id="_1rUE" modifiers="16"/>
          <ProcedureCall id="_1rUF" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/2"
                          event="MOUSE_MPRC" id="_1rUG" modifiers="16"/>
          <ProcedureCall id="_1rUH" procedure="frameCheck"/>
        </TestCase>
        <TestCase id="_1rUI" name="expressionView">
          <comment>expression view test
</comment>
          <TestStep id="_1rUJ" name="dbgMid5Stop">
            <ProcedureCall id="_1rUK" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rUL" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rUM" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rUN" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rUO" procedure="uiShowExpressionView"/>
          <ProcedureCall id="_1rUP" local="true" procedure="expAddwatch">
            <variable name="item">q</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rUQ" local="true" procedure="expAddwatch">
            <variable name="item">rectest</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rUR" local="true" procedure="expAddwatch">
            <variable name="item">s1</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rUS" postdelay="1000"
                         procedure="expExpandItems"/>
          <ProcedureCall id="_1rUT" predelay="1000"
                         procedure="expCollapsetems"/>
          <ProcedureCall id="_1rUU" procedure="expDelAll"/>
          <ProcedureCall id="_1rUV" procedure="uiCloseExpressionView"/>
        </TestCase>
        <TestCase id="_1rUW" name="registerView">
          <comment>register view test
</comment>
          <TestStep id="_1rUX" name="dbgMid5Stop">
            <ProcedureCall id="_1rUY" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rUZ" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rUa" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rUb" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rUc" procedure="uiShowRegisterView"/>
          <ProcedureCall id="_1rUd" procedure="regExpandItems"/>
          <ProcedureCall id="_1rUe" procedure="regCollapsetems"/>
        </TestCase>
        <TestCase id="_1rUf" name="memoryBrowserView">
          <comment>memory browser view test
</comment>
          <TestStep id="_1rUg" name="dbgMid5Stop">
            <ProcedureCall id="_1rUh" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rUi" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rUj" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rUk" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rUl" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1rUm"
                         postdelay="1000">
            <text>&amp;p_q</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1rUn" modifiers="16"
                          postdelay="1000"/>
          <ProcedureCall id="_1rUo" postdelay="2000"
                         procedure="memBrowserAddItem"/>
          <ProcedureCall id="_1rUp" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1rUq" name="stepReturn">
          <comment>run-control stepping test

</comment>
          <ProcedureCall id="_1rUr" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rUs" procedure="bpExpMid5"/>
          <RepeatSequence count="5" id="_1rUt" name="stepLoop">
            <ProcedureCall id="_1rUu" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rUv" procedure="stepReturn"/>
          </RepeatSequence>
          <ProcedureCall id="_1rUw" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rUx" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1rUy" name="dbgMid5Stop">
            <ProcedureCall id="_1rUz" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rU+" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rU-" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rV0" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rV1" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1rV2" procedure="dbgCmdErrorCheck"/>
          <ProcedureCall id="_1rV3" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rV4" procedure="fileCloseAll"/>
        </TestCase>
        <TestCase id="_1rV5" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1rV6" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rV7" procedure="bpExpMid5"/>
          <RepeatSequence count="3" id="_1rV8" name="stepLoop">
            <ProcedureCall id="_1rV9" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rVA" procedure="dbgViewTerminateRelaunch"/>
          </RepeatSequence>
          <ProcedureCall id="_1rVB" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rVC" procedure="fileCloseAll"/>
        </TestCase>
      </TestSet>
      <TestSet disabled="true" id="_1rVD" name="umaLaunchMulti-ThreadsLib"
               reportname="umaMultithreadsAppWithLib">
        <DependencyReference id="_1rVE"
                             reference="wb.multiThreadsLibLaunchWdbrpc"/>
        <TestCase id="_1rVF" name="debugSymbolBrowser">
          <comment>debug symbol browser should list symbols in shared library correctly
</comment>
          <ProcedureCall id="_1rVG" procedure="symbolSharedCode"/>
          <ProcedureCall id="_1rVH" procedure="symbolMidStack"/>
        </TestCase>
        <TestCase id="_1rVI" name="sourceView">
          <comment>source view should show the library source code correctly

</comment>
          <ProcedureCall id="_1rVJ" procedure="srcOpenSymbol"/>
          <ProcedureCall id="_1rVK" procedure="fileCloseAll"/>
        </TestCase>
        <TestCase id="_1rVL" name="breakpointView">
          <comment>breakpoint view should show the breakpoint successfully added in library correctly
</comment>
          <ProcedureCall id="_1rVM" procedure="uiClickRse"/>
          <ProcedureCall id="_1rVN" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rVO" procedure="bpExp1"/>
          <ProcedureCall id="_1rVP" procedure="bpExp2"/>
          <ProcedureCall id="_1rVQ" procedure="bpExp3"/>
          <ProcedureCall id="_1rVR" procedure="bpExp4"/>
          <ProcedureCall id="_1rVS" procedure="bpExp5"/>
          <ProcedureCall id="_1rVT" procedure="bpExpSCode"/>
          <ProcedureCall id="_1rVU" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rVV" name="debugView">
          <comment>debug view should show the correct stackframes when different breakpoints are hit even if the stack frame reside in library

</comment>
          <ProcedureCall id="_1rVW" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1rVX" procedure="bpExp1"/>
          <ProcedureCall id="_1rVY" procedure="bpExp2"/>
          <ProcedureCall id="_1rVZ" procedure="bpExp3"/>
          <ProcedureCall id="_1rVa" procedure="bpExp4"/>
          <ProcedureCall id="_1rVb" procedure="bpExp5"/>
          <ProcedureCall id="_1rVc" procedure="uiCheckFrame1"/>
          <ProcedureCall id="_1rVd" procedure="uiCheckFrame2"/>
          <ProcedureCall id="_1rVe" procedure="uiCheckFrame3"/>
          <ProcedureCall id="_1rVf" procedure="uiCheckFrame4"/>
          <ProcedureCall id="_1rVg" procedure="uiCheckFrame5"/>
          <ProcedureCall id="_1rVh" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rVi" name="debugViewThread">
          <comment>debug view should show the correct threads stackframes when different breakpoints are hit

</comment>
          <TestStep id="_1rVj" name="dbgSharedCodeStop">
            <ProcedureCall id="_1rVk" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rVl" procedure="bpExpSharedCode"/>
            <ProcedureCall id="_1rVm" procedure="uiCheckSharedCodeFrame"/>
            <ProcedureCall id="_1rVn" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1rVo" name="variableViewLib">
          <comment>variable view should show library stack frame correctly 
</comment>
          <TestStep id="_1rVp" name="dbgMid5Stop">
            <ProcedureCall id="_1rVq" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rVr" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rVs" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rVt" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rVu" procedure="uiShowVariableView"/>
          <ProcedureCall id="_1rVv" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/1"
                          event="MOUSE_MPRC" id="_1rVw" modifiers="16"/>
          <ProcedureCall id="_1rVx" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/2"
                          event="MOUSE_MPRC" id="_1rVy" modifiers="16"/>
          <ProcedureCall id="_1rVz" procedure="frameCheck"/>
        </TestCase>
        <TestCase id="_1rV+" name="variableViewThreads">
          <comment>variable view should show threads stack frame correctly
</comment>
          <TestStep id="_1rV-" name="dbgSharedCodeStop">
            <ProcedureCall id="_1rW0" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rW1" procedure="bpExpSharedCode"/>
            <ProcedureCall id="_1rW2" procedure="uiCheckSharedCodeFrame"/>
            <ProcedureCall id="_1rW3" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rW4" procedure="uiShowVariableView"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/1/1"
                          event="MOUSE_MPRC" id="_1rW5" modifiers="16"/>
          <ProcedureCall id="_1rW6" procedure="threadFrameCheck0"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/2/1"
                          event="MOUSE_MPRC" id="_1rW7" modifiers="16"/>
          <ProcedureCall id="_1rW8" procedure="threadFrameCheck1"/>
        </TestCase>
        <TestCase id="_1rW9" name="expressionViewLib">
          <comment>expression view should show library symbols correctlly
</comment>
          <TestStep id="_1rWA" name="dbgMid5Stop">
            <ProcedureCall id="_1rWB" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rWC" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rWD" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rWE" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rWF" procedure="uiShowExpressionView"/>
          <ProcedureCall id="_1rWG" local="true" procedure="expAddwatch">
            <variable name="item">q</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rWH" local="true" procedure="expAddwatch">
            <variable name="item">rectest</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rWI" local="true" procedure="expAddwatch">
            <variable name="item">s1</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rWJ" postdelay="1000"
                         procedure="expExpandItems"/>
          <ProcedureCall id="_1rWK" predelay="1000"
                         procedure="expCollapsetems"/>
          <ProcedureCall id="_1rWL" procedure="expDelAll"/>
          <ProcedureCall id="_1rWM" procedure="uiCloseExpressionView"/>
        </TestCase>
        <TestCase id="_1rWN" name="registerView">
          <comment>register view test
</comment>
          <TestStep id="_1rWO" name="dbgMid5Stop">
            <ProcedureCall id="_1rWP" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rWQ" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rWR" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rWS" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rWT" procedure="uiShowRegisterView"/>
          <ProcedureCall id="_1rWU" procedure="regExpandItems"/>
          <CheckStringStep client="$(client)"
                           component="Registers.tree@Value&amp;/0/1"
                           id="_1rWV" regexp="true">
            <text>0x[0-9A-F]+</text>
          </CheckStringStep>
          <CheckStringStep client="$(client)"
                           component="Registers.tree@Value&amp;/0/2"
                           id="_1rWW" regexp="true">
            <text>0x[0-9A-F]+</text>
          </CheckStringStep>
          <ProcedureCall id="_1rWX" procedure="regCollapsetems"/>
        </TestCase>
        <TestCase id="_1rWY" name="memoryBrowserView">
          <comment>memory browser view should show library symbols in memory correctly
</comment>
          <TestStep id="_1rWZ" name="dbgMid5Stop">
            <ProcedureCall id="_1rWa" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rWb" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rWc" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rWd" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rWe" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1rWf"
                         postdelay="1000" single="false">
            <text>&amp;p_q</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1rWg" modifiers="16"
                          postdelay="1000"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1rWh"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1rWi"/>
          <ProcedureCall id="_1rWj" postdelay="2000"
                         procedure="memBrowserAddItem"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1rWk"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1rWl"/>
          <ProcedureCall id="_1rWm" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1rWn" name="stepReturn">
          <comment>run-control step return test for library functions

</comment>
          <ProcedureCall id="_1rWo" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1rWp" procedure="bpExpMid5"/>
          <RepeatSequence count="5" id="_1rWq" name="stepLoop">
            <ProcedureCall id="_1rWr" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rWs" procedure="stepReturn"/>
          </RepeatSequence>
          <ProcedureCall id="_1rWt" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rWu" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1rWv" name="dbgMid5Stop">
            <ProcedureCall id="_1rWw" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rWx" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rWy" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rWz" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rW+" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1rW-" procedure="dbgCmdErrorCheck"/>
          <ProcedureCall id="_1rX0" procedure="uiCloseDbgShell"/>
          <ProcedureCall id="_1rX1" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rX2" procedure="fileCloseAll"/>
        </TestCase>
        <TestCase id="_1rX3" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1rX4" procedure="uiShowBreakpointView"/>
          <ProcedureCall id="_1rX5" procedure="bpExpMid5"/>
          <RepeatSequence count="3" id="_1rX6" name="stepLoop">
            <ProcedureCall id="_1rX7" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rX8" procedure="dbgViewTerminateRelaunch"/>
          </RepeatSequence>
          <ProcedureCall id="_1rX9" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rXA" procedure="fileCloseAll"/>
        </TestCase>
      </TestSet>
      <TestSet disabled="true" id="_1rXB" name="umaLaunchMulti-ProcessesLib"
               reportname="umaMultiProcessesAppWithLib">
        <DependencyReference id="_1rXC"
                             reference="wb.multiProcessLibLaunchWdbrpc"/>
        <TestCase id="_1rXD" name="debugSymbolBrowser">
          <comment>debug symbol browser should list symbols in shared library and child processes correctly
</comment>
          <ProcedureCall id="_1rXE" procedure="symbolSharedCode"/>
          <ProcedureCall id="_1rXF" procedure="symbolMidStack"/>
        </TestCase>
        <TestCase id="_1rXG" name="breakpointView">
          <comment>breakpoint view should show the breakpoint successfully added in library correctly
</comment>
          <ProcedureCall id="_1rXH" procedure="uiClickRse"/>
          <ProcedureCall id="_1rXI" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rXJ" procedure="bpExp1"/>
          <ProcedureCall id="_1rXK" procedure="bpExp2"/>
          <ProcedureCall id="_1rXL" procedure="bpExp3"/>
          <ProcedureCall id="_1rXM" procedure="bpExp4"/>
          <ProcedureCall id="_1rXN" procedure="bpExp5"/>
          <ProcedureCall id="_1rXO" procedure="bpExpSCode"/>
          <ProcedureCall id="_1rXP" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rXQ" name="debugView">
          <comment>debug view should show the correct stackframes when different breakpoints are hit even if the stack frame reside in library

</comment>
          <ProcedureCall id="_1rXR" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rXS" procedure="bpExp1"/>
          <ProcedureCall id="_1rXT" procedure="bpExp2"/>
          <ProcedureCall id="_1rXU" procedure="bpExp3"/>
          <ProcedureCall id="_1rXV" procedure="bpExp4"/>
          <ProcedureCall id="_1rXW" procedure="bpExp5"/>
          <ProcedureCall id="_1rXX" procedure="uiCheckFrame1"/>
          <ProcedureCall id="_1rXY" procedure="uiCheckFrame2"/>
          <ProcedureCall id="_1rXZ" procedure="uiCheckFrame3"/>
          <ProcedureCall id="_1rXa" procedure="uiCheckFrame4"/>
          <ProcedureCall id="_1rXb" procedure="uiCheckFrame5"/>
          <ProcedureCall id="_1rXc" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rXd" name="debugViewSubProcesses">
          <comment>debug view should show the correct sub processes stackframes when different breakpoints are hit

</comment>
          <TestStep id="_1rXe" name="dbgSubProcessesStop">
            <ProcedureCall id="_1rXf" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rXg" procedure="bpExpSharedCode"/>
            <ProcedureCall id="_1rXh" procedure="uiCheckSubProcessFrame"/>
            <ProcedureCall id="_1rXi" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1rXj" name="variableViewLib">
          <comment>variable view should show library stack frame correctly 
</comment>
          <TestStep id="_1rXk" name="dbgMid5Stop">
            <ProcedureCall id="_1rXl" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rXm" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rXn" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rXo" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rXp" procedure="uiShowVariableView"/>
          <ProcedureCall id="_1rXq" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/1"
                          event="MOUSE_MPRC" id="_1rXr" modifiers="16"/>
          <ProcedureCall id="_1rXs" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/2"
                          event="MOUSE_MPRC" id="_1rXt" modifiers="16"/>
          <ProcedureCall id="_1rXu" procedure="frameCheck"/>
        </TestCase>
        <TestCase id="_1rXv" name="variableViewSubProcesses">
          <comment>variable view should show threads stack frame correctly
</comment>
          <TestStep id="_1rXw" name="dbgSubProcessesStop">
            <ProcedureCall id="_1rXx" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rXy" procedure="bpExpSharedCode"/>
            <ProcedureCall id="_1rXz" procedure="uiCheckSubProcessFrame"/>
            <ProcedureCall id="_1rX+" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rX-" procedure="uiShowVariableView"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/1/0/1"
                          event="MOUSE_MPRC" id="_1rY0" modifiers="16"/>
          <ProcedureCall id="_1rY1" procedure="threadFrameCheck0"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/2/0/1"
                          event="MOUSE_MPRC" id="_1rY2" modifiers="16"/>
          <ProcedureCall id="_1rY3" procedure="threadFrameCheck1"/>
        </TestCase>
        <TestCase id="_1rY4" name="expressionViewLib">
          <comment>expression view should show library symbols correctlly
</comment>
          <TestStep id="_1rY5" name="dbgMid5Stop">
            <ProcedureCall id="_1rY6" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rY7" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rY8" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rY9" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rYA" procedure="uiShowExpressionView"/>
          <ProcedureCall id="_1rYB" local="true" procedure="expAddwatch">
            <variable name="item">q</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rYC" local="true" procedure="expAddwatch">
            <variable name="item">rectest</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rYD" local="true" procedure="expAddwatch">
            <variable name="item">s1</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rYE" postdelay="1000"
                         procedure="expExpandItems"/>
          <ProcedureCall id="_1rYF" predelay="1000"
                         procedure="expCollapsetems"/>
          <ProcedureCall id="_1rYG" procedure="expDelAll"/>
          <ProcedureCall id="_1rYH" procedure="uiCloseExpressionView"/>
        </TestCase>
        <TestCase id="_1rYI" name="registerView">
          <comment>register view test
</comment>
          <TestStep id="_1rYJ" name="dbgMid5Stop">
            <ProcedureCall id="_1rYK" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rYL" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rYM" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rYN" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rYO" procedure="uiShowRegisterView"/>
          <ProcedureCall id="_1rYP" procedure="regExpandItems"/>
          <CheckStringStep client="$(client)"
                           component="Registers.tree@Value&amp;/0/1"
                           id="_1rYQ" regexp="true">
            <text>0x[0-9A-F]+</text>
          </CheckStringStep>
          <CheckStringStep client="$(client)"
                           component="Registers.tree@Value&amp;/0/2"
                           id="_1rYR" regexp="true">
            <text>0x[0-9A-F]+</text>
          </CheckStringStep>
          <ProcedureCall id="_1rYS" procedure="regCollapsetems"/>
        </TestCase>
        <TestCase id="_1rYT" name="memoryBrowserView">
          <comment>memory browser view should show library symbols in memory correctly
</comment>
          <TestStep id="_1rYU" name="dbgMid5Stop">
            <ProcedureCall id="_1rYV" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rYW" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rYX" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rYY" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rYZ" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1rYa"
                         postdelay="1000" single="false">
            <text>&amp;p_q</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1rYb" modifiers="16"
                          postdelay="1000"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1rYc"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1rYd"/>
          <ProcedureCall id="_1rYe" postdelay="2000"
                         procedure="memBrowserAddItem"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas" id="_1rYf"/>
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Memory_Browser2.canvas2" id="_1rYg"/>
          <ProcedureCall id="_1rYh" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1rYi" name="stepReturn">
          <comment>run-control step return test for library functions

</comment>
          <ProcedureCall id="_1rYj" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rYk" procedure="bpExpMid5"/>
          <RepeatSequence count="5" id="_1rYl" name="stepLoop">
            <ProcedureCall id="_1rYm" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rYn" procedure="stepReturn"/>
          </RepeatSequence>
          <ProcedureCall id="_1rYo" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1rYp" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1rYq" name="dbgMid5Stop">
            <ProcedureCall id="_1rYr" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1rYs" procedure="bpExpMid5"/>
            <ProcedureCall id="_1rYt" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rYu" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1rYv" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1rYw" procedure="dbgCmdErrorCheck"/>
          <ProcedureCall id="_1rYx" procedure="uiCloseDbgShell"/>
          <ProcedureCall id="_1rYy" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rYz" procedure="fileCloseAll"/>
        </TestCase>
        <TestCase id="_1rY+" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1rY-" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1rZ0" procedure="bpExpMid5"/>
          <RepeatSequence count="3" id="_1rZ1" name="stepLoop">
            <ProcedureCall id="_1rZ2" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1rZ3" procedure="dbgViewTerminateRelaunch"/>
          </RepeatSequence>
          <ProcedureCall id="_1rZ4" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1rZ5" procedure="fileCloseAll"/>
        </TestCase>
      </TestSet>
    </TestSet>
  </TestSet>
  <TestSet id="_1tJq" name="sim">
    <variable name="vxSimFlag">false</variable>
    <variable name="conName">""</variable>
    <comment>launch kinds of debuggee from UI, check if 
1, it launched successfully
2, it stopped at main</comment>
    <TestSet id="_1trS" name="mthread">
      <variable name="rtpVxe">""</variable>
      <variable name="vxeFile">""</variable>
      <TestSet id="_1tPM" name="kernel">
        <variable name="debuggee">mthread_stack</variable>
        <DependencyReference id="_1tPN" reference="wb.vxWdbPipeLaunchKernel">
          <variable name="entry">mthread</variable>
        </DependencyReference>
        <TestCase id="_1tPO" name="resumeAndSuspend">
          <comment>run control test :
resume
suspend
</comment>
          <TestStep id="_1tPP" name="resumeFromBeginning">
            <TryStep id="_1tPQ" name="resume">
              <ProcedureCall id="_1tPR" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tPS" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tPT" postdelay="3000"
                             procedure="dbgViewResume"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tPV"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1tPW"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1tPX"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1tPY"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tPZ"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tPa" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tPy" name="suspendOnlyOneThread">
            <comment>suspend only the 3rd thread</comment>
            <TryStep id="_1tQ9" name="suspendOneThread">
              <ProcedureCall id="_1tQA" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tQB" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/2</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tQC" postdelay="3000"
                             procedure="dbgViewSuspend"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tQE"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1tQF"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1tQG"
                               regexp="true">
                <text>.*Stopped - User Request.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1tQH"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tQI"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tQJ" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tPm" name="resumeOnlyOneThread">
            <comment>resume only the 2nd thread</comment>
            <TryStep id="_1tPn" name="resume">
              <ProcedureCall id="_1tgQ" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tgR" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/2</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tPq" postdelay="3000"
                             procedure="dbgViewResume"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tgS"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1tgT"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1tgU"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1tgV"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tPw"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tPx" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
        </TestCase>
        <TestCase id="_1tQK" name="lineBreakpoint">
          <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
          <ProcedureCall id="_1tQL" procedure="uiClickRse"/>
          <ProcedureCall id="_1tQM" procedure="uiClickBreakpointView"/>
          <TestStep id="_1tQN" name="lineBreakpoint">
            <comment>Breakpoint view : line breakpoint add and delete</comment>
            <ProcedureCall id="_1tQO" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1tQP" name="computeFile">
              <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mthread_stack.c')

rc.setLocal('mthreadStackFile',mthreadStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1tQQ" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">224</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tQR">
              <text>mthread_stack.c:224 (*Planted*, Restricted Scope)</text>
            </CheckStringStep>
            <TestStep id="_1tQS" name="resumeFromBeginning">
              <TryStep id="_1tQT" name="resume">
                <ProcedureCall id="_1tQV" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tQW" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tQX" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tQY"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tQZ">
                  <text>mthread() - mthread_stack.c:224</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tQa"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tQb"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1tQc" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">228</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/1" id="_1tQd">
              <text>mthread_stack.c:228 (*Planted*, Restricted Scope)</text>
            </CheckStringStep>
            <TestStep id="_1tQe" name="resume">
              <TryStep id="_1tQf" name="resume">
                <ProcedureCall id="_1tQh" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tQi" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tQj" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tQk"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tQl">
                  <text>mthread() - mthread_stack.c:228</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tQm"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tQn"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1tRJ" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1tRK" name="temporyBreakpoint">
          <comment>tempory breakpoint

</comment>
          <TestStep id="_1tRL" name="temporyBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tRM" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1tRN" name="computeFile">
              <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mthread_stack.c')

rc.setLocal('mthreadStackFile',mthreadStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1tRO" postdelay="3000"
                           procedure="bpLineTempory">
              <variable name="debuggeeFile">$(mthreadStackFile)</variable>
              <variable name="debuggeeLineNum">224</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tRP"
                             regexp="true">
              <text>.*Temporary.*</text>
            </CheckStringStep>
            <TestStep id="_1tRQ" name="resumeFromBeginning">
              <TryStep id="_1tRR" name="resume">
                <ProcedureCall id="_1tRS" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tRT" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tRU" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tRV"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tRW">
                  <text>mthread() - mthread_stack.c:224</text>
                </CheckStringStep>
                <TryStep id="_1tRX" name="waitForTemoryBreakpointDelete">
                  <ComponentWaiter absence="true" client="$(client)"
                                   component="Breakpoints.tree&amp;/0"
                                   id="_1tRY" timeout="5000"/>
                  <CatchSequence exception="IndexFoundException" id="_1tRZ"
                                 maxerror="2" name="error"/>
                </TryStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tRa"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tRb"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1tRc" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tRd" name="conditionBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <TestStep id="_1tRe" name="conditionBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tRf" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1tRg" name="computeFile">
              <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mthread_stack.c')

rc.setLocal('mthreadStackSrc',mthreadStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1tRh" postdelay="1000"
                           procedure="bpLineCondition">
              <variable name="debuggeeFile">$(mthreadStackSrc)</variable>
              <variable name="debuggeeLineNum">317</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tRi"
                             regexp="true">
              <text>.*Condition=t==1.*</text>
            </CheckStringStep>
            <TestStep id="_1tRj" name="resume">
              <TryStep id="_1tRk" name="resume">
                <ProcedureCall id="_1tRl" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tRm" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tRn" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tRo"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tRp">
                  <text>mthread() - mthread_stack.c:317</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1tRq"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <TryStep id="_1tRr">
                  <ComponentWaiter client="$(client)"
                                   component="Debug.tree&amp;/0/0/2"
                                   id="_1tRs" timeout="2000"/>
                  <CatchSequence exception="IndexFoundException" id="_1tRt"
                                 maxerror="2"/>
                  <CatchSequence exception="IndexNotFoundException" id="_1tRu"
                                 maxerror="0" name="success"/>
                </TryStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tRv"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tRw"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1tRx" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tRy" name="skipBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <TestStep id="_1tRz" name="skipBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tR+" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1uYi" name="computeFile">
              <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackSrc',mthreadStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1tS0" postdelay="1000" procedure="bpLineSkip">
              <variable name="debuggeeFile">$(midStackSrc)</variable>
              <variable name="debuggeeLineNum">72</variable>
              <variable name="skipNum">3</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tS1"
                             regexp="true">
              <text>.*Planted.*Skip Count=3.*</text>
            </CheckStringStep>
            <TestStep id="_1tS2" name="resume">
              <TryStep id="_1tS3" name="resume">
                <ProcedureCall id="_1tS4" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tS5" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tS6" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tS7"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <ProcedureCall id="_1tS8" procedure="uiClickVariableView"/>
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2@Value@/i"
                                 id="_1tS9">
                  <text>3 </text>
                </CheckStringStep>
                <ProcedureCall id="_1tSA" procedure="uiClickExpressionView"/>
                <ProcedureCall id="_1tSB" procedure="expAddwatch">
                  <variable name="item">i</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Expressions.tree@Value@/i"
                                 id="_1tSC">
                  <text>3 </text>
                </CheckStringStep>
                <ProcedureCall id="_1tSD"
                               procedure="qfs.run-log.screenshots.logScreenshot">
                  <variable name="inSUT">false</variable>
                  <variable name="title"/>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1tSE" procedure="expDelAll"/>
                <ProcedureCall id="_1tSF" procedure="uiCloseExpressionView"/>
                <CatchSequence exception="IndexNotFoundException" id="_1tSG"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tSH"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1tSI" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tSJ" name="expressionBreakpoint">
          <comment>expression breakpoint test 
debug view 
breakpoint view
</comment>
          <ProcedureCall id="_1tSK" procedure="uiClickRse"/>
          <ProcedureCall id="_1tSL" procedure="uiClickBreakpointView"/>
          <TestStep id="_1tSM" name="expressionBreakpoint">
            <comment>Breakpoint view : expression breakpoint add and delete</comment>
            <ProcedureCall id="_1tSN" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tSO" procedure="bpExp1"/>
            <ProcedureCall id="_1tSP" procedure="bpExp2"/>
            <ProcedureCall id="_1tSQ" procedure="bpExp3"/>
            <ProcedureCall id="_1tSR" procedure="bpExp4"/>
            <ProcedureCall id="_1tSS" procedure="bpExp5"/>
            <ProcedureCall id="_1tST" procedure="uiCheckFrame1"/>
            <ProcedureCall id="_1tSU" procedure="uiCheckFrame2"/>
            <ProcedureCall id="_1tSV" procedure="uiCheckFrame3"/>
            <ProcedureCall id="_1tSW" procedure="uiCheckFrame4"/>
            <ProcedureCall id="_1tSX" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tSY" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1tSZ" name="prologBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <ProcedureCall id="_1tgh" procedure="uiClickRse"/>
          <ProcedureCall id="_1tgi" procedure="uiClickBreakpointView"/>
          <TestStep id="_1tSa" name="prologBreakpoint1">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tSb" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tSc" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack1</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tSd"
                             predelay="1000" regexp="true">
              <text>mid_stack1.*</text>
            </CheckStringStep>
            <TestStep id="_1tSe" name="resume">
              <TryStep id="_1tSf" name="resume">
                <ProcedureCall id="_1tSg" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tSh" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tSi" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tSj"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tSk">
                  <text>mid_stack1() - mid_stack.c:40</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tSl"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tSm"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1tSn" name="prologBreakpoint2">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tSo" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tSp" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack2</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/1" id="_1tSq"
                             predelay="1000" regexp="true">
              <text>mid_stack2.*</text>
            </CheckStringStep>
            <TestStep id="_1tSr" name="resume">
              <TryStep id="_1tSs" name="resume">
                <ProcedureCall id="_1tSt" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tSu" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tSv" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tSw"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tSx">
                  <text>mid_stack2() - mid_stack.c:109</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tSy"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tSz"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1tS+" name="prologBreakpoint3">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tS-" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tT0" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack3</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/2" id="_1tT1"
                             predelay="1000" regexp="true">
              <text>mid_stack3.*</text>
            </CheckStringStep>
            <TestStep id="_1tT2" name="resume">
              <TryStep id="_1tT3" name="resume">
                <ProcedureCall id="_1tT4" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tT5" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tT6" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tT7"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tT8">
                  <text>mid_stack3() - mid_stack.c:355</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tT9"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tTA"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1tTB" name="prologBreakpoint4">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tTC" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tTD" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack4</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/3" id="_1tTE"
                             predelay="1000" regexp="true">
              <text>mid_stack4.*</text>
            </CheckStringStep>
            <TestStep id="_1tTF" name="resume">
              <TryStep id="_1tTG" name="resume">
                <ProcedureCall id="_1tTH" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tTI" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tTJ" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tTK"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tTL">
                  <text>mid_stack4() - mid_stack.c:522</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tTM"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tTN"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1tTO" name="prologBreakpoint5">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tTP" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tTQ" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack5</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/4" id="_1tTR"
                             predelay="1000" regexp="true">
              <text>mid_stack5.*</text>
            </CheckStringStep>
            <TestStep id="_1tTS" name="resume">
              <TryStep id="_1tTT" name="resume">
                <ProcedureCall id="_1tTU" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tTV" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tTW" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tTX"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tTY">
                  <text>mid_stack5() - mid_stack.c:690</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tTZ"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tTa"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1tTb" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1vUG" name="dpTask">
          <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
          <ProcedureCall id="_1vUH" procedure="uiClickRse"/>
          <ProcedureCall id="_1vUI" procedure="uiClickBreakpointView"/>
          <TestStep id="_1vUJ" name="dynamicPrintf">
            <comment>Breakpoint view : line breakpoint add and delete</comment>
            <ProcedureCall id="_1vUK" procedure="uiClickEditorView"/>
            <ProcedureCall id="_1vUL" local="true" procedure="dpLineAdd"
                           retvarname="dpSuccess">
              <variable name="lineNum">48</variable>
              <variable name="variable">toto</variable>
              <variable name="dp_condition">false</variable>
              <variable name="dp_skip">false</variable>
            </ProcedureCall>
            <IfSequence id="_1vUM" test="$(dpSuccess)">
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1vUN"
                               regexp="true">
                <text>printf.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1vUO"
                               regexp="true">
                <text>.*toto=.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1vUP"
                               regexp="true">
                <text>.*mthread_stack.c :48.*Planted.*</text>
              </CheckStringStep>
            </IfSequence>
            <TestStep id="_1vUQ" name="resumeFromBeginning">
              <TryStep id="_1vUR" name="resume">
                <ProcedureCall id="_1vUS" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1vUT" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1vUU" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CatchSequence exception="IndexNotFoundException" id="_1vUV"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1vUW"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1vUX" name="checkConsole">
              <ProcedureCall id="_1vUY" procedure="uiClickTgtConsole"/>
              <ProcedureCall id="_1vUZ" postdelay="15000"
                             procedure="tgtConsoleClean"/>
              <ProcedureCall id="_1vUa" procedure="tgtConsoleCheck">
                <variable name="str">"toto="</variable>
              </ProcedureCall>
              <IfSequence id="_1vUb" test="$(success)">
                <ProcedureCall id="_1vUc" procedure="qfs.run-log.logMessage">
                  <variable name="message">Dynamic Printf ---- SUCCESSED!</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1vUd"
                               procedure="qfs.run-log.screenshots.logScreenshot">
                  <variable name="inSUT">false</variable>
                  <variable name="title">DPrintf SUCCESSED!!</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ElseSequence id="_1vUe">
                  <ProcedureCall id="_1vUf" procedure="qfs.run-log.logError">
                    <variable name="message">Dynamic Printf ------ FAILED</variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </ElseSequence>
              </IfSequence>
              <ProcedureCall id="_1vUg" procedure="tgtConsoleSave"/>
            </TestStep>
            <ProcedureCall id="_1vUh" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1tTc" name="stepReturn">
          <comment>run-control step return

</comment>
          <ProcedureCall id="_1tTd" procedure="uiClickRse"/>
          <ProcedureCall id="_1tTe" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1tTf" procedure="bpExpMid5"/>
          <TestStep id="_1tTg" name="resumeFromBeginning">
            <TryStep id="_1tTh" name="resume">
              <ProcedureCall id="_1tTj" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tTk" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1tTl" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tTm"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tTn"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tTo"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tTp" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tTq" name="stepReturnFrom5">
            <TryStep id="_1tTr" name="stepReturn">
              <ProcedureCall id="_1tTs" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tTt" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tTu" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tTv"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tTw"
                               regexp="true">
                <text>mid_stack4.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tTx"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tTy" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tTz" name="stepReturnFrom4">
            <TryStep id="_1tT+" name="stepReturn">
              <ProcedureCall id="_1tT-" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tU0" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tU1" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tU2"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tU3"
                               regexp="true">
                <text>mid_stack3.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tU4"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tU5" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tU6" name="stepReturnFrom3">
            <TryStep id="_1tU7" name="stepReturn">
              <ProcedureCall id="_1tU8" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tU9" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tUA" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tUB"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tUC"
                               regexp="true">
                <text>mid_stack2.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tUD"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tUE" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tUF" name="stepReturnFrom2">
            <TryStep id="_1tUG" name="stepReturn">
              <ProcedureCall id="_1tUH" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tUI" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tUJ" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tUK"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tUL"
                               regexp="true">
                <text>mid_stack1.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tUM"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tUN" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tUO" name="stepReturnFrom1">
            <TryStep id="_1tUP" name="stepReturn">
              <ProcedureCall id="_1tUQ" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tUR" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tUS" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tUT"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tUU"
                               regexp="true">
                <text>mthread.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tUV"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tUW" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1tUX" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tUY" name="stepOver">
          <comment>run-control : step over
</comment>
          <ProcedureCall id="_1tUZ" procedure="uiClickRse"/>
          <ProcedureCall id="_1tUa" procedure="uiClickBreakpointView"/>
          <ServerScriptStep id="_1tUb" name="computeFile">
            <code>import os

midStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
          </ServerScriptStep>
          <ProcedureCall id="_1tUc" postdelay="2000" procedure="bpLineAdd">
            <variable name="debuggeeFile">$(midStackFile)</variable>
            <variable name="debuggeeLineNum">680</variable>
          </ProcedureCall>
          <TestStep id="_1tUd" name="stopAtLine680">
            <TryStep id="_1tUe" name="resume">
              <ProcedureCall id="_1tUf" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tUg" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tUh" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1tUi" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tUj"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tUk">
                <text>mid_stack4() - mid_stack.c:680</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tUl"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tUm" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tUn" name="stepOver">
            <TryStep id="_1tUo" name="stepOver">
              <ProcedureCall id="_1tUp" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tUq" postdelay="3000"
                             procedure="dbgViewStepOver"/>
              <ProcedureCall id="_1tUr" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tUs"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tUt">
                <text>mid_stack4() - mid_stack.c:682</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tUu"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tUv" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep disabled="true" id="_1tUw" name="stepOver">
            <TryStep id="_1tUx" name="stepOver">
              <ProcedureCall id="_1tUy" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tUz" postdelay="3000"
                             procedure="dbgViewStepOver"/>
              <ProcedureCall id="_1tU+" postdelay="10000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tU-"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tV0">
                <text>mid_stack3() - mid_stack.c:514</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tV1"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tV2" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1tV3" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tV4" name="stepInto">
          <comment>run-control : step into
</comment>
          <ProcedureCall id="_1tV5" procedure="uiClickRse"/>
          <ProcedureCall id="_1tV6" procedure="uiClickBreakpointView"/>
          <ServerScriptStep id="_1th9" name="computeFile">
            <code>import os

midStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
          </ServerScriptStep>
          <ProcedureCall id="_1tV8" postdelay="2000" procedure="bpLineAdd">
            <variable name="debuggeeFile">$(midStackFile)</variable>
            <variable name="debuggeeLineNum">680</variable>
          </ProcedureCall>
          <TestStep id="_1tV9" name="stopAtLine680">
            <TryStep id="_1tVA" name="resume">
              <ProcedureCall id="_1tVB" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tVC" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1tVD" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tVE"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tVF">
                <text>mid_stack4() - mid_stack.c:680</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tVG"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tVH" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tVI" name="stepInto">
            <TryStep id="_1tVJ" name="stepInto">
              <ProcedureCall id="_1tVK" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tVL" postdelay="3000"
                             procedure="dbgViewStepInto"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tVM"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tVN"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tVO"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tVP" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tVQ" name="stepInto">
            <TryStep id="_1tVR" name="stepInto">
              <ProcedureCall id="_1tVS" postdelay="3000"
                             procedure="dbgViewStepInto"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tVT"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tVU"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/1" id="_1tVV"
                               regexp="true">
                <text>mid_stack4.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tVW"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tVX" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1tVY" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tVZ" name="scopeBreakpoint">
          <comment>scope breakpoint test
</comment>
          <TestStep id="_1tVa" name="resumeFromBeginning">
            <TryStep id="_1tVb" name="resume">
              <ProcedureCall id="_1tVc" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tVd" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tVe" postdelay="3000"
                             procedure="dbgViewResume"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tVg"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1tVh"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1tVi"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1tVj"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tVk"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tVl" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1tVm" procedure="uiClickRse"/>
          <ProcedureCall id="_1tVn" procedure="uiClickBreakpointView"/>
          <TestStep id="_1tVo" name="bpExpSharedCode">
            <TryStep id="_1tVp" name="add sharedCode" postdelay="3000">
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run"
                                  event="SELECTION" id="_1tVq"/>
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run-dfeBreakpoints"
                                  event="SELECTION" id="_1tVr"/>
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                                  event="SELECTION" id="_1tVs"/>
              <ComponentWaiter client="$(client)"
                               component="ExpressionBreakpointDialog"
                               id="_1tVt"/>
              <SelectionEventStep client="$(client)"
                                  component="ExpressionBreakpointDialog.tabbed@General"
                                  event="SELECTION" id="_1tVu"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="tabGeneral2.text" event="MOUSE_MPRC"
                              id="_1tVv" modifiers="16" x="19" y="5"/>
              <TextInputStep clear="true" client="$(client)"
                             component="tabGeneral2.text" id="_1tVw"
                             postdelay="1000">
                <text>sharedCode</text>
              </TextInputStep>
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonOk11" event="MOUSE_MPRC"
                              id="_1tVx" modifiers="16" postdelay="1000"
                              predelay="1000"/>
              <ProcedureCall id="_1tVy" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1tVz"
                               regexp="true">
                <text>sharedCode.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1tV+" maxerror="0"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tV-" name="dbgViewShareCodeStop">
            <WhileSequence id="_1tW0" postdelay="1000" test="1">
              <TryStep id="_1tW1">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1/0"
                                 id="_1tW2" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1tW3"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1tW4"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1tW5"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/0" id="_1tW6"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/1" id="_1tW7"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <WhileSequence id="_1tW8" postdelay="1000" test="2">
              <TryStep id="_1tW9">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2/0"
                                 id="_1tWA" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1tWB"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1tWC"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1tWD"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/2/0" id="_1tWE"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/2/1" id="_1tWF"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <ProcedureCall id="_1tWG" procedure="uiCheckSharedCodeFrame"/>
          </TestStep>
          <TestStep id="_1tWH" name="threadSpecificBreakpoint">
            <comment>thread specific breakpoint</comment>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/1/0"
                            event="MOUSE_MPRC" id="_1tWI" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Breakpoints.tree&amp;/0"
                            event="MOUSE_MPRC" id="_1tWJ" modifiers="4"
                            popup="true" postdelay="1000"/>
            <SelectionEventStep client="$(client)"
                                component="menu-com.windriver.ide.debug.ui.restrictBreakpointScopeAction"
                                event="SELECTION" id="_1tWK"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/1/0"
                            event="MOUSE_MPRC" id="_1tWL" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                            event="MOUSE_MPRC" id="_1tWM" modifiers="16"/>
            <WhileSequence id="_1tWN" postdelay="1000" test="1">
              <TryStep id="_1tWO">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1/0"
                                 id="_1tWP" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1tWQ"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1tWR"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1tWS"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/0" id="_1tWT"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/1" id="_1tWU"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/2/0"
                            event="MOUSE_MPRC" id="_1tWV" modifiers="16"
                            postdelay="1000"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                            event="MOUSE_MPRC" id="_1tWW" modifiers="16"/>
            <TryStep id="_1tWX"
                     name="if the 2nd thread could hit the breakpoint specific for the 1st in 15 seconds">
              <ComponentWaiter client="$(client)"
                               component="Debug.tree&amp;/0/0/2/0"
                               id="_1tWY"/>
              <CatchSequence exception="IndexNotFoundException" id="_1tWZ"
                             maxerror="0" name="success">
                <ProcedureCall id="_1tWa" procedure="qfs.run-log.logMessage">
                  <variable name="message">scope breakpoint success</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1tWb"
                               procedure="qfs.run-log.screenshots.logScreenshot">
                  <variable name="inSUT">false</variable>
                  <variable name="title"/>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
              </CatchSequence>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1tWc" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tWd" name="debugSymbolBrowser">
          <comment>debug symbol browser view test
</comment>
          <ProcedureCall id="_1tgs" procedure="uiClickDebugSymbolBrowser"/>
          <ProcedureCall id="_1vYJ" procedure="symbolVip"/>
          <ProcedureCall id="_1vYM" procedure="symbolSharedCode"/>
          <ProcedureCall id="_1vYL" procedure="symbolCounter"/>
          <ProcedureCall id="_1vjW" procedure="symbolEmpty"/>
          <ProcedureCall id="_1vjU" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1vV8" procedure="uiClickRse"/>
        </TestCase>
        <TestCase id="_1tWg" name="sourceView">
          <comment>source view test

</comment>
          <ProcedureCall id="_1tgu" procedure="uiClickDebugSymbolBrowser"/>
          <ProcedureCall id="_1vYK" procedure="symbolMidStack"/>
          <ProcedureCall id="_1vYU" procedure="uiClickRse"/>
        </TestCase>
        <TestCase id="_1tWi" name="debugView">
          <comment>debug view test
debug view should show the correct stackframes when different breakpoints are hit

</comment>
          <ProcedureCall id="_1tgk" procedure="uiClickRse"/>
          <ProcedureCall id="_1tWj" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1tWk" procedure="bpExp1"/>
          <ProcedureCall id="_1tWl" procedure="bpExp2"/>
          <ProcedureCall id="_1tWm" procedure="bpExp3"/>
          <ProcedureCall id="_1tWn" procedure="bpExp4"/>
          <ProcedureCall id="_1tWo" procedure="bpExp5"/>
          <ProcedureCall id="_1tWp" procedure="uiCheckFrame1"/>
          <ProcedureCall id="_1tWq" procedure="uiCheckFrame2"/>
          <ProcedureCall id="_1tWr" procedure="uiCheckFrame3"/>
          <ProcedureCall id="_1tWs" procedure="uiCheckFrame4"/>
          <ProcedureCall id="_1tWt" procedure="uiCheckFrame5"/>
          <ProcedureCall id="_1tWu" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tWv" name="variableView">
          <comment>variable view test
</comment>
          <TestStep id="_1tWw" name="dbgMid5Stop">
            <ProcedureCall id="_1tWx" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tWy" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tWz" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tW+" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tW-" procedure="uiClickVariableView"/>
          <ProcedureCall id="_1tX0" predelay="1000" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/1"
                          event="MOUSE_MPRC" id="_1tX1" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1tX2" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/2"
                          event="MOUSE_MPRC" id="_1tX3" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1tX4" procedure="frameCheck"/>
        </TestCase>
        <TestCase id="_1tX5" name="expressionView">
          <comment>expression view test
</comment>
          <TestStep id="_1tX6" name="dbgMid5Stop">
            <ProcedureCall id="_1tX7" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tX8" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tX9" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tXA" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tXB" procedure="uiClickExpressionView"/>
          <ProcedureCall id="_1tXC" local="true" procedure="expAddwatch">
            <variable name="item">q</variable>
          </ProcedureCall>
          <ProcedureCall id="_1tXD" local="true" procedure="expAddwatch">
            <variable name="item">rectest</variable>
          </ProcedureCall>
          <ProcedureCall id="_1tXE" local="true" procedure="expAddwatch">
            <variable name="item">s1</variable>
          </ProcedureCall>
          <ProcedureCall id="_1tXF" postdelay="1000"
                         procedure="expExpandItems"/>
          <ProcedureCall id="_1tXG" predelay="1000"
                         procedure="expCollapsetems"/>
          <ProcedureCall id="_1tXH" procedure="expDelAll"/>
          <ProcedureCall id="_1tXI" procedure="uiCloseExpressionView"/>
        </TestCase>
        <TestCase id="_1tXJ" name="registerView">
          <comment>register view test
</comment>
          <TestStep id="_1tXK" name="dbgMid5Stop">
            <ProcedureCall id="_1tXL" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tXM" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tXN" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tXO" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tXP" procedure="uiShowRegisterView"/>
          <ProcedureCall id="_1tXQ" procedure="regExpandItems"/>
          <ProcedureCall id="_1tXR" procedure="regCollapsetems"/>
        </TestCase>
        <TestCase id="_1tXS" name="memoryBrowserView">
          <comment>memory browser view test
</comment>
          <TestStep id="_1tXT" name="dbgMid5Stop">
            <ProcedureCall id="_1tXU" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tXV" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tXW" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tXX" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tXY" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1tXZ"
                         postdelay="1000">
            <text>&amp;p_q</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1tXa" modifiers="16"
                          postdelay="1000"/>
          <ProcedureCall id="_1tXb" postdelay="2000"
                         procedure="memBrowserAddItem"/>
          <ProcedureCall id="_1tXc" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1tXd" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1tXe" name="dbgMid5Stop">
            <ProcedureCall id="_1tXf" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tXg" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tXh" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tXi" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tXj" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1tXk" procedure="dbgCmdErrorCheck"/>
        </TestCase>
        <TestCase id="_1tXn" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1tXo" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1tXp" procedure="bpExpMid5"/>
          <TestStep id="_1tXq" name="terminateAndRelaunch">
            <RepeatSequence count="3" id="_1tXr" name="stepLoop">
              <ProcedureCall id="_1tXs" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1tXt" procedure="dbgViewTerminateRelaunch"/>
              <ProcedureCall id="_1tXu" procedure="dbgStopAtMain"/>
            </RepeatSequence>
          </TestStep>
          <ProcedureCall id="_1tXv" procedure="uiDelAllBp"/>
        </TestCase>
      </TestSet>
      <TestSet id="_1tjp" name="rtp">
        <variable name="debuggee">mthread_stack</variable>
        <DependencyReference id="_1tjq" reference="wb.vxWdbPipeLaunchRtp">
          <variable name="vxeFile">$_(mthreadFile)</variable>
        </DependencyReference>
        <TestCase id="_1tjr" name="resumeAndSuspend">
          <comment>run control test :
resume
suspend
</comment>
          <TestStep id="_1tjs" name="resumeFromBeginning">
            <TryStep id="_1tjt" name="resume">
              <ProcedureCall id="_1tju" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tjv" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tjw" postdelay="3000"
                             procedure="dbgViewResume"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tjx"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1tjy"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1tjz"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1tj+"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tj-"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tk0" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tk1" name="suspendOnlyOneThread">
            <comment>suspend only the 3rd thread</comment>
            <TryStep id="_1tk2" name="suspendOneThread">
              <ProcedureCall id="_1tk3" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tk4" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/2</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tk5" postdelay="3000"
                             procedure="dbgViewSuspend"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tk6"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1tk7"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1tk8"
                               regexp="true">
                <text>.*Stopped - User Request.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1tk9"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tkA"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tkB" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tkC" name="resumeOnlyOneThread">
            <comment>resume only the 2nd thread</comment>
            <TryStep id="_1tkD" name="resume">
              <ProcedureCall id="_1tkE" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tkF" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/2</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tkG" postdelay="3000"
                             procedure="dbgViewResume"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tkH"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1tkI"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1tkJ"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1tkK"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tkL"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tkM" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
        </TestCase>
        <TestCase id="_1tkN" name="lineBreakpoint">
          <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
          <ProcedureCall id="_1tkO" procedure="uiClickRse"/>
          <ProcedureCall id="_1tkP" procedure="uiClickBreakpointView"/>
          <TestStep id="_1tkQ" name="lineBreakpoint">
            <comment>Breakpoint view : line breakpoint add and delete</comment>
            <ProcedureCall id="_1tkR" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tkT" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(rtpMainSrc)</variable>
              <variable name="debuggeeLineNum">224</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tkU">
              <text>mthread_stack.c:224 (*Planted*, Restricted Scope)</text>
            </CheckStringStep>
            <TestStep id="_1tkV" name="resumeFromBeginning">
              <TryStep id="_1tkW" name="resume">
                <ProcedureCall id="_1tkX" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tkY" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tkZ" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tka"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tkb">
                  <text>main() - mthread_stack.c:224</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tkc"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tkd"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1tke" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(rtpMainSrc)</variable>
              <variable name="debuggeeLineNum">228</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/1" id="_1tkf">
              <text>mthread_stack.c:228 (*Planted*, Restricted Scope)</text>
            </CheckStringStep>
            <TestStep id="_1tkg" name="resume">
              <TryStep id="_1tkh" name="resume">
                <ProcedureCall id="_1tki" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tkj" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tkk" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tkl"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tkm">
                  <text>main() - mthread_stack.c:228</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tkn"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tko"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1tkp" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1tkq" name="temporyBreakpoint">
          <comment>tempory breakpoint

</comment>
          <TestStep id="_1tkr" name="temporyBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tks" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tku" postdelay="3000"
                           procedure="bpLineTempory">
              <variable name="debuggeeFile">$(rtpMainSrc)</variable>
              <variable name="debuggeeLineNum">224</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tkv"
                             regexp="true">
              <text>.*Temporary.*</text>
            </CheckStringStep>
            <TestStep id="_1tkw" name="resumeFromBeginning">
              <TryStep id="_1tkx" name="resume">
                <ProcedureCall id="_1tky" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tkz" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tk+" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tk-"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tl0">
                  <text>main() - mthread_stack.c:224</text>
                </CheckStringStep>
                <TryStep id="_1tl1" name="waitForTemoryBreakpointDelete">
                  <ComponentWaiter absence="true" client="$(client)"
                                   component="Breakpoints.tree&amp;/0"
                                   id="_1tl2" timeout="5000"/>
                  <CatchSequence exception="IndexFoundException" id="_1tl3"
                                 maxerror="2" name="error"/>
                </TryStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tl4"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tl5"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1tl6" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tl7" name="conditionBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <TestStep id="_1tl8" name="conditionBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tl9" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tlB" postdelay="1000"
                           procedure="bpLineCondition">
              <variable name="debuggeeFile">$(rtpMainSrc)</variable>
              <variable name="debuggeeLineNum">317</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tlC"
                             regexp="true">
              <text>.*Condition=t==1.*</text>
            </CheckStringStep>
            <TestStep id="_1tlD" name="resume">
              <TryStep id="_1tlE" name="resume">
                <ProcedureCall id="_1tlF" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tlG" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tlH" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tlI"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tlJ">
                  <text>main() - mthread_stack.c:317</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1tlK"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <TryStep id="_1tlL">
                  <ComponentWaiter client="$(client)"
                                   component="Debug.tree&amp;/0/0/2"
                                   id="_1tlM" timeout="2000"/>
                  <CatchSequence exception="IndexFoundException" id="_1tlN"
                                 maxerror="2"/>
                  <CatchSequence exception="IndexNotFoundException" id="_1tlO"
                                 maxerror="0" name="success"/>
                </TryStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tlP"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tlQ"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1tlR" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tlS" name="skipBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <TestStep id="_1tlT" name="skipBreakpoint">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tlU" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tlW" postdelay="1000" procedure="bpLineSkip">
              <variable name="debuggeeFile">$(rtpMidSrc)</variable>
              <variable name="debuggeeLineNum">72</variable>
              <variable name="skipNum">3</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tlX"
                             regexp="true">
              <text>.*Planted.*Skip Count=3.*</text>
            </CheckStringStep>
            <TestStep id="_1tlY" name="resume">
              <TryStep id="_1tlZ" name="resume">
                <ProcedureCall id="_1tla" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tlb" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tlc" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tld"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <ProcedureCall id="_1tle" procedure="uiClickVariableView"/>
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2@Value@/i"
                                 id="_1tlf">
                  <text>3 </text>
                </CheckStringStep>
                <ProcedureCall id="_1tlg" procedure="uiClickExpressionView"/>
                <ProcedureCall id="_1tlh" procedure="expAddwatch">
                  <variable name="item">i</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Expressions.tree@Value@/i"
                                 id="_1tli">
                  <text>3 </text>
                </CheckStringStep>
                <ProcedureCall id="_1tlj"
                               procedure="qfs.run-log.screenshots.logScreenshot">
                  <variable name="inSUT">false</variable>
                  <variable name="title"/>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1tlk" procedure="expDelAll"/>
                <ProcedureCall id="_1tll" procedure="uiCloseExpressionView"/>
                <CatchSequence exception="IndexNotFoundException" id="_1tlm"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tln"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1tlo" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tlp" name="expressionBreakpoint">
          <comment>expression breakpoint test 
debug view 
breakpoint view
</comment>
          <ProcedureCall id="_1tlq" procedure="uiClickRse"/>
          <ProcedureCall id="_1tlr" procedure="uiClickBreakpointView"/>
          <TestStep id="_1tls" name="expressionBreakpoint">
            <comment>Breakpoint view : expression breakpoint add and delete</comment>
            <ProcedureCall id="_1tlt" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tlu" procedure="bpExp1"/>
            <ProcedureCall id="_1tlv" procedure="bpExp2"/>
            <ProcedureCall id="_1tlw" procedure="bpExp3"/>
            <ProcedureCall id="_1tlx" procedure="bpExp4"/>
            <ProcedureCall id="_1tly" procedure="bpExp5"/>
            <ProcedureCall id="_1tlz" procedure="uiCheckFrame1"/>
            <ProcedureCall id="_1tl+" procedure="uiCheckFrame2"/>
            <ProcedureCall id="_1tl-" procedure="uiCheckFrame3"/>
            <ProcedureCall id="_1tm0" procedure="uiCheckFrame4"/>
            <ProcedureCall id="_1tm1" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tm2" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1tm3" name="prologBreakpoint">
          <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
          <ProcedureCall id="_1tm4" procedure="uiClickRse"/>
          <ProcedureCall id="_1tm5" procedure="uiClickBreakpointView"/>
          <TestStep id="_1tm6" name="prologBreakpoint1">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tm7" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tm8" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack1</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/0" id="_1tm9"
                             predelay="1000" regexp="true">
              <text>mid_stack1.*</text>
            </CheckStringStep>
            <TestStep id="_1tmA" name="resume">
              <TryStep id="_1tmB" name="resume">
                <ProcedureCall id="_1tmC" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tmD" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tmE" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tmF"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tmG">
                  <text>mid_stack1() - mid_stack.c:40</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tmH"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tmI"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1tmJ" name="prologBreakpoint2">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tmK" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tmL" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack2</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/1" id="_1tmM"
                             predelay="1000" regexp="true">
              <text>mid_stack2.*</text>
            </CheckStringStep>
            <TestStep id="_1tmN" name="resume">
              <TryStep id="_1tmO" name="resume">
                <ProcedureCall id="_1tmP" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tmQ" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tmR" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tmS"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tmT">
                  <text>mid_stack2() - mid_stack.c:109</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tmU"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tmV"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1tmW" name="prologBreakpoint3">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tmX" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tmY" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack3</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/2" id="_1tmZ"
                             predelay="1000" regexp="true">
              <text>mid_stack3.*</text>
            </CheckStringStep>
            <TestStep id="_1tma" name="resume">
              <TryStep id="_1tmb" name="resume">
                <ProcedureCall id="_1tmc" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tmd" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tme" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tmf"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tmg">
                  <text>mid_stack3() - mid_stack.c:355</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tmh"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tmi"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1tmj" name="prologBreakpoint4">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tmk" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tml" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack4</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/3" id="_1tmm"
                             predelay="1000" regexp="true">
              <text>mid_stack4.*</text>
            </CheckStringStep>
            <TestStep id="_1tmn" name="resume">
              <TryStep id="_1tmo" name="resume">
                <ProcedureCall id="_1tmp" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tmq" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tmr" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tms"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tmt">
                  <text>mid_stack4() - mid_stack.c:522</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tmu"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tmv"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <TestStep id="_1tmw" name="prologBreakpoint5">
            <comment>Breakpoint view : tempory</comment>
            <ProcedureCall id="_1tmx" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tmy" procedure="bpExpProlog">
              <variable name="expressionBp">mid_stack5</variable>
            </ProcedureCall>
            <CheckStringStep client="$(client)"
                             component="Breakpoints.tree&amp;/4" id="_1tmz"
                             predelay="1000" regexp="true">
              <text>mid_stack5.*</text>
            </CheckStringStep>
            <TestStep id="_1tm+" name="resume">
              <TryStep id="_1tm-" name="resume">
                <ProcedureCall id="_1tn0" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tn1" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tn2" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tn3"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tn4">
                  <text>mid_stack5() - mid_stack.c:690</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tn5"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tn6"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestStep>
          <ProcedureCall id="_1tn7" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1vUi" name="dpRTP">
          <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
          <ProcedureCall id="_1vUj" procedure="uiClickRse"/>
          <ProcedureCall id="_1vUk" procedure="uiClickBreakpointView"/>
          <TestStep id="_1vUl" name="dynamicPrintf">
            <comment>Breakpoint view : line breakpoint add and delete</comment>
            <ProcedureCall id="_1vUm" procedure="uiClickEditorView"/>
            <ProcedureCall id="_1vUn" local="true" procedure="dpLineAdd"
                           retvarname="dpSuccess">
              <variable name="lineNum">48</variable>
              <variable name="variable">toto</variable>
              <variable name="dp_condition">false</variable>
              <variable name="dp_skip">false</variable>
            </ProcedureCall>
            <IfSequence id="_1vUo" test="$(dpSuccess)">
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1vUp"
                               regexp="true">
                <text>printf.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1vUq"
                               regexp="true">
                <text>.*toto=.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1vUr"
                               regexp="true">
                <text>.*mthread_stack.c :48.*Planted.*</text>
              </CheckStringStep>
            </IfSequence>
            <TestStep id="_1vUs" name="resumeFromBeginning">
              <TryStep id="_1vUt" name="resume">
                <ProcedureCall id="_1vUu" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1vUv" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1vUw" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CatchSequence exception="IndexNotFoundException" id="_1vUx"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1vUy"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1vUz" name="checkConsole">
              <ProcedureCall id="_1vU+" procedure="uiClickConsole"/>
              <ProcedureCall id="_1vU-" postdelay="15000"
                             procedure="consoleClean"/>
              <ProcedureCall id="_1vV0" local="true" procedure="consoleCheck"
                             retvarname="success">
                <variable name="str">"toto="</variable>
              </ProcedureCall>
              <IfSequence id="_1vV1" test="$(success)">
                <ProcedureCall id="_1vV2" procedure="qfs.run-log.logMessage">
                  <variable name="message">Dynamic Printf ---- SUCCESSED!</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1vV3"
                               procedure="qfs.run-log.screenshots.logScreenshot">
                  <variable name="inSUT">false</variable>
                  <variable name="title">DPrintf SUCCESSED!!</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ElseSequence id="_1vV4">
                  <ProcedureCall id="_1vV5" procedure="qfs.run-log.logError">
                    <variable name="message">Dynamic Printf ------ FAILED</variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </ElseSequence>
              </IfSequence>
              <ProcedureCall id="_1vV6" procedure="consoleSave"/>
            </TestStep>
            <ProcedureCall id="_1vV7" procedure="uiDelAllBp"/>
          </TestStep>
        </TestCase>
        <TestCase id="_1tn8" name="stepReturn">
          <comment>run-control step return

</comment>
          <ProcedureCall id="_1tn9" procedure="uiClickRse"/>
          <ProcedureCall id="_1tnA" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1tnB" procedure="bpExpMid5"/>
          <TestStep id="_1tnC" name="resumeFromBeginning">
            <TryStep id="_1tnD" name="resume">
              <ProcedureCall id="_1tnE" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tnF" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1tnG" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tnH"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tnI"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tnJ"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tnK" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tnL" name="stepReturnFrom5">
            <TryStep id="_1tnM" name="stepReturn">
              <ProcedureCall id="_1tnN" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tnO" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tnP" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tnQ"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tnR"
                               regexp="true">
                <text>mid_stack4.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tnS"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tnT" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tnU" name="stepReturnFrom4">
            <TryStep id="_1tnV" name="stepReturn">
              <ProcedureCall id="_1tnW" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tnX" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tnY" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tnZ"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tna"
                               regexp="true">
                <text>mid_stack3.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tnb"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tnc" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tnd" name="stepReturnFrom3">
            <TryStep id="_1tne" name="stepReturn">
              <ProcedureCall id="_1tnf" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tng" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tnh" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tni"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tnj"
                               regexp="true">
                <text>mid_stack2.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tnk"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tnl" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tnm" name="stepReturnFrom2">
            <TryStep id="_1tnn" name="stepReturn">
              <ProcedureCall id="_1tno" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tnp" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tnq" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tnr"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tns"
                               regexp="true">
                <text>mid_stack1.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tnt"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tnu" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tnv" name="stepReturnFrom1">
            <TryStep id="_1tnw" name="stepReturn">
              <ProcedureCall id="_1tnx" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tny" postdelay="3000"
                             procedure="dbgViewStepReturn"/>
              <ProcedureCall id="_1tnz" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tn+"
                               regexp="true">
                <text>.*Stopped - Function Finished.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tn-"
                               regexp="true">
                <text>main.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1to0"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1to1" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1to2" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1to3" name="stepOver">
          <comment>run-control : step over
</comment>
          <ProcedureCall id="_1to4" procedure="uiClickRse"/>
          <ProcedureCall id="_1to5" procedure="uiClickBreakpointView"/>
          <ServerScriptStep id="_1to6" name="computeFile">
            <code>import os

midStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
          </ServerScriptStep>
          <ProcedureCall id="_1to7" postdelay="2000" procedure="bpLineAdd">
            <variable name="debuggeeFile">$(rtpMidSrc)</variable>
            <variable name="debuggeeLineNum">680</variable>
          </ProcedureCall>
          <TestStep id="_1to8" name="stopAtLine680">
            <TryStep id="_1to9" name="resume">
              <ProcedureCall id="_1toA" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1toB" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1toC" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1toD" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1toE"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1toF">
                <text>mid_stack4() - mid_stack.c:680</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1toG"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1toH" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1toI" name="stepOver">
            <TryStep id="_1toJ" name="stepOver">
              <ProcedureCall id="_1toK" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1toL" postdelay="3000"
                             procedure="dbgViewStepOver"/>
              <ProcedureCall id="_1toM" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1toN"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1toO">
                <text>mid_stack4() - mid_stack.c:682</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1toP"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1toQ" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1toR" name="stepOver">
            <TryStep id="_1toS" name="stepOver">
              <ProcedureCall id="_1toT" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1toU" postdelay="3000"
                             procedure="dbgViewStepOver"/>
              <ProcedureCall id="_1toV" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1toW"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1toX">
                <text>mid_stack3() - mid_stack.c:512</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1toY"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1toZ" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1toa" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tob" name="stepInto">
          <comment>run-control : step into
</comment>
          <ProcedureCall id="_1toc" procedure="uiClickRse"/>
          <ProcedureCall id="_1tod" procedure="uiClickBreakpointView"/>
          <ServerScriptStep id="_1toe" name="computeFile">
            <code>import os

midStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
          </ServerScriptStep>
          <ProcedureCall id="_1tof" postdelay="2000" procedure="bpLineAdd">
            <variable name="debuggeeFile">$(rtpMidSrc)</variable>
            <variable name="debuggeeLineNum">680</variable>
          </ProcedureCall>
          <TestStep id="_1tog" name="stopAtLine680">
            <TryStep id="_1toh" name="resume">
              <ProcedureCall id="_1toi" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1toj" postdelay="3000"
                             procedure="dbgViewResume"/>
              <ProcedureCall id="_1tok" postdelay="2000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tol"
                               regexp="true">
                <text>.*Stopped - Breakpoint Hit.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tom">
                <text>mid_stack4() - mid_stack.c:680</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1ton"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1too" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1top" name="stepInto">
            <TryStep id="_1toq" name="stepInto">
              <ProcedureCall id="_1tor" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tos" postdelay="3000"
                             procedure="dbgViewStepInto"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tot"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1tou"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tov"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tow" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tox" name="stepInto">
            <TryStep id="_1toy" name="stepInto">
              <ProcedureCall id="_1toz" postdelay="3000"
                             procedure="dbgViewStepInto"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1to+"
                               regexp="true">
                <text>.*Stopped - Step End.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1to-"
                               regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/1" id="_1tp0"
                               regexp="true">
                <text>mid_stack4.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tp1"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tp2" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1tp3" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tp4" name="scopeBreakpoint">
          <comment>scope breakpoint test
</comment>
          <TestStep id="_1tp5" name="resumeFromBeginning">
            <TryStep id="_1tp6" name="resume">
              <ProcedureCall id="_1tp7" postdelay="1000"
                             procedure="qfs.swt.tree.expandNode">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tp8" postdelay="1000"
                             procedure="qfs.swt.tree.selectNode">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node"/>
                <variable name="separator"/>
              </ProcedureCall>
              <ProcedureCall id="_1tp9" postdelay="3000"
                             procedure="dbgViewResume"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1tpA"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1" id="_1tpB"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2" id="_1tpC"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/3" id="_1tpD"
                               regexp="true">
                <text>.*Running.*</text>
              </CheckStringStep>
              <CatchSequence exception="IndexNotFoundException" id="_1tpE"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1tpF" maxerror="2"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1tpG" procedure="uiClickRse"/>
          <ProcedureCall id="_1tpH" procedure="uiClickBreakpointView"/>
          <TestStep id="_1tpI" name="bpExpSharedCode">
            <TryStep id="_1tpJ" name="add sharedCode" postdelay="3000">
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run"
                                  event="SELECTION" id="_1tpK"/>
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run-dfeBreakpoints"
                                  event="SELECTION" id="_1tpL"/>
              <SelectionEventStep client="$(client)"
                                  component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                                  event="SELECTION" id="_1tpM"/>
              <ComponentWaiter client="$(client)"
                               component="ExpressionBreakpointDialog"
                               id="_1tpN"/>
              <SelectionEventStep client="$(client)"
                                  component="ExpressionBreakpointDialog.tabbed@General"
                                  event="SELECTION" id="_1tpO"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="tabGeneral2.text" event="MOUSE_MPRC"
                              id="_1tpP" modifiers="16" x="19" y="5"/>
              <TextInputStep clear="true" client="$(client)"
                             component="tabGeneral2.text" id="_1tpQ"
                             postdelay="1000">
                <text>sharedCode</text>
              </TextInputStep>
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonOk11" event="MOUSE_MPRC"
                              id="_1tpR" modifiers="16" postdelay="1000"
                              predelay="1000"/>
              <ProcedureCall id="_1tpS" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1tpT"
                               regexp="true">
                <text>sharedCode.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1tpU" maxerror="0"
                             name="ignore"/>
            </TryStep>
          </TestStep>
          <TestStep id="_1tpV" name="dbgViewShareCodeStop">
            <WhileSequence id="_1tpW" postdelay="1000" test="1">
              <TryStep id="_1tpX">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1/0"
                                 id="_1tpY" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1tpZ"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1tpa"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1tpb"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/0" id="_1tpc"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/1" id="_1tpd"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <WhileSequence id="_1tpe" postdelay="1000" test="2">
              <TryStep id="_1tpf">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2/0"
                                 id="_1tpg" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1tph"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1tpi"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1tpj"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/2/0" id="_1tpk"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/2/1" id="_1tpl"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <ProcedureCall id="_1tpm" procedure="uiCheckSharedCodeFrame"/>
          </TestStep>
          <TestStep id="_1tpn" name="threadSpecificBreakpoint">
            <comment>thread specific breakpoint</comment>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/1/0"
                            event="MOUSE_MPRC" id="_1tpo" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Breakpoints.tree&amp;/0"
                            event="MOUSE_MPRC" id="_1tpp" modifiers="4"
                            popup="true" postdelay="1000"/>
            <SelectionEventStep client="$(client)"
                                component="menu-com.windriver.ide.debug.ui.restrictBreakpointScopeAction"
                                event="SELECTION" id="_1tpq"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/1/0"
                            event="MOUSE_MPRC" id="_1tpr" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                            event="MOUSE_MPRC" id="_1tps" modifiers="16"/>
            <WhileSequence id="_1tpt" postdelay="1000" test="1">
              <TryStep id="_1tpu">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1/0"
                                 id="_1tpv" local="true" notcheck="true"
                                 resvarname="res"/>
                <IfSequence id="_1tpw"
                            test="&#34;$(res)&#34; == &#34;true&#34;">
                  <BreakStep id="_1tpx"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1tpy"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/0" id="_1tpz"
                             regexp="true">
              <text>sharedCode().*</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/1/1" id="_1tp+"
                             regexp="true">
              <text>printThreadInfo().*</text>
            </CheckStringStep>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/2/0"
                            event="MOUSE_MPRC" id="_1tp-" modifiers="16"
                            postdelay="1000"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                            event="MOUSE_MPRC" id="_1tq0" modifiers="16"/>
            <TryStep id="_1tq1"
                     name="if the 2nd thread could hit the breakpoint specific for the 1st in 15 seconds">
              <ComponentWaiter client="$(client)"
                               component="Debug.tree&amp;/0/0/2/0"
                               id="_1tq2"/>
              <CatchSequence exception="IndexNotFoundException" id="_1tq3"
                             maxerror="0" name="success">
                <ProcedureCall id="_1tq4" procedure="qfs.run-log.logMessage">
                  <variable name="message">scope breakpoint success</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1tq5"
                               procedure="qfs.run-log.screenshots.logScreenshot">
                  <variable name="inSUT">false</variable>
                  <variable name="title"/>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
              </CatchSequence>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_1tq6" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tq7" name="debugSymbolBrowser">
          <comment>debug symbol browser view test
</comment>
          <ProcedureCall id="_1tq8" procedure="uiClickDebugSymbolBrowser"/>
          <ProcedureCall id="_1vYS" procedure="symbolSharedCode"/>
          <ProcedureCall id="_1vYT" procedure="symbolCounter"/>
          <ProcedureCall id="_1vit" procedure="symbolEmpty"/>
          <ProcedureCall id="_1vjV" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1vYX" procedure="uiClickRse"/>
        </TestCase>
        <TestCase id="_1tqB" name="sourceView">
          <comment>source view test

</comment>
          <ProcedureCall id="_1tqC" procedure="uiClickDebugSymbolBrowser"/>
          <ProcedureCall id="_1vYV" procedure="symbolMidStack"/>
          <ProcedureCall id="_1vis" procedure="symbolEmpty"/>
          <ProcedureCall id="_1vYW" procedure="uiClickRse"/>
        </TestCase>
        <TestCase id="_1tqE" name="debugView">
          <comment>debug view test
debug view should show the correct stackframes when different breakpoints are hit

</comment>
          <ProcedureCall id="_1tqF" procedure="uiClickRse"/>
          <ProcedureCall id="_1tqG" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1tqH" procedure="bpExp1"/>
          <ProcedureCall id="_1tqI" procedure="bpExp2"/>
          <ProcedureCall id="_1tqJ" procedure="bpExp3"/>
          <ProcedureCall id="_1tqK" procedure="bpExp4"/>
          <ProcedureCall id="_1tqL" procedure="bpExp5"/>
          <ProcedureCall id="_1tqM" procedure="uiCheckFrame1"/>
          <ProcedureCall id="_1tqN" procedure="uiCheckFrame2"/>
          <ProcedureCall id="_1tqO" procedure="uiCheckFrame3"/>
          <ProcedureCall id="_1tqP" procedure="uiCheckFrame4"/>
          <ProcedureCall id="_1tqQ" procedure="uiCheckFrame5"/>
          <ProcedureCall id="_1tqR" procedure="uiDelAllBp"/>
        </TestCase>
        <TestCase id="_1tqS" name="variableView">
          <comment>variable view test
</comment>
          <TestStep id="_1tqT" name="dbgMid5Stop">
            <ProcedureCall id="_1tqU" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tqV" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tqW" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tqX" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tqY" procedure="uiClickVariableView"/>
          <ProcedureCall id="_1tqZ" predelay="1000" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/1"
                          event="MOUSE_MPRC" id="_1tqa" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1tqb" procedure="frameCheck"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0/2"
                          event="MOUSE_MPRC" id="_1tqc" modifiers="16"
                          postdelay="2000"/>
          <ProcedureCall id="_1tqd" procedure="frameCheck"/>
        </TestCase>
        <TestCase id="_1tqe" name="expressionView">
          <comment>expression view test
</comment>
          <TestStep id="_1tqf" name="dbgMid5Stop">
            <ProcedureCall id="_1tqg" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tqh" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tqi" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tqj" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tqk" procedure="uiShowExpressionView"/>
          <ProcedureCall id="_1tql" local="true" procedure="expAddwatch">
            <variable name="item">q</variable>
          </ProcedureCall>
          <ProcedureCall id="_1tqm" local="true" procedure="expAddwatch">
            <variable name="item">rectest</variable>
          </ProcedureCall>
          <ProcedureCall id="_1tqn" local="true" procedure="expAddwatch">
            <variable name="item">s1</variable>
          </ProcedureCall>
          <ProcedureCall id="_1tqo" postdelay="1000"
                         procedure="expExpandItems"/>
          <ProcedureCall id="_1tqp" predelay="1000"
                         procedure="expCollapsetems"/>
          <ProcedureCall id="_1tqq" procedure="expDelAll"/>
          <ProcedureCall id="_1tqr" procedure="uiCloseExpressionView"/>
        </TestCase>
        <TestCase id="_1tqs" name="registerView">
          <comment>register view test
</comment>
          <TestStep id="_1tqt" name="dbgMid5Stop">
            <ProcedureCall id="_1tqu" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tqv" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tqw" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tqx" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tqy" procedure="uiShowRegisterView"/>
          <ProcedureCall id="_1tqz" procedure="regExpandItems"/>
          <ProcedureCall id="_1tq+" procedure="regCollapsetems"/>
        </TestCase>
        <TestCase id="_1tq-" name="memoryBrowserView">
          <comment>memory browser view test
</comment>
          <TestStep id="_1tr0" name="dbgMid5Stop">
            <ProcedureCall id="_1tr1" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tr2" procedure="bpExpMid5"/>
            <ProcedureCall id="_1tr3" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tr4" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1tr5" postdelay="1000"
                         procedure="uiShowMemoryBrowserView"/>
          <TextInputStep clear="true" client="$(client)"
                         component="Memory_Browser2.combo" id="_1tr6"
                         postdelay="1000">
            <text>&amp;p_q</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                          event="MOUSE_MPRC" id="_1tr7" modifiers="16"
                          postdelay="1000"/>
          <ProcedureCall id="_1tr8" postdelay="2000"
                         procedure="memBrowserAddItem"/>
          <ProcedureCall id="_1tr9" procedure="uiCloseMemoryBrowserView"/>
        </TestCase>
        <TestCase id="_1trA" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1trB" name="dbgMid5Stop">
            <ProcedureCall id="_1trC" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1trD" procedure="bpExpMid5"/>
            <ProcedureCall id="_1trE" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1trF" procedure="uiDelAllBp"/>
          </TestStep>
          <ProcedureCall id="_1trG" procedure="uiOpenDbgShell"/>
          <ProcedureCall id="_1trH" procedure="dbgCmdErrorCheck"/>
        </TestCase>
        <TestCase id="_1trI" name="terminateAndRelaunch">
          <comment>run-control terminate and relaunch 
</comment>
          <ProcedureCall id="_1trJ" procedure="uiClickBreakpointView"/>
          <ProcedureCall id="_1trK" procedure="bpExpMid5"/>
          <TestStep id="_1trL" name="terminateAndRelaunch">
            <RepeatSequence count="3" id="_1trM" name="stepLoop">
              <ProcedureCall id="_1trN" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1trO" procedure="dbgViewTerminateRelaunch"/>
              <ProcedureCall id="_1trv" procedure="uiCheckModelDialog"/>
              <ProcedureCall id="_1trP" procedure="dbgStopAtMain"/>
            </RepeatSequence>
          </TestStep>
          <ProcedureCall id="_1trQ" procedure="uiDelAllBp"/>
        </TestCase>
      </TestSet>
      <TestSet id="_1vYe" name="attachRtp">
        <variable name="debuggee">mthread_stack</variable>
        <DependencyReference id="_1vYf" reference="wb.vxWdbPipeRunRtp">
          <variable name="vxeFile">$_(mthreadFile)</variable>
        </DependencyReference>
        <TestCase id="_1vfK" name="debugSymbolBrowser">
          <comment>debug symbol browser view test
</comment>
          <ProcedureCall id="_1vfL" procedure="uiClickDebugSymbolBrowser"/>
          <ProcedureCall id="_1vfM" procedure="symbolSharedCode"/>
          <ProcedureCall id="_1vfN" procedure="symbolCounter"/>
          <ProcedureCall id="_1vjX" procedure="uiDelAllBp"/>
          <ProcedureCall id="_1viq" procedure="symbolEmpty"/>
          <ProcedureCall id="_1vfO" procedure="uiClickRse"/>
        </TestCase>
        <TestCase id="_1vfP" name="sourceView">
          <comment>source view test

</comment>
          <ProcedureCall id="_1vfQ" procedure="uiClickDebugSymbolBrowser"/>
          <ProcedureCall id="_1vfR" procedure="symbolMidStack"/>
          <ProcedureCall id="_1vir" procedure="symbolEmpty"/>
          <ProcedureCall id="_1vfS" procedure="uiClickRse"/>
        </TestCase>
        <TestCase id="_1vgP" name="openDebugCmdShell">
          <comment>debug view "Debug Command Shell" test
</comment>
          <TestStep id="_1vgQ" name="dbgMid5Stop">
            <ProcedureCall id="_1vgR" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1vgS" postdelay="5000" procedure="bpExpMid5"/>
            <TryStep id="_1vjZ" name="wait for breakpoint hit">
              <ComponentWaiter client="$(client)"
                               component="Debug.tree%/.*Attach Target Context.*/.*/.*Stopped.*/mid_stack5.*"
                               id="_1vjY"/>
              <CatchSequence exception="IndexNotFoundException" id="_1vja"
                             maxerror="2"/>
              <CatchSequence exception="TestException" id="_1vjb"
                             maxerror="0"/>
            </TryStep>
            <ProcedureCall id="_1vgU" procedure="uiDelAllBp"/>
          </TestStep>
          <TryStep id="_1vjp" name="start debug command shell">
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree%/.*Attach Target Context.*/.*/.*Stopped.*/mid_stack5.*"
                            event="MOUSE_MPRC" id="_1vjo" modifiers="4"
                            popup="true"/>
            <SelectionEventStep client="$(client)"
                                component="menu-com.windriver.ide.debug.ui.actions.popup.targetModePopupAction"
                                event="SELECTION" id="_1vjc"/>
            <SelectionEventStep client="$(client)"
                                component="menu-com.windriver.ide.debug.ui.console.attachHostShellAction"
                                event="SELECTION" id="_1vjd"/>
            <WhileSequence id="_1vje" test="1">
              <TryStep id="_1vjf" name="dbgCmdShell">
                <TryStep id="_1vjg" name="clickDebugCmdShellCanvas">
                  <MouseEventStep clicks="1" client="$(client)"
                                  component="Debug_Command_Shell.canvas"
                                  event="MOUSE_MPRC" id="_1vjh" modifiers="16"
                                  x="173" y="85"/>
                  <CatchSequence exception="ComponentNotFoundException"
                                 id="_1vji" maxerror="0">
                    <ProcedureCall id="_1vjj" procedure="uiClickDbgCmdShell"/>
                  </CatchSequence>
                </TryStep>
                <ProcedureCall id="_1vjk" local="true"
                               procedure="dbgCmdFinish" retvarname="res"/>
                <IfSequence id="_1vjl" test="$(res)">
                  <BreakStep id="_1vjm" postdelay="1000"/>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1vjn"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </WhileSequence>
            <CatchSequence exception="TestException" id="_1vjq" maxerror="0"/>
          </TryStep>
          <ProcedureCall id="_1vgW" procedure="dbgCmdErrorCheck"/>
        </TestCase>
      </TestSet>
    </TestSet>
  </TestSet>
  <TestSet id="_1vjr" name="ide">
    <TestSet id="_1vjs" name="importExportTargetConnections">
      <variable name="name_list">[]</variable>
      <DependencyReference id="_1vnR" reference="wb.wdmWs"/>
      <SetupSequence id="_1vpm">
        <ServerScriptStep id="_1vpn">
          <code>import re

export_name_list = []
import_name_list = []
global export_name_list
global import_name_list

rc.setGlobal('vxSimFlag',False)
rc.setGlobal('ocdIssFlag',False)
rc.setGlobal('ocdIssName','WRISS_MPC8265')</code>
        </ServerScriptStep>
      </SetupSequence>
      <TestCase id="_1vmr" name="create connection">
        <TestStep id="_1vn4" name="ocd iss">
          <TryStep id="_1vpt" name="select ocd iss name">
            <ProcedureCall id="_1vpu" procedure="qfs.swt.tree.selectNode">
              <variable name="id">Remote_Systems</variable>
              <variable name="node">$(ocdIssName).*</variable>
              <variable name="separator">%</variable>
            </ProcedureCall>
            <CatchSequence exception="IndexNotFoundException" id="_1vpv"
                           maxerror="0">
              <SetGlobalStep id="_1vpw" varname="ocdIssFlag">
                <default>False</default>
              </SetGlobalStep>
            </CatchSequence>
            <CatchSequence exception="TestException" id="_1vpx" maxerror="0"/>
          </TryStep>
          <WhileSequence id="_1vpy" test="not $(ocdIssFlag)">
            <WhileSequence id="_1vpz" name="existOne?" test="1">
              <TryStep id="_1vp+" name="conNameExist?">
                <ComponentWaiter client="$(client)"
                                 component="Remote_Systems%/$(ocdIssName).*"
                                 id="_1vp-" local="true" resvarname="exist"
                                 timeout="1000"/>
                <IfSequence id="_1vq0" test="$(exist)">
                  <ProcedureCall id="_1vqB"
                                 procedure="dbgViewClearTerminate"/>
                  <ProcedureCall id="_1vq1" procedure="rseDelName">
                    <variable name="vxName">$(ocdIssName)</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="ComponentNotFoundException"
                               id="_1vq2" maxerror="0">
                  <BreakStep id="_1vq3"/>
                </CatchSequence>
              </TryStep>
            </WhileSequence>
            <ProcedureCall id="_1vn3" local="true" procedure="conOcdIss"
                           retvarname="created"/>
            <IfSequence id="_1vq6" test="$(created)">
              <ProcedureCall id="_1vnL" local="true" procedure="rseIssWait"
                             retvarname="connected"/>
              <IfSequence id="_1vq8" test="$(connected)">
                <SetGlobalStep id="_1vq9" varname="ocdIssFlag">
                  <default>True</default>
                </SetGlobalStep>
                <ProcedureCall id="_1vqA" procedure="rseCollopse"/>
              </IfSequence>
            </IfSequence>
          </WhileSequence>
          <ProcedureCall id="_1vqK" procedure="conDisName">
            <variable name="conName">$(ocdIssName)</variable>
          </ProcedureCall>
          <ProcedureCall id="_1vnM" procedure="dbgViewClearTerminate"/>
        </TestStep>
        <TestStep id="_1vnN" name="vx sim">
          <ServerScriptStep id="_1vnS" name="setConName">
            <code>import os
import socket

prjBase = os.path.basename(r'$(platformDir)')
hostName = socket.gethostname()
conName = 'wdbpipe--' + prjBase + '--' + hostName

rc.setGlobal('conName',conName)
</code>
          </ServerScriptStep>
          <TryStep id="_1vnT" name="select vxworks simlator name">
            <ProcedureCall id="_1vnU" procedure="qfs.swt.tree.selectNode">
              <variable name="id">Remote_Systems</variable>
              <variable name="node">$(conName).*</variable>
              <variable name="separator">%</variable>
            </ProcedureCall>
            <CatchSequence exception="IndexNotFoundException" id="_1vnV"
                           maxerror="0">
              <SetGlobalStep id="_1vnW" varname="vxSimFlag">
                <default>False</default>
              </SetGlobalStep>
            </CatchSequence>
            <CatchSequence exception="TestException" id="_1vnX" maxerror="0"/>
          </TryStep>
          <WhileSequence id="_1vnY" test="not $(vxSimFlag)">
            <WhileSequence id="_1vnZ" name="existOne?" test="1">
              <TryStep id="_1vna" name="conNameExist?">
                <ComponentWaiter client="$(client)"
                                 component="Remote_Systems%/$(conName).*"
                                 id="_1vnb" local="true" resvarname="exist"
                                 timeout="1000"/>
                <IfSequence id="_1vps" test="$(exist)">
                  <ProcedureCall id="_1vne" procedure="rseDelName">
                    <variable name="vxName">$(conName)</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="ComponentNotFoundException"
                               id="_1vnc" maxerror="0">
                  <BreakStep id="_1vnd"/>
                </CatchSequence>
              </TryStep>
            </WhileSequence>
            <ServerScriptStep id="_1vnf" name="imageName">
              <code>import os

vipName = os.path.join(r'$(platformDir)','default','vxWorks')

rc.setLocal('vipName',vipName)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1vng" local="true" postdelay="5000"
                           procedure="conVxSim" retvarname="created"/>
            <IfSequence id="_1vnh" test="$(created)">
              <ProcedureCall id="_1vni" local="true" procedure="rseVxWait"
                             retvarname="connected">
                <variable name="vxName">$(conName)</variable>
              </ProcedureCall>
              <IfSequence id="_1vnj" test="$(connected)">
                <SetGlobalStep id="_1vnk" varname="vxSimFlag">
                  <default>True</default>
                </SetGlobalStep>
                <ProcedureCall id="_1vnl" procedure="rseCollopse"/>
              </IfSequence>
            </IfSequence>
          </WhileSequence>
          <ProcedureCall id="_1vnQ" procedure="dbgViewClearTerminate"/>
        </TestStep>
      </TestCase>
      <TestCase id="_1vnm" name="export">
        <ProcedureCall id="_1vpi" local="true"
                       procedure="qfs.swt.tree.getRowCount"
                       retvarname="rseCount">
          <variable name="id">Remote_Systems</variable>
        </ProcedureCall>
        <RepeatSequence count="$(rseCount)" id="_1vpk" name="get con name"
                        var="idx">
          <ProcedureCall id="_1vpj" local="true"
                         procedure="qfs.swt.tree.getValueOfNode"
                         retvarname="nodeName">
            <variable name="id">Remote_Systems</variable>
            <variable name="node">$(idx)</variable>
            <variable name="nodeSeparator">&amp;</variable>
          </ProcedureCall>
          <ServerScriptStep id="_1vpl">
            <code>import re

nodeName = '$(nodeName)'
nodeName = nodeName.split('(')[0]
nodeName = nodeName.strip(' ')
global export_name_list
if nodeName != 'Local':
    export_name_list.append(nodeName)

export_name_list = dict(map(lambda i:(i,1),export_name_list)).keys()
rc.setGlobal('export_name_list',export_name_list)
</code>
          </ServerScriptStep>
        </RepeatSequence>
        <ProcedureCall id="_1voB" procedure="fExportTgtCon"/>
        <ServerScriptStep id="_1vpr">
          <code>import os

global export_name_list
xml_list = []
files = os.listdir(r'$(wdmWorkspace)')
for xml_file in files:
    (xml_name,xml_ent) = os.path.splitext(xml_file)
    if xml_ent == '.xml':
        xml_list.append(xml_name)

rc.logMessage(export_name_list,
            dontcompactify=False,
            report=True)
rc.logMessage(xml_list,
            dontcompactify=False,
            report=True)
if len(xml_list) != len(export_name_list):
    rc.check(1==0,"export target connection failed",report=True,nowrap=False)

</code>
        </ServerScriptStep>
      </TestCase>
      <TestCase id="_1voC" name="rse clean">
        <ProcedureCall id="_1voE" procedure="rseClean"/>
      </TestCase>
      <TestCase id="_1voF" name="import">
        <ServerScriptStep id="_1vqY">
          <code>import re


import_name_list = []
global import_name_list

rc.setGlobal('vxSimFlag',False)
rc.setGlobal('ocdIssFlag',False)
rc.setGlobal('ocdIssName','WRISS_MPC8265')</code>
        </ServerScriptStep>
        <ProcedureCall id="_1vpG" procedure="fImportTgtCon"/>
        <ProcedureCall id="_1vqW" local="true"
                       procedure="qfs.swt.tree.getRowCount"
                       retvarname="rseCount">
          <variable name="id">Remote_Systems</variable>
        </ProcedureCall>
        <RepeatSequence count="$(rseCount)" id="_1vpo" name="get con name"
                        var="idx">
          <ProcedureCall id="_1vpp" local="true"
                         procedure="qfs.swt.tree.getValueOfNode"
                         retvarname="nodeName">
            <variable name="id">Remote_Systems</variable>
            <variable name="node">$(idx)</variable>
            <variable name="nodeSeparator">&amp;</variable>
          </ProcedureCall>
          <ServerScriptStep id="_1vpq">
            <code>import re

nodeName = '$(nodeName)'
nodeName = nodeName.split('(')[0]
nodeName = nodeName.strip(' ')
global import_name_list
if nodeName != 'Local':
    import_name_list.append(nodeName)

import_name_list = dict(map(lambda i:(i,1),import_name_list)).keys()
print import_name_list
rc.setGlobal('import_name_list',import_name_list)
</code>
          </ServerScriptStep>
        </RepeatSequence>
        <ServerScriptStep id="_1vqX">
          <code>import os

global import_name_list
xml_list = []
files = os.listdir(r'$(wdmWorkspace)')
for xml_file in files:
    (xml_name,xml_ent) = os.path.splitext(xml_file)
    if xml_ent == '.xml':
        xml_list.append(xml_name)

rc.logMessage(import_name_list,
            dontcompactify=True,
            report=True)
rc.logMessage(xml_list,
            dontcompactify=True,
            report=True)
if len(xml_list) != len(import_name_list):
    rc.check(1==0,"import target connection failed",report=True,nowrap=False)

</code>
        </ServerScriptStep>
      </TestCase>
    </TestSet>
  </TestSet>
  <TestSet id="_1vsk" name="wbiss">
    <DependencyReference id="_1vtp" reference="wb.wbOcdPerspective"/>
    <TestSet id="_1vsl" name="create">
      <variable name="name_list">[]</variable>
      <SetupSequence id="_1vsn">
        <ServerScriptStep id="_1vso">
          <code>import re

rc.setGlobal('ocdIssFlag',False)
rc.setGlobal('ocdIssName','WRISS_MPC8265')</code>
        </ServerScriptStep>
      </SetupSequence>
      <TestCase id="_1vsp" name="create connection">
        <TestStep id="_1vsq" name="ocd iss">
          <TryStep id="_1vsr" name="select ocd iss name">
            <ProcedureCall id="_1vss" procedure="qfs.swt.tree.selectNode">
              <variable name="id">Remote_Systems</variable>
              <variable name="node">$(ocdIssName).*</variable>
              <variable name="separator">%</variable>
            </ProcedureCall>
            <CatchSequence exception="IndexNotFoundException" id="_1vst"
                           maxerror="0">
              <SetGlobalStep id="_1vsu" varname="ocdIssFlag">
                <default>False</default>
              </SetGlobalStep>
            </CatchSequence>
            <CatchSequence exception="TestException" id="_1vsv" maxerror="0"/>
          </TryStep>
          <WhileSequence id="_1vsw" test="not $(ocdIssFlag)">
            <WhileSequence id="_1vsx" name="existOne?" test="1">
              <TryStep id="_1vsy" name="conNameExist?">
                <ComponentWaiter client="$(client)"
                                 component="Remote_Systems%/$(ocdIssName).*"
                                 id="_1vsz" local="true" resvarname="exist"
                                 timeout="1000"/>
                <IfSequence id="_1vs+" test="$(exist)">
                  <ProcedureCall id="_1vs-"
                                 procedure="dbgViewClearTerminate"/>
                  <ProcedureCall id="_1vt0" procedure="rseDelName">
                    <variable name="vxName">$(ocdIssName)</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="ComponentNotFoundException"
                               id="_1vt1" maxerror="0">
                  <BreakStep id="_1vt2"/>
                </CatchSequence>
              </TryStep>
            </WhileSequence>
            <ProcedureCall id="_1vt3" local="true" procedure="conOcdIss"
                           retvarname="created"/>
            <IfSequence id="_1vt4" test="$(created)">
              <ProcedureCall id="_1vt5" local="true" procedure="rseIssWait"
                             retvarname="connected"/>
              <IfSequence id="_1vt6" test="$(connected)">
                <SetGlobalStep id="_1vt7" varname="ocdIssFlag">
                  <default>True</default>
                </SetGlobalStep>
                <ProcedureCall id="_1vt8" procedure="rseCollopse"/>
              </IfSequence>
            </IfSequence>
          </WhileSequence>
          <ProcedureCall id="_1vt9" procedure="conDisName">
            <variable name="conName">$(ocdIssName)</variable>
          </ProcedureCall>
          <ProcedureCall id="_1vtA" procedure="dbgViewClearTerminate"/>
        </TestStep>
      </TestCase>
    </TestSet>
  </TestSet>
  <TestSet id="_1tsT" name="vx">
    <variable name="platformDir">$(platformDir)</variable>
    <comment>launch kinds of debuggee from UI, check if 
1, it launched successfully
2, it stopped at main</comment>
    <TestSet id="_1u7q" name="wdbrpc">
      <variable name="vxWdbrpcFlag">false</variable>
      <variable name="conName">""</variable>
      <TestSet id="_1tsU" name="mthread">
        <variable name="rtpVxe">""</variable>
        <variable name="vxeFile">""</variable>
        <DependencyReference id="_1vuo" reference="wb.vxConsole"/>
        <TestSet id="_1tsa" name="kernel">
          <variable name="debuggee">mthread_stack</variable>
          <DependencyReference id="_1tsb" reference="wb.vxWdbRpcLaunchKernel">
            <variable name="entry">mthread</variable>
          </DependencyReference>
          <TestCase id="_1tsc" name="resumeAndSuspend">
            <comment>run control test :
resume
suspend
</comment>
            <TestStep id="_1tsd" name="resumeFromBeginning">
              <TryStep id="_1tse" name="resume">
                <ProcedureCall id="_1tsf" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tsg" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tsh" postdelay="3000"
                               procedure="dbgViewResume"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tsi"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1tsj"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1tsk"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1tsl"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tsm"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tsn"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1tso" name="suspendOnlyOneThread">
              <comment>suspend only the 3rd thread</comment>
              <TryStep id="_1tsp" name="suspendOneThread">
                <ProcedureCall id="_1tsq" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tsr" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/2</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tss" postdelay="3000"
                               procedure="dbgViewSuspend"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tst"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1tsu"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1tsv"
                                 regexp="true">
                  <text>.*Stopped - User Request.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1tsw"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tsx"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tsy"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1tsz" name="resumeOnlyOneThread">
              <comment>resume only the 2nd thread</comment>
              <TryStep id="_1ts+" name="resume">
                <ProcedureCall id="_1ts-" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tt0" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/2</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tt1" postdelay="3000"
                               procedure="dbgViewResume"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tt2"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1tt3"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1tt4"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1tt5"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tt6"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tt7"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestCase>
          <TestCase id="_1tt8" name="lineBreakpoint">
            <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1tt9" procedure="uiClickRse"/>
            <ProcedureCall id="_1ttA" procedure="uiClickBreakpointView"/>
            <TestStep id="_1ttB" name="lineBreakpoint">
              <comment>Breakpoint view : line breakpoint add and delete</comment>
              <ProcedureCall id="_1ttC" procedure="uiClickBreakpointView"/>
              <ServerScriptStep id="_1ttD" name="computeFile">
                <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mthread_stack.c')

rc.setLocal('mthreadStackFile',mthreadStackFile)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1ttE" postdelay="2000"
                             procedure="bpLineAdd">
                <variable name="debuggeeFile">$(mthreadStackFile)</variable>
                <variable name="debuggeeLineNum">224</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1ttF">
                <text>mthread_stack.c:224 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <TestStep id="_1ttG" name="resumeFromBeginning">
                <TryStep id="_1ttH" name="resume">
                  <ProcedureCall id="_1ttI" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1ttJ" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ttK" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ttL" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ttM">
                    <text>mthread() - mthread_stack.c:224</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1ttN"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1ttO"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <ProcedureCall id="_1ttP" postdelay="2000"
                             procedure="bpLineAdd">
                <variable name="debuggeeFile">$(mthreadStackFile)</variable>
                <variable name="debuggeeLineNum">228</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/1" id="_1ttQ">
                <text>mthread_stack.c:228 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <TestStep id="_1ttR" name="resume">
                <TryStep id="_1ttS" name="resume">
                  <ProcedureCall id="_1ttT" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1ttU" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ttV" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ttW" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ttX">
                    <text>mthread() - mthread_stack.c:228</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1ttY"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1ttZ"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <ProcedureCall id="_1tta" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
          <TestCase id="_1ttb" name="temporyBreakpoint">
            <comment>tempory breakpoint

</comment>
            <TestStep id="_1ttc" name="temporyBreakpoint">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1ttd" procedure="uiClickBreakpointView"/>
              <ServerScriptStep id="_1tte" name="computeFile">
                <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mthread_stack.c')

rc.setLocal('mthreadStackFile',mthreadStackFile)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1ttf" postdelay="3000"
                             procedure="bpLineTempory">
                <variable name="debuggeeFile">$(mthreadStackFile)</variable>
                <variable name="debuggeeLineNum">224</variable>
              </ProcedureCall>
              <TryStep id="_1u90" name="checkTp">
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1ttg" regexp="true">
                  <text>.*Temporary.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1u91"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1tth" name="resumeFromBeginning">
                <TryStep id="_1tti" name="resume">
                  <ProcedureCall id="_1ttj" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1ttk" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ttl" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ttm" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ttn">
                    <text>mthread() - mthread_stack.c:224</text>
                  </CheckStringStep>
                  <TryStep id="_1tto" name="waitForTemoryBreakpointDelete">
                    <ComponentWaiter absence="true" client="$(client)"
                                     component="Breakpoints.tree&amp;/0"
                                     id="_1ttp" timeout="5000"/>
                    <CatchSequence exception="IndexFoundException" id="_1ttq"
                                   maxerror="2" name="error"/>
                  </TryStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1ttr"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1tts"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <ProcedureCall id="_1ttt" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1ucx" name="conditionBreakpoint">
            <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
            <TestStep id="_1ucy" name="conditionBreakpoint">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1ucz" procedure="uiClickBreakpointView"/>
              <ServerScriptStep id="_1uc+" name="computeFile">
                <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mthread_stack.c')

rc.setLocal('mthreadStackSrc',mthreadStackFile)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1uc-" postdelay="1000"
                             procedure="bpLineCondition">
                <variable name="debuggeeFile">$(mthreadStackSrc)</variable>
                <variable name="debuggeeLineNum">317</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1ud0"
                               regexp="true">
                <text>.*Condition=t==1.*</text>
              </CheckStringStep>
              <TestStep id="_1ud1" name="resume">
                <TryStep id="_1ud2" name="resume">
                  <ProcedureCall id="_1ud3" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1ud4" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ud5" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ud6" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ud7">
                    <text>mthread() - mthread_stack.c:317</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/1"
                                   id="_1ud8" regexp="true">
                    <text>.*Running.*</text>
                  </CheckStringStep>
                  <TryStep id="_1ud9">
                    <ComponentWaiter client="$(client)"
                                     component="Debug.tree&amp;/0/0/2"
                                     id="_1udA" timeout="2000"/>
                    <CatchSequence exception="IndexFoundException" id="_1udB"
                                   maxerror="2"/>
                    <CatchSequence exception="IndexNotFoundException"
                                   id="_1udC" maxerror="0" name="success"/>
                  </TryStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1udD"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1udE"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <ProcedureCall id="_1udF" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1udG" name="skipBreakpoint">
            <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
            <TestStep id="_1udH" name="skipBreakpoint">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1udI" procedure="uiClickBreakpointView"/>
              <ServerScriptStep id="_1udJ" name="computeFile">
                <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackSrc',mthreadStackFile)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1udK" postdelay="1000"
                             procedure="bpLineSkip">
                <variable name="debuggeeFile">$(midStackSrc)</variable>
                <variable name="debuggeeLineNum">72</variable>
                <variable name="skipNum">3</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1udL"
                               regexp="true">
                <text>.*Planted.*Skip Count=3.*</text>
              </CheckStringStep>
              <TestStep id="_1udM" name="resume">
                <TryStep id="_1udN" name="resume">
                  <ProcedureCall id="_1udO" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1udP" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1udQ" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1udR" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <ProcedureCall id="_1udS" procedure="uiClickVariableView"/>
                  <CheckStringStep client="$(client)"
                                   component="WorkbenchWindow.tree2@Value@/i"
                                   id="_1udT">
                    <text>3 </text>
                  </CheckStringStep>
                  <ProcedureCall id="_1udU"
                                 procedure="uiClickExpressionView"/>
                  <ProcedureCall id="_1udV" procedure="expAddwatch">
                    <variable name="item">i</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Expressions.tree@Value@/i"
                                   id="_1udW">
                    <text>3 </text>
                  </CheckStringStep>
                  <ProcedureCall id="_1udX"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title"/>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1udY" procedure="expDelAll"/>
                  <ProcedureCall id="_1udZ"
                                 procedure="uiCloseExpressionView"/>
                  <CatchSequence exception="IndexNotFoundException" id="_1uda"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1udb"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <ProcedureCall id="_1udc" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1tua" name="expressionBreakpoint">
            <comment>expression breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1tub" procedure="uiClickRse"/>
            <ProcedureCall id="_1tuc" procedure="uiClickBreakpointView"/>
            <TestStep id="_1tud" name="expressionBreakpoint">
              <comment>Breakpoint view : expression breakpoint add and delete</comment>
              <ProcedureCall id="_1tue" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tuf" procedure="bpExp1"/>
              <ProcedureCall id="_1tug" procedure="bpExp2"/>
              <ProcedureCall id="_1tuh" procedure="bpExp3"/>
              <ProcedureCall id="_1tui" procedure="bpExp4"/>
              <ProcedureCall id="_1tuj" procedure="bpExp5"/>
              <ProcedureCall id="_1tuk" procedure="uiCheckFrame1"/>
              <ProcedureCall id="_1tul" procedure="uiCheckFrame2"/>
              <ProcedureCall id="_1tum" procedure="uiCheckFrame3"/>
              <ProcedureCall id="_1tun" procedure="uiCheckFrame4"/>
              <ProcedureCall id="_1tuo" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1tup" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
          <TestCase id="_1tuq" name="prologBreakpoint">
            <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
            <ProcedureCall id="_1tur" procedure="uiClickRse"/>
            <ProcedureCall id="_1tus" procedure="uiClickBreakpointView"/>
            <TestStep id="_1tut" name="prologBreakpoint1">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1tuu" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tuv" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack1</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1tuw"
                               predelay="1000" regexp="true">
                <text>mid_stack1.*</text>
              </CheckStringStep>
              <TestStep id="_1tux" name="resume">
                <TryStep id="_1tuy" name="resume">
                  <ProcedureCall id="_1tuz" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1tu+" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1tu-" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1tv0" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1tv1">
                    <text>mid_stack1() - mid_stack.c:40</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1tv2"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1tv3"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1tv4" name="prologBreakpoint2">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1tv5" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tv6" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack2</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/1" id="_1tv7"
                               predelay="1000" regexp="true">
                <text>mid_stack2.*</text>
              </CheckStringStep>
              <TestStep id="_1tv8" name="resume">
                <TryStep id="_1tv9" name="resume">
                  <ProcedureCall id="_1tvA" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1tvB" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1tvC" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1tvD" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1tvE">
                    <text>mid_stack2() - mid_stack.c:109</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1tvF"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1tvG"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1tvH" name="prologBreakpoint3">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1tvI" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tvJ" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack3</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/2" id="_1tvK"
                               predelay="1000" regexp="true">
                <text>mid_stack3.*</text>
              </CheckStringStep>
              <TestStep id="_1tvL" name="resume">
                <TryStep id="_1tvM" name="resume">
                  <ProcedureCall id="_1tvN" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1tvO" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1tvP" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1tvQ" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1tvR">
                    <text>mid_stack3() - mid_stack.c:355</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1tvS"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1tvT"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1tvU" name="prologBreakpoint4">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1tvV" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tvW" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack4</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/3" id="_1tvX"
                               predelay="1000" regexp="true">
                <text>mid_stack4.*</text>
              </CheckStringStep>
              <TestStep id="_1tvY" name="resume">
                <TryStep id="_1tvZ" name="resume">
                  <ProcedureCall id="_1tva" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1tvb" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1tvc" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1tvd" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1tve">
                    <text>mid_stack4() - mid_stack.c:522</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1tvf"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1tvg"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1tvh" name="prologBreakpoint5">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1tvi" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tvj" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack5</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/4" id="_1tvk"
                               predelay="1000" regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <TestStep id="_1tvl" name="resume">
                <TryStep id="_1tvm" name="resume">
                  <ProcedureCall id="_1tvn" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1tvo" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1tvp" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1tvq" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1tvr">
                    <text>mid_stack5() - mid_stack.c:690</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1tvs"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1tvt"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <ProcedureCall id="_1tvu" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1tvv" name="stepReturn">
            <comment>run-control step return

</comment>
            <ProcedureCall id="_1tvw" procedure="uiClickRse"/>
            <ProcedureCall id="_1tvx" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tvy" procedure="bpExpMid5"/>
            <TestStep id="_1tvz" name="resumeFromBeginning">
              <TryStep id="_1tv+" name="resume">
                <ProcedureCall id="_1tv-" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tw0" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tw1" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tw2"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tw3" regexp="true">
                  <text>mid_stack5.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tw4"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tw5"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1tw6" name="stepReturnFrom5">
              <TryStep id="_1tw7" name="stepReturn">
                <ProcedureCall id="_1tw8" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tw9" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1twA" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1twB"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1twC" regexp="true">
                  <text>mid_stack4.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1twD"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1twE"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1twF" name="stepReturnFrom4">
              <TryStep id="_1twG" name="stepReturn">
                <ProcedureCall id="_1twH" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1twI" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1twJ" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1twK"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1twL" regexp="true">
                  <text>mid_stack3.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1twM"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1twN"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1twO" name="stepReturnFrom3">
              <TryStep id="_1twP" name="stepReturn">
                <ProcedureCall id="_1twQ" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1twR" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1twS" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1twT"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1twU" regexp="true">
                  <text>mid_stack2.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1twV"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1twW"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1twX" name="stepReturnFrom2">
              <TryStep id="_1twY" name="stepReturn">
                <ProcedureCall id="_1twZ" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1twa" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1twb" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1twc"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1twd" regexp="true">
                  <text>mid_stack1.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1twe"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1twf"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1twg" name="stepReturnFrom1">
              <TryStep id="_1twh" name="stepReturn">
                <ProcedureCall id="_1twi" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1twj" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1twk" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1twl"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1twm" regexp="true">
                  <text>mthread.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1twn"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1two"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1twp" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1twq" name="stepOver">
            <comment>run-control : step over
</comment>
            <ProcedureCall id="_1twr" procedure="uiClickRse"/>
            <ProcedureCall id="_1tws" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1twt" name="computeFile">
              <code>import os

midStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1twu" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(midStackFile)</variable>
              <variable name="debuggeeLineNum">680</variable>
            </ProcedureCall>
            <TestStep id="_1twv" name="stopAtLine680">
              <TryStep id="_1tww" name="resume">
                <ProcedureCall id="_1twx" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1twy" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1twz" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1tw+" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tw-"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tx0">
                  <text>mid_stack4() - mid_stack.c:680</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tx1"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1tx2"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1tx3" name="stepOver">
              <TryStep id="_1tx4" name="stepOver">
                <ProcedureCall id="_1tx5" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1tx6" postdelay="3000"
                               procedure="dbgViewStepOver"/>
                <ProcedureCall id="_1tx7" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1tx8"
                                 regexp="true">
                  <text>.*Stopped - Step End.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1tx9">
                  <text>mid_stack4() - mid_stack.c:682</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1txA"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1txB"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1txC" name="stepOver">
              <TryStep id="_1txD" name="stepOver">
                <ProcedureCall id="_1txE" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1txF" postdelay="3000"
                               procedure="dbgViewStepOver"/>
                <ProcedureCall id="_1txG" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1txH"
                                 regexp="true">
                  <text>.*Stopped - Step End.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1txI">
                  <text>mid_stack3() - mid_stack.c:514</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1txJ"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1txK"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1txL" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1txM" name="stepInto">
            <comment>run-control : step into
</comment>
            <ProcedureCall id="_1txN" procedure="uiClickRse"/>
            <ProcedureCall id="_1txO" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1txP" name="computeFile">
              <code>import os

midStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1txQ" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(midStackFile)</variable>
              <variable name="debuggeeLineNum">680</variable>
            </ProcedureCall>
            <TestStep id="_1txR" name="stopAtLine680">
              <TryStep id="_1txS" name="resume">
                <ProcedureCall id="_1txT" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1txU" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1txV" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1txW"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1txX">
                  <text>mid_stack4() - mid_stack.c:680</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1txY"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1txZ"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1txa" name="stepInto">
              <TryStep id="_1txb" name="stepInto">
                <ProcedureCall id="_1txc" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1txd" postdelay="3000"
                               procedure="dbgViewStepInto"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1txe"
                                 regexp="true">
                  <text>.*Stopped - Step End.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1txf" regexp="true">
                  <text>mid_stack5.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1txg"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1txh"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1txi" name="stepInto">
              <TryStep id="_1txj" name="stepInto">
                <ProcedureCall id="_1txk" postdelay="3000"
                               procedure="dbgViewStepInto"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1txl"
                                 regexp="true">
                  <text>.*Stopped - Step End.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1txm" regexp="true">
                  <text>mid_stack5.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/1"
                                 id="_1txn" regexp="true">
                  <text>mid_stack4.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1txo"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1txp"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1txq" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1txr" name="scopeBreakpoint">
            <comment>scope breakpoint test
</comment>
            <TestStep id="_1txs" name="resumeFromBeginning">
              <TryStep id="_1txt" name="resume">
                <ProcedureCall id="_1txu" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1txv" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1txw" postdelay="3000"
                               procedure="dbgViewResume"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1txx"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1txy"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1txz"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1tx+"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1tx-"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1ty0"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1ty1" procedure="uiClickRse"/>
            <ProcedureCall id="_1ty2" procedure="uiClickBreakpointView"/>
            <TestStep id="_1ty3" name="bpExpSharedCode">
              <TryStep id="_1ty4" name="add sharedCode" postdelay="3000">
                <SelectionEventStep client="$(client)"
                                    component="menu-org.eclipse.ui.run"
                                    event="SELECTION" id="_1ty5"/>
                <SelectionEventStep client="$(client)"
                                    component="menu-org.eclipse.ui.run-dfeBreakpoints"
                                    event="SELECTION" id="_1ty6"/>
                <SelectionEventStep client="$(client)"
                                    component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                                    event="SELECTION" id="_1ty7"/>
                <ComponentWaiter client="$(client)"
                                 component="ExpressionBreakpointDialog"
                                 id="_1ty8"/>
                <SelectionEventStep client="$(client)"
                                    component="ExpressionBreakpointDialog.tabbed@General"
                                    event="SELECTION" id="_1ty9"/>
                <MouseEventStep clicks="1" client="$(client)"
                                component="tabGeneral2.text"
                                event="MOUSE_MPRC" id="_1tyA" modifiers="16"
                                x="19" y="5"/>
                <TextInputStep clear="true" client="$(client)"
                               component="tabGeneral2.text" id="_1tyB"
                               postdelay="1000">
                  <text>sharedCode</text>
                </TextInputStep>
                <MouseEventStep clicks="1" client="$(client)"
                                component="buttonOk11" event="MOUSE_MPRC"
                                id="_1tyC" modifiers="16" postdelay="1000"
                                predelay="1000"/>
                <ProcedureCall id="_1tyD" postdelay="2000"
                               procedure="uiClickBreakpointView"/>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1tyE" regexp="true">
                  <text>sharedCode.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1tyF"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1tyG" name="dbgViewShareCodeStop">
              <WhileSequence id="_1tyH" postdelay="1000" test="1">
                <TryStep id="_1tyI">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/1/0"
                                   id="_1tyJ" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1tyK"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1tyL"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1tyM"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </WhileSequence>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1/0" id="_1tyN"
                               regexp="true">
                <text>sharedCode().*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1/1" id="_1tyO"
                               regexp="true">
                <text>printThreadInfo().*</text>
              </CheckStringStep>
              <WhileSequence id="_1tyP" postdelay="1000" test="2">
                <TryStep id="_1tyQ">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/2/0"
                                   id="_1tyR" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1tyS"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1tyT"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1tyU"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </WhileSequence>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2/0" id="_1tyV"
                               regexp="true">
                <text>sharedCode().*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2/1" id="_1tyW"
                               regexp="true">
                <text>printThreadInfo().*</text>
              </CheckStringStep>
              <ProcedureCall id="_1tyX" procedure="uiCheckSharedCodeFrame"/>
            </TestStep>
            <TestStep id="_1tyY" name="threadSpecificBreakpoint">
              <comment>thread specific breakpoint</comment>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/1/0"
                              event="MOUSE_MPRC" id="_1tyZ" modifiers="16"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Breakpoints.tree&amp;/0"
                              event="MOUSE_MPRC" id="_1tya" modifiers="4"
                              popup="true" postdelay="1000"/>
              <SelectionEventStep client="$(client)"
                                  component="menu-com.windriver.ide.debug.ui.restrictBreakpointScopeAction"
                                  event="SELECTION" id="_1tyb"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/1/0"
                              event="MOUSE_MPRC" id="_1tyc" modifiers="16"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                              event="MOUSE_MPRC" id="_1tyd" modifiers="16"/>
              <WhileSequence id="_1tye" postdelay="1000" test="1">
                <TryStep id="_1tyf">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/1/0"
                                   id="_1tyg" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1tyh"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1tyi"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1tyj"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </WhileSequence>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1/0" id="_1tyk"
                               regexp="true">
                <text>sharedCode().*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1/1" id="_1tyl"
                               regexp="true">
                <text>printThreadInfo().*</text>
              </CheckStringStep>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/2/0"
                              event="MOUSE_MPRC" id="_1tym" modifiers="16"
                              postdelay="1000"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                              event="MOUSE_MPRC" id="_1tyn" modifiers="16"/>
              <TryStep id="_1tyo"
                       name="if the 2nd thread could hit the breakpoint specific for the 1st in 15 seconds">
                <ComponentWaiter client="$(client)"
                                 component="Debug.tree&amp;/0/0/2/0"
                                 id="_1typ"/>
                <CatchSequence exception="IndexNotFoundException" id="_1tyq"
                               maxerror="0" name="success">
                  <ProcedureCall id="_1tyr"
                                 procedure="qfs.run-log.logMessage">
                    <variable name="message">scope breakpoint success</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1tys"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title"/>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                </CatchSequence>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1tyt" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1tyu" name="debugSymbolBrowser">
            <comment>debug symbol browser view test
</comment>
            <ProcedureCall id="_1tyv" procedure="uiClickDebugSymbolBrowser"/>
            <ProcedureCall id="_1tyw" procedure="symbolSharedCode"/>
            <ProcedureCall id="_1tyx" procedure="symbolMidStack"/>
          </TestCase>
          <TestCase id="_1tyy" name="sourceView">
            <comment>source view test

</comment>
            <ProcedureCall id="_1vqj" procedure="uiClickDebugSymbolBrowser"/>
            <ProcedureCall id="_1vqk" procedure="symbolMidStack"/>
            <ProcedureCall id="_1vql" procedure="uiClickRse"/>
          </TestCase>
          <TestCase id="_1ty-" name="debugView">
            <comment>debug view test
debug view should show the correct stackframes when different breakpoints are hit

</comment>
            <ProcedureCall id="_1tz0" procedure="uiClickRse"/>
            <ProcedureCall id="_1tz1" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1tz2" procedure="bpExp1"/>
            <ProcedureCall id="_1tz3" procedure="bpExp2"/>
            <ProcedureCall id="_1tz4" procedure="bpExp3"/>
            <ProcedureCall id="_1tz5" procedure="bpExp4"/>
            <ProcedureCall id="_1tz6" procedure="bpExp5"/>
            <ProcedureCall id="_1tz7" procedure="uiCheckFrame1"/>
            <ProcedureCall id="_1tz8" procedure="uiCheckFrame2"/>
            <ProcedureCall id="_1tz9" procedure="uiCheckFrame3"/>
            <ProcedureCall id="_1tzA" procedure="uiCheckFrame4"/>
            <ProcedureCall id="_1tzB" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1tzC" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1tzD" name="variableView">
            <comment>variable view test
</comment>
            <TestStep id="_1tzE" name="dbgMid5Stop">
              <ProcedureCall id="_1tzF" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tzG" procedure="bpExpMid5"/>
              <ProcedureCall id="_1tzH" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1tzI" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1tzJ" procedure="uiClickVariableView"/>
            <ProcedureCall id="_1tzK" predelay="1000"
                           procedure="vxFrameCheck"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0/1"
                            event="MOUSE_MPRC" id="_1tzL" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1tzM" procedure="vxFrameCheck"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0/2"
                            event="MOUSE_MPRC" id="_1tzN" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1tzO" procedure="vxFrameCheck"/>
          </TestCase>
          <TestCase id="_1tzP" name="expressionView">
            <comment>expression view test
</comment>
            <TestStep id="_1tzQ" name="dbgMid5Stop">
              <ProcedureCall id="_1tzR" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tzS" procedure="bpExpMid5"/>
              <ProcedureCall id="_1tzT" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1tzU" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1tzV" procedure="uiShowExpressionView"/>
            <ProcedureCall id="_1tzW" local="true" procedure="expAddwatch">
              <variable name="item">q</variable>
            </ProcedureCall>
            <ProcedureCall id="_1tzX" local="true" procedure="expAddwatch">
              <variable name="item">rectest</variable>
            </ProcedureCall>
            <ProcedureCall id="_1tzY" local="true" procedure="expAddwatch">
              <variable name="item">s1</variable>
            </ProcedureCall>
            <ProcedureCall id="_1tzZ" postdelay="1000"
                           procedure="expExpandItems"/>
            <ProcedureCall id="_1tza" predelay="1000"
                           procedure="expCollapsetems"/>
            <ProcedureCall id="_1tzb" procedure="expDelAll"/>
            <ProcedureCall id="_1tzc" procedure="uiCloseExpressionView"/>
          </TestCase>
          <TestCase id="_1tzd" name="registerView">
            <comment>register view test
</comment>
            <TestStep id="_1tze" name="dbgMid5Stop">
              <ProcedureCall id="_1tzf" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tzg" procedure="bpExpMid5"/>
              <ProcedureCall id="_1tzh" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1tzi" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1tzj" procedure="uiShowRegisterView"/>
            <ProcedureCall id="_1tzk" procedure="regExpandItems"/>
            <ProcedureCall id="_1tzl" procedure="regCollapsetems"/>
          </TestCase>
          <TestCase id="_1tzm" name="memoryBrowserView">
            <comment>memory browser view test
</comment>
            <TestStep id="_1tzn" name="dbgMid5Stop">
              <ProcedureCall id="_1tzo" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tzp" procedure="bpExpMid5"/>
              <ProcedureCall id="_1tzq" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1tzr" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1tzs" postdelay="1000"
                           procedure="uiShowMemoryBrowserView"/>
            <TextInputStep clear="true" client="$(client)"
                           component="Memory_Browser2.combo" id="_1tzt"
                           postdelay="1000">
              <text>&amp;p_q</text>
            </TextInputStep>
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonGo2" event="MOUSE_MPRC"
                            id="_1tzu" modifiers="16" postdelay="1000"/>
            <ProcedureCall id="_1tzv" postdelay="2000"
                           procedure="memBrowserAddItem"/>
            <ProcedureCall id="_1tzw" procedure="uiCloseMemoryBrowserView"/>
          </TestCase>
          <TestCase id="_1tzx" name="openDebugCmdShell">
            <comment>debug view "Debug Command Shell" test
</comment>
            <TestStep id="_1tzy" name="dbgMid5Stop">
              <ProcedureCall id="_1tzz" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1tz+" procedure="bpExpMid5"/>
              <ProcedureCall id="_1tz-" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1t+0" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1t+1" procedure="uiOpenDbgShell"/>
            <ProcedureCall id="_1t+2" procedure="dbgCmdErrorCheck"/>
          </TestCase>
          <TestCase id="_1t+3" name="terminateAndRelaunch">
            <comment>run-control terminate and relaunch 
</comment>
            <ProcedureCall id="_1t+4" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1t+5" procedure="bpExpMid5"/>
            <TestStep id="_1t+6" name="terminateAndRelaunch">
              <RepeatSequence count="3" id="_1t+7" name="stepLoop">
                <ProcedureCall id="_1t+8" procedure="uiCheckFrame5"/>
                <ProcedureCall id="_1t+9"
                               procedure="dbgViewTerminateRelaunch"/>
                <ProcedureCall id="_1t+A" procedure="dbgStopAtMain"/>
              </RepeatSequence>
            </TestStep>
            <ProcedureCall id="_1t+B" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1ubg" name="gutterBreakpoint">
            <ProcedureCall id="_1ubi" procedure="uiClickRse"/>
            <ProcedureCall id="_1ubj" procedure="uiClickBreakpointView"/>
            <TestStep id="_1ubk" name="gutterBreakpoint">
              <comment>Breakpoint view : line breakpoint add and delete</comment>
              <ServerScriptStep id="_1ubm" name="computeFile">
                <code>import os

mthreadStackFile = os.path.join(r'$(platformDir)','mthread_stack.c')

rc.setLocal('mthreadStackFile',mthreadStackFile)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1ubn" postdelay="2000"
                             procedure="bpLineAdd">
                <variable name="debuggeeFile">$(mthreadStackFile)</variable>
                <variable name="debuggeeLineNum">224</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1ubo">
                <text>mthread_stack.c:224 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <TestStep id="_1ubp" name="resumeFromBeginning">
                <TryStep id="_1ubq" name="resume">
                  <ProcedureCall id="_1ubr" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1ubs" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ubt" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ubu" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ubv">
                    <text>mthread() - mthread_stack.c:224</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1ubw"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1ubx"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <ProcedureCall id="_1ubh" procedure="bpGutter">
                <variable name="lineNum">228</variable>
                <variable name="keyword">copy_process</variable>
                <variable name="characteristic">['','tidptr']</variable>
              </ProcedureCall>
              <ProcedureCall id="_1uc9" procedure="bpGutter">
                <variable name="lineNum">232</variable>
                <variable name="keyword">copy_process</variable>
                <variable name="characteristic">['','tidptr']</variable>
              </ProcedureCall>
              <ProcedureCall id="_1ucA" procedure="bpGutter">
                <variable name="lineNum">240</variable>
                <variable name="keyword">copy_process</variable>
                <variable name="characteristic">['','tidptr']</variable>
              </ProcedureCall>
              <ProcedureCall id="_1ucB" procedure="bpGutter">
                <variable name="lineNum">245</variable>
                <variable name="keyword">copy_process</variable>
                <variable name="characteristic">['','tidptr']</variable>
              </ProcedureCall>
              <ProcedureCall id="_1ucC" procedure="bpGutter">
                <variable name="lineNum">253</variable>
                <variable name="keyword">copy_process</variable>
                <variable name="characteristic">['','tidptr']</variable>
              </ProcedureCall>
              <ProcedureCall id="_1ucD" procedure="bpGutter">
                <variable name="lineNum">256</variable>
                <variable name="keyword">copy_process</variable>
                <variable name="characteristic">['','tidptr']</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/1" id="_1ubz">
                <text>mthread_stack.c:228 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/2" id="_1ucE">
                <text>mthread_stack.c:232 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/3" id="_1ucF">
                <text>mthread_stack.c:240 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/4" id="_1ucw">
                <text>mthread_stack.c:245 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/5" id="_1ucG">
                <text>mthread_stack.c:253 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/6" id="_1ucH">
                <text>mthread_stack.c:256 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <TestStep id="_1ub+" name="resume">
                <TryStep id="_1ub-" name="resume228">
                  <ProcedureCall id="_1uc0" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1uc1" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1uc2" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1uc3" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1uc4">
                    <text>mthread() - mthread_stack.c:228</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1uc5"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1uc6"
                                 maxerror="2" name="ignore"/>
                </TryStep>
                <TryStep id="_1ucI" name="resume232">
                  <ProcedureCall id="_1ucJ" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1ucK" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ucL" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ucM" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ucN">
                    <text>mthread() - mthread_stack.c:232</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1ucO"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1ucP"
                                 maxerror="2" name="ignore"/>
                </TryStep>
                <TryStep id="_1ucQ" name="resume240">
                  <ProcedureCall id="_1ucR" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1ucS" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ucT" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ucU" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ucV">
                    <text>mthread() - mthread_stack.c:240</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1ucW"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1ucX"
                                 maxerror="2" name="ignore"/>
                </TryStep>
                <TryStep id="_1ucY" name="resume245">
                  <ProcedureCall id="_1ucZ" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1uca" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ucb" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ucc" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ucd">
                    <text>mthread() - mthread_stack.c:245</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1uce"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1ucf"
                                 maxerror="2" name="ignore"/>
                </TryStep>
                <TryStep id="_1ucg" name="resume253">
                  <ProcedureCall id="_1uch" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1uci" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ucj" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1uck" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1ucl">
                    <text>mthread() - mthread_stack.c:253</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1ucm"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1ucn"
                                 maxerror="2" name="ignore"/>
                </TryStep>
                <TryStep id="_1uco" name="resume256">
                  <ProcedureCall id="_1ucp" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1ucq" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1ucr" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1ucs" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1uct">
                    <text>mthread() - mthread_stack.c:256</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1ucu"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1ucv"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <ProcedureCall id="_1uc7" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
        </TestSet>
        <TestSet id="_1t+C" name="rtp">
          <variable name="debuggee">mthread_stack</variable>
          <DependencyReference id="_1t+D" reference="wb.vxWdbRpcLaunchRtp">
            <variable name="vxeFile">$(mthreadFile)</variable>
          </DependencyReference>
          <TestCase id="_1t+E" name="resumeAndSuspend">
            <comment>run control test :
resume
suspend
</comment>
            <TestStep id="_1t+F" name="resumeFromBeginning">
              <TryStep id="_1t+G" name="resume">
                <ProcedureCall id="_1t+H" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1t+I" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1t+J" postdelay="3000"
                               procedure="dbgViewResume"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1t+K"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1t+L"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1t+M"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1t+N"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1t+O"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1t+P"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1t+Q" name="suspendOnlyOneThread">
              <comment>suspend only the 3rd thread</comment>
              <TryStep id="_1t+R" name="suspendOneThread">
                <ProcedureCall id="_1t+S" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1t+T" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/2</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1t+U" postdelay="3000"
                               procedure="dbgViewSuspend"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1t+V"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1t+W"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1t+X"
                                 regexp="true">
                  <text>.*Stopped - User Request.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1t+Y"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1t+Z"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1t+a"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1t+b" name="resumeOnlyOneThread">
              <comment>resume only the 2nd thread</comment>
              <TryStep id="_1t+c" name="resume">
                <ProcedureCall id="_1t+d" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1t+e" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/2</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1t+f" postdelay="3000"
                               procedure="dbgViewResume"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1t+g"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1t+h"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1t+i"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1t+j"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1t+k"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1t+l"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
          </TestCase>
          <TestCase id="_1t+m" name="lineBreakpoint">
            <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1t+n" procedure="uiClickRse"/>
            <ProcedureCall id="_1t+o" procedure="uiClickBreakpointView"/>
            <TestStep id="_1t+p" name="lineBreakpoint">
              <comment>Breakpoint view : line breakpoint add and delete</comment>
              <ProcedureCall id="_1t+q" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1t+r" postdelay="2000"
                             procedure="bpLineAdd">
                <variable name="debuggeeFile">$(rtpMainSrc)</variable>
                <variable name="debuggeeLineNum">224</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1t+s">
                <text>mthread_stack.c:224 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <TestStep id="_1t+t" name="resumeFromBeginning">
                <TryStep id="_1t+u" name="resume">
                  <ProcedureCall id="_1t+v" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1t+w" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1t+x" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1t+y" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1t+z">
                    <text>main() - mthread_stack.c:224</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1t++"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1t+-"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <ProcedureCall id="_1t-0" postdelay="2000"
                             procedure="bpLineAdd">
                <variable name="debuggeeFile">$(rtpMainSrc)</variable>
                <variable name="debuggeeLineNum">228</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/1" id="_1t-1">
                <text>mthread_stack.c:228 (*Planted*, Restricted Scope)</text>
              </CheckStringStep>
              <TestStep id="_1t-2" name="resume">
                <TryStep id="_1t-3" name="resume">
                  <ProcedureCall id="_1t-4" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1t-5" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1t-6" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1t-7" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1t-8">
                    <text>main() - mthread_stack.c:228</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1t-9"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1t-A"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <ProcedureCall id="_1t-B" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
          <TestCase id="_1t-C" name="temporyBreakpoint">
            <comment>tempory breakpoint

</comment>
            <TestStep id="_1t-D" name="temporyBreakpoint">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1t-E" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1t-F" postdelay="3000"
                             procedure="bpLineTempory">
                <variable name="debuggeeFile">$(rtpMainSrc)</variable>
                <variable name="debuggeeLineNum">224</variable>
              </ProcedureCall>
              <TryStep id="_1u8+" name="checkTp">
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1t-G" regexp="true">
                  <text>.*Temporary.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1u8-"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1t-H" name="resumeFromBeginning">
                <TryStep id="_1t-I" name="resume">
                  <ProcedureCall id="_1t-J" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1t-K" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1t-L" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1t-M" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1t-N">
                    <text>main() - mthread_stack.c:224</text>
                  </CheckStringStep>
                  <TryStep id="_1t-O" name="waitForTemoryBreakpointDelete">
                    <ComponentWaiter absence="true" client="$(client)"
                                     component="Breakpoints.tree&amp;/0"
                                     id="_1t-P" timeout="5000"/>
                    <CatchSequence exception="IndexFoundException" id="_1t-Q"
                                   maxerror="2" name="error"/>
                  </TryStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1t-R"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1t-S"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <ProcedureCall id="_1t-T" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1t-U" name="conditionBreakpoint">
            <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
            <TestStep id="_1t-V" name="conditionBreakpoint">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1t-W" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1t-X" postdelay="1000"
                             procedure="bpLineCondition">
                <variable name="debuggeeFile">$(rtpMainSrc)</variable>
                <variable name="debuggeeLineNum">317</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1t-Y"
                               regexp="true">
                <text>.*Condition=t==1.*</text>
              </CheckStringStep>
              <TestStep id="_1t-Z" name="resume">
                <TryStep id="_1t-a" name="resume">
                  <ProcedureCall id="_1t-b" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1t-c" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1t-d" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1t-e" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1t-f">
                    <text>main() - mthread_stack.c:317</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/1"
                                   id="_1t-g" regexp="true">
                    <text>.*Running.*</text>
                  </CheckStringStep>
                  <TryStep id="_1t-h">
                    <ComponentWaiter client="$(client)"
                                     component="Debug.tree&amp;/0/0/2"
                                     id="_1t-i" timeout="2000"/>
                    <CatchSequence exception="IndexFoundException" id="_1t-j"
                                   maxerror="2"/>
                    <CatchSequence exception="IndexNotFoundException"
                                   id="_1t-k" maxerror="0" name="success"/>
                  </TryStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1t-l"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1t-m"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <ProcedureCall id="_1t-n" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1t-o" name="skipBreakpoint">
            <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
            <TestStep id="_1t-p" name="skipBreakpoint">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1t-q" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1t-r" postdelay="1000"
                             procedure="bpLineSkip">
                <variable name="debuggeeFile">$(rtpMidSrc)</variable>
                <variable name="debuggeeLineNum">72</variable>
                <variable name="skipNum">3</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1t-s"
                               regexp="true">
                <text>.*Planted.*Skip Count=3.*</text>
              </CheckStringStep>
              <TestStep id="_1t-t" name="resume">
                <TryStep id="_1t-u" name="resume">
                  <ProcedureCall id="_1t-v" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1t-w" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1t-x" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1t-y" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <ProcedureCall id="_1t-z" procedure="uiClickVariableView"/>
                  <CheckStringStep client="$(client)"
                                   component="WorkbenchWindow.tree2@Value@/i"
                                   id="_1t-+">
                    <text>3 </text>
                  </CheckStringStep>
                  <ProcedureCall id="_1t--"
                                 procedure="uiClickExpressionView"/>
                  <ProcedureCall id="_1u00" procedure="expAddwatch">
                    <variable name="item">i</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Expressions.tree@Value@/i"
                                   id="_1u01">
                    <text>3 </text>
                  </CheckStringStep>
                  <ProcedureCall id="_1u02"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title"/>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1u03" procedure="expDelAll"/>
                  <ProcedureCall id="_1u04"
                                 procedure="uiCloseExpressionView"/>
                  <CatchSequence exception="IndexNotFoundException" id="_1u05"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1u06"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <ProcedureCall id="_1u07" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1u08" name="expressionBreakpoint">
            <comment>expression breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1u09" procedure="uiClickRse"/>
            <ProcedureCall id="_1u0A" procedure="uiClickBreakpointView"/>
            <TestStep id="_1u0B" name="expressionBreakpoint">
              <comment>Breakpoint view : expression breakpoint add and delete</comment>
              <ProcedureCall id="_1u0C" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u0D" procedure="bpExp1"/>
              <ProcedureCall id="_1u0E" procedure="bpExp2"/>
              <ProcedureCall id="_1u0F" procedure="bpExp3"/>
              <ProcedureCall id="_1u0G" procedure="bpExp4"/>
              <ProcedureCall id="_1u0H" procedure="bpExp5"/>
              <ProcedureCall id="_1u0I" procedure="uiCheckFrame1"/>
              <ProcedureCall id="_1u0J" procedure="uiCheckFrame2"/>
              <ProcedureCall id="_1u0K" procedure="uiCheckFrame3"/>
              <ProcedureCall id="_1u0L" procedure="uiCheckFrame4"/>
              <ProcedureCall id="_1u0M" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1u0N" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
          <TestCase id="_1u0O" name="prologBreakpoint">
            <comment>1, tempory breakpoint
2, condition
3, ignore
4, 
</comment>
            <ProcedureCall id="_1u0P" procedure="uiClickRse"/>
            <ProcedureCall id="_1u0Q" procedure="uiClickBreakpointView"/>
            <TestStep id="_1u0R" name="prologBreakpoint1">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1u0S" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u0T" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack1</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/0" id="_1u0U"
                               predelay="1000" regexp="true">
                <text>mid_stack1.*</text>
              </CheckStringStep>
              <TestStep id="_1u0V" name="resume">
                <TryStep id="_1u0W" name="resume">
                  <ProcedureCall id="_1u0X" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1u0Y" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1u0Z" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1u0a" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1u0b">
                    <text>mid_stack1() - mid_stack.c:40</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1u0c"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1u0d"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1u0e" name="prologBreakpoint2">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1u0f" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u0g" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack2</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/1" id="_1u0h"
                               predelay="1000" regexp="true">
                <text>mid_stack2.*</text>
              </CheckStringStep>
              <TestStep id="_1u0i" name="resume">
                <TryStep id="_1u0j" name="resume">
                  <ProcedureCall id="_1u0k" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1u0l" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1u0m" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1u0n" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1u0o">
                    <text>mid_stack2() - mid_stack.c:109</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1u0p"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1u0q"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1u0r" name="prologBreakpoint3">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1u0s" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u0t" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack3</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/2" id="_1u0u"
                               predelay="1000" regexp="true">
                <text>mid_stack3.*</text>
              </CheckStringStep>
              <TestStep id="_1u0v" name="resume">
                <TryStep id="_1u0w" name="resume">
                  <ProcedureCall id="_1u0x" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1u0y" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1u0z" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1u0+" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1u0-">
                    <text>mid_stack3() - mid_stack.c:355</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1u10"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1u11"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1u12" name="prologBreakpoint4">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1u13" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u14" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack4</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/3" id="_1u15"
                               predelay="1000" regexp="true">
                <text>mid_stack4.*</text>
              </CheckStringStep>
              <TestStep id="_1u16" name="resume">
                <TryStep id="_1u17" name="resume">
                  <ProcedureCall id="_1u18" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1u19" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1u1A" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1u1B" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1u1C">
                    <text>mid_stack4() - mid_stack.c:522</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1u1D"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1u1E"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <TestStep id="_1u1F" name="prologBreakpoint5">
              <comment>Breakpoint view : tempory</comment>
              <ProcedureCall id="_1u1G" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u1H" procedure="bpExpProlog">
                <variable name="expressionBp">mid_stack5</variable>
              </ProcedureCall>
              <CheckStringStep client="$(client)"
                               component="Breakpoints.tree&amp;/4" id="_1u1I"
                               predelay="1000" regexp="true">
                <text>mid_stack5.*</text>
              </CheckStringStep>
              <TestStep id="_1u1J" name="resume">
                <TryStep id="_1u1K" name="resume">
                  <ProcedureCall id="_1u1L" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1u1M" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1u1N" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1u1O" regexp="true">
                    <text>.*Stopped - Breakpoint Hit.*</text>
                  </CheckStringStep>
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/0/0"
                                   id="_1u1P">
                    <text>mid_stack5() - mid_stack.c:690</text>
                  </CheckStringStep>
                  <CatchSequence exception="IndexNotFoundException" id="_1u1Q"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1u1R"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
            </TestStep>
            <ProcedureCall id="_1u1S" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1u1T" name="stepReturn">
            <comment>run-control step return

</comment>
            <ProcedureCall id="_1u1U" procedure="uiClickRse"/>
            <ProcedureCall id="_1u1V" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1u1W" procedure="bpExpMid5"/>
            <TestStep id="_1u1X" name="resumeFromBeginning">
              <TryStep id="_1u1Y" name="resume">
                <ProcedureCall id="_1u1Z" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u1a" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1u1b" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u1c"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u1d" regexp="true">
                  <text>mid_stack5.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u1e"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u1f"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u1g" name="stepReturnFrom5">
              <TryStep id="_1u1h" name="stepReturn">
                <ProcedureCall id="_1u1i" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u1j" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1u1k" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u1l"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u1m" regexp="true">
                  <text>mid_stack4.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u1n"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u1o"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u1p" name="stepReturnFrom4">
              <TryStep id="_1u1q" name="stepReturn">
                <ProcedureCall id="_1u1r" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u1s" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1u1t" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u1u"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u1v" regexp="true">
                  <text>mid_stack3.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u1w"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u1x"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u1y" name="stepReturnFrom3">
              <TryStep id="_1u1z" name="stepReturn">
                <ProcedureCall id="_1u1+" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u1-" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1u20" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u21"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u22" regexp="true">
                  <text>mid_stack2.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u23"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u24"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u25" name="stepReturnFrom2">
              <TryStep id="_1u26" name="stepReturn">
                <ProcedureCall id="_1u27" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u28" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1u29" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u2A"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u2B" regexp="true">
                  <text>mid_stack1.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u2C"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u2D"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u2E" name="stepReturnFrom1">
              <TryStep id="_1u2F" name="stepReturn">
                <ProcedureCall id="_1u2G" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u2H" postdelay="3000"
                               procedure="dbgViewStepReturn"/>
                <ProcedureCall id="_1u2I" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u2J"
                                 regexp="true">
                  <text>.*Stopped - Function Finished.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u2K" regexp="true">
                  <text>main.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u2L"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u2M"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1u2N" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1u2O" name="stepOver">
            <comment>run-control : step over
</comment>
            <ProcedureCall id="_1u2P" procedure="uiClickRse"/>
            <ProcedureCall id="_1u2Q" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1u2R" name="computeFile">
              <code>import os

midStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1u2S" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(rtpMidSrc)</variable>
              <variable name="debuggeeLineNum">680</variable>
            </ProcedureCall>
            <TestStep id="_1u2T" name="stopAtLine680">
              <TryStep id="_1u2U" name="resume">
                <ProcedureCall id="_1u2V" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u2W" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u2X" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1u2Y" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u2Z"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u2a">
                  <text>mid_stack4() - mid_stack.c:680</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u2b"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u2c"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u2d" name="stepOver">
              <TryStep id="_1u2e" name="stepOver">
                <ProcedureCall id="_1u2f" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u2g" postdelay="3000"
                               procedure="dbgViewStepOver"/>
                <ProcedureCall id="_1u2h" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u2i"
                                 regexp="true">
                  <text>.*Stopped - Step End.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u2j">
                  <text>mid_stack4() - mid_stack.c:682</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u2k"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u2l"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u2m" name="stepOver">
              <TryStep id="_1u2n" name="stepOver">
                <ProcedureCall id="_1u2o" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u2p" postdelay="3000"
                               procedure="dbgViewStepOver"/>
                <ProcedureCall id="_1u2q" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u2r"
                                 regexp="true">
                  <text>.*Stopped - Step End.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u2s">
                  <text>mid_stack3() - mid_stack.c:514</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u2t"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u2u"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1u2v" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1u2w" name="stepInto">
            <comment>run-control : step into
</comment>
            <ProcedureCall id="_1u2x" procedure="uiClickRse"/>
            <ProcedureCall id="_1u2y" procedure="uiClickBreakpointView"/>
            <ServerScriptStep id="_1u2z" name="computeFile">
              <code>import os

midStackFile = os.path.join(r'$(platformDir)','mid_stack.c')

rc.setLocal('midStackFile',midStackFile)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1u2+" postdelay="2000" procedure="bpLineAdd">
              <variable name="debuggeeFile">$(rtpMidSrc)</variable>
              <variable name="debuggeeLineNum">680</variable>
            </ProcedureCall>
            <TestStep id="_1u2-" name="stopAtLine680">
              <TryStep id="_1u30" name="resume">
                <ProcedureCall id="_1u31" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u32" postdelay="3000"
                               procedure="dbgViewResume"/>
                <ProcedureCall id="_1u33" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u34"
                                 regexp="true">
                  <text>.*Stopped - Breakpoint Hit.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u35">
                  <text>mid_stack4() - mid_stack.c:680</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u36"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u37"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u38" name="stepInto">
              <TryStep id="_1u39" name="stepInto">
                <ProcedureCall id="_1u3A" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u3B" postdelay="3000"
                               procedure="dbgViewStepInto"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u3C"
                                 regexp="true">
                  <text>.*Stopped - Step End.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u3D" regexp="true">
                  <text>mid_stack5.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u3E"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u3F"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u3G" name="stepInto">
              <TryStep id="_1u3H" name="stepInto">
                <ProcedureCall id="_1u3I" postdelay="3000"
                               procedure="dbgViewStepInto"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u3J"
                                 regexp="true">
                  <text>.*Stopped - Step End.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1u3K" regexp="true">
                  <text>mid_stack5.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/1"
                                 id="_1u3L" regexp="true">
                  <text>mid_stack4.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u3M"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u3N"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1u3O" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1u3P" name="scopeBreakpoint">
            <comment>scope breakpoint test
</comment>
            <TestStep id="_1u3Q" name="resumeFromBeginning">
              <TryStep id="_1u3R" name="resume">
                <ProcedureCall id="_1u3S" postdelay="1000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u3T" postdelay="1000"
                               procedure="qfs.swt.tree.selectNode">
                  <variable name="id">Debug.tree&amp;/0/0/0</variable>
                  <variable name="node"/>
                  <variable name="separator"/>
                </ProcedureCall>
                <ProcedureCall id="_1u3U" postdelay="3000"
                               procedure="dbgViewResume"/>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1u3V"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/1" id="_1u3W"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/2" id="_1u3X"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/3" id="_1u3Y"
                                 regexp="true">
                  <text>.*Running.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1u3Z"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1u3a"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1u3b" procedure="uiClickRse"/>
            <ProcedureCall id="_1u3c" procedure="uiClickBreakpointView"/>
            <TestStep id="_1u3d" name="bpExpSharedCode">
              <TryStep id="_1u3e" name="add sharedCode" postdelay="3000">
                <SelectionEventStep client="$(client)"
                                    component="menu-org.eclipse.ui.run"
                                    event="SELECTION" id="_1u3f"/>
                <SelectionEventStep client="$(client)"
                                    component="menu-org.eclipse.ui.run-dfeBreakpoints"
                                    event="SELECTION" id="_1u3g"/>
                <SelectionEventStep client="$(client)"
                                    component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                                    event="SELECTION" id="_1u3h"/>
                <ComponentWaiter client="$(client)"
                                 component="ExpressionBreakpointDialog"
                                 id="_1u3i"/>
                <SelectionEventStep client="$(client)"
                                    component="ExpressionBreakpointDialog.tabbed@General"
                                    event="SELECTION" id="_1u3j"/>
                <MouseEventStep clicks="1" client="$(client)"
                                component="tabGeneral2.text"
                                event="MOUSE_MPRC" id="_1u3k" modifiers="16"
                                x="19" y="5"/>
                <TextInputStep clear="true" client="$(client)"
                               component="tabGeneral2.text" id="_1u3l"
                               postdelay="1000">
                  <text>sharedCode</text>
                </TextInputStep>
                <MouseEventStep clicks="1" client="$(client)"
                                component="buttonOk11" event="MOUSE_MPRC"
                                id="_1u3m" modifiers="16" postdelay="1000"
                                predelay="1000"/>
                <ProcedureCall id="_1u3n" postdelay="2000"
                               procedure="uiClickBreakpointView"/>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1u3o" regexp="true">
                  <text>sharedCode.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1u3p"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1u3q" name="dbgViewShareCodeStop">
              <WhileSequence id="_1u3r" postdelay="1000" test="1">
                <TryStep id="_1u3s">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/1/0"
                                   id="_1u3t" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1u3u"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1u3v"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1u3w"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </WhileSequence>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1/0" id="_1u3x"
                               regexp="true">
                <text>sharedCode().*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1/1" id="_1u3y"
                               regexp="true">
                <text>printThreadInfo().*</text>
              </CheckStringStep>
              <WhileSequence id="_1u3z" postdelay="1000" test="2">
                <TryStep id="_1u3+">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/2/0"
                                   id="_1u3-" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1u40"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1u41"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1u42"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </WhileSequence>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2/0" id="_1u43"
                               regexp="true">
                <text>sharedCode().*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/2/1" id="_1u44"
                               regexp="true">
                <text>printThreadInfo().*</text>
              </CheckStringStep>
              <ProcedureCall id="_1u45" procedure="uiCheckSharedCodeFrame"/>
            </TestStep>
            <TestStep id="_1u46" name="threadSpecificBreakpoint">
              <comment>thread specific breakpoint</comment>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/1/0"
                              event="MOUSE_MPRC" id="_1u47" modifiers="16"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Breakpoints.tree&amp;/0"
                              event="MOUSE_MPRC" id="_1u48" modifiers="4"
                              popup="true" postdelay="1000"/>
              <SelectionEventStep client="$(client)"
                                  component="menu-com.windriver.ide.debug.ui.restrictBreakpointScopeAction"
                                  event="SELECTION" id="_1u49"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/1/0"
                              event="MOUSE_MPRC" id="_1u4A" modifiers="16"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                              event="MOUSE_MPRC" id="_1u4B" modifiers="16"/>
              <WhileSequence id="_1u4C" postdelay="1000" test="1">
                <TryStep id="_1u4D">
                  <CheckStringStep client="$(client)"
                                   component="Debug.tree&amp;/0/0/1/0"
                                   id="_1u4E" local="true" notcheck="true"
                                   resvarname="res"/>
                  <IfSequence id="_1u4F"
                              test="&#34;$(res)&#34; == &#34;true&#34;">
                    <BreakStep id="_1u4G"/>
                  </IfSequence>
                  <CatchSequence exception="TestException" id="_1u4H"
                                 maxerror="0" name="ignore"/>
                </TryStep>
              </WhileSequence>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1/0" id="_1u4I"
                               regexp="true">
                <text>sharedCode().*</text>
              </CheckStringStep>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/1/1" id="_1u4J"
                               regexp="true">
                <text>printThreadInfo().*</text>
              </CheckStringStep>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/2/0"
                              event="MOUSE_MPRC" id="_1u4K" modifiers="16"
                              postdelay="1000"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                              event="MOUSE_MPRC" id="_1u4L" modifiers="16"/>
              <TryStep id="_1u4M"
                       name="if the 2nd thread could hit the breakpoint specific for the 1st in 15 seconds">
                <ComponentWaiter client="$(client)"
                                 component="Debug.tree&amp;/0/0/2/0"
                                 id="_1u4N"/>
                <CatchSequence exception="IndexNotFoundException" id="_1u4O"
                               maxerror="0" name="success">
                  <ProcedureCall id="_1u4P"
                                 procedure="qfs.run-log.logMessage">
                    <variable name="message">scope breakpoint success</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1u4Q"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title"/>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                </CatchSequence>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1u4R" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1u4S" name="debugSymbolBrowser">
            <comment>debug symbol browser view test
</comment>
            <ProcedureCall id="_1u4T" procedure="uiClickDebugSymbolBrowser"/>
            <ProcedureCall id="_1u4U" procedure="symbolSharedCode"/>
            <ProcedureCall id="_1u4V" procedure="symbolMidStack"/>
          </TestCase>
          <TestCase id="_1u4W" name="sourceView">
            <comment>source view test

</comment>
            <ProcedureCall id="_1vqm" procedure="uiClickDebugSymbolBrowser"/>
            <ProcedureCall id="_1vqn" procedure="symbolMidStack"/>
            <ProcedureCall id="_1vqo" procedure="symbolEmpty"/>
            <ProcedureCall id="_1vqp" procedure="uiClickRse"/>
          </TestCase>
          <TestCase id="_1u4Z" name="debugView">
            <comment>debug view test
debug view should show the correct stackframes when different breakpoints are hit

</comment>
            <ProcedureCall id="_1u4a" procedure="uiClickRse"/>
            <ProcedureCall id="_1u4b" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1u4c" procedure="bpExp1"/>
            <ProcedureCall id="_1u4d" procedure="bpExp2"/>
            <ProcedureCall id="_1u4e" procedure="bpExp3"/>
            <ProcedureCall id="_1u4f" procedure="bpExp4"/>
            <ProcedureCall id="_1u4g" procedure="bpExp5"/>
            <ProcedureCall id="_1u4h" procedure="uiCheckFrame1"/>
            <ProcedureCall id="_1u4i" procedure="uiCheckFrame2"/>
            <ProcedureCall id="_1u4j" procedure="uiCheckFrame3"/>
            <ProcedureCall id="_1u4k" procedure="uiCheckFrame4"/>
            <ProcedureCall id="_1u4l" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1u4m" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1u4n" name="variableView">
            <comment>variable view test
</comment>
            <TestStep id="_1u4o" name="dbgMid5Stop">
              <ProcedureCall id="_1u4p" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u4q" procedure="bpExpMid5"/>
              <ProcedureCall id="_1u4r" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1u4s" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1u4t" procedure="uiClickVariableView"/>
            <ProcedureCall id="_1u4u" predelay="1000" procedure="frameCheck"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0/1"
                            event="MOUSE_MPRC" id="_1u4v" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1u4w" procedure="frameCheck"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0/2"
                            event="MOUSE_MPRC" id="_1u4x" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1u4y" procedure="frameCheck"/>
          </TestCase>
          <TestCase id="_1u4z" name="expressionView">
            <comment>expression view test
</comment>
            <TestStep id="_1u4+" name="dbgMid5Stop">
              <ProcedureCall id="_1u4-" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u50" procedure="bpExpMid5"/>
              <ProcedureCall id="_1u51" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1u52" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1u53" procedure="uiShowExpressionView"/>
            <ProcedureCall id="_1u54" local="true" procedure="expAddwatch">
              <variable name="item">q</variable>
            </ProcedureCall>
            <ProcedureCall id="_1u55" local="true" procedure="expAddwatch">
              <variable name="item">rectest</variable>
            </ProcedureCall>
            <ProcedureCall id="_1u56" local="true" procedure="expAddwatch">
              <variable name="item">s1</variable>
            </ProcedureCall>
            <ProcedureCall id="_1u57" postdelay="1000"
                           procedure="expExpandItems"/>
            <ProcedureCall id="_1u58" predelay="1000"
                           procedure="expCollapsetems"/>
            <ProcedureCall id="_1u59" procedure="expDelAll"/>
            <ProcedureCall id="_1u5A" procedure="uiCloseExpressionView"/>
          </TestCase>
          <TestCase id="_1u5B" name="registerView">
            <comment>register view test
</comment>
            <TestStep id="_1u5C" name="dbgMid5Stop">
              <ProcedureCall id="_1u5D" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u5E" procedure="bpExpMid5"/>
              <ProcedureCall id="_1u5F" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1u5G" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1u5H" procedure="uiShowRegisterView"/>
            <ProcedureCall id="_1u5I" procedure="regExpandItems"/>
            <ProcedureCall id="_1u5J" procedure="regCollapsetems"/>
          </TestCase>
          <TestCase id="_1u5K" name="memoryBrowserView">
            <comment>memory browser view test
</comment>
            <TestStep id="_1u5L" name="dbgMid5Stop">
              <ProcedureCall id="_1u5M" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u5N" procedure="bpExpMid5"/>
              <ProcedureCall id="_1u5O" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1u5P" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1u5Q" postdelay="1000"
                           procedure="uiShowMemoryBrowserView"/>
            <TextInputStep clear="true" client="$(client)"
                           component="Memory_Browser2.combo" id="_1u5R"
                           postdelay="1000">
              <text>&amp;p_q</text>
            </TextInputStep>
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonGo2" event="MOUSE_MPRC"
                            id="_1u5S" modifiers="16" postdelay="1000"/>
            <ProcedureCall id="_1u5T" postdelay="2000"
                           procedure="memBrowserAddItem"/>
            <ProcedureCall id="_1u5U" procedure="uiCloseMemoryBrowserView"/>
          </TestCase>
          <TestCase id="_1u5V" name="openDebugCmdShell">
            <comment>debug view "Debug Command Shell" test
</comment>
            <TestStep id="_1u5W" name="dbgMid5Stop">
              <ProcedureCall id="_1u5X" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1u5Y" procedure="bpExpMid5"/>
              <ProcedureCall id="_1u5Z" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1u5a" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1u5b" procedure="uiOpenDbgShell"/>
            <ProcedureCall id="_1u5c" procedure="dbgCmdErrorCheck"/>
          </TestCase>
          <TestCase id="_1u5d" name="terminateAndRelaunch">
            <comment>run-control terminate and relaunch 
</comment>
            <ProcedureCall id="_1u5e" procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1u5f" procedure="bpExpMid5"/>
            <TestStep id="_1u5g" name="terminateAndRelaunch">
              <RepeatSequence count="3" id="_1u5h" name="stepLoop">
                <ProcedureCall id="_1u5i" procedure="uiCheckFrame5"/>
                <ProcedureCall id="_1u5j"
                               procedure="dbgViewTerminateRelaunch"/>
                <ProcedureCall id="_1u5k" procedure="uiCheckModelDialog"/>
                <ProcedureCall id="_1u5l" procedure="dbgStopAtMain"/>
              </RepeatSequence>
            </TestStep>
            <ProcedureCall id="_1u5m" procedure="uiDelAllBp"/>
          </TestCase>
        </TestSet>
      </TestSet>
    </TestSet>
  </TestSet>
  <TestSet id="_1sxl" name="dp">
    <TestSet id="_1s-G" name="wdbrpc_lx">
      <variable name="wdbrpcFlag">false</variable>
      <variable name="conName">""</variable>
      <comment>launch kinds of debuggee from UI, check if 
1, it launched successfully
2, it stopped at main</comment>
      <TestSet id="_1vGY" name="mthread">
        <variable name="debuggee">mthread_stack</variable>
        <TestSet id="_1vPX" name="launch">
          <variable name="tgtDebuggee">/dfe/mthread_stack</variable>
          <DependencyReference id="_1vGZ" reference="wb.wdbrpcLaunch">
            <variable name="tgtDebuggee">$(tgtDebuggee)</variable>
          </DependencyReference>
          <TestCase id="_1vP5" name="dynamicPrintfBreakpoint">
            <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1vP6" procedure="uiClickRse"/>
            <ProcedureCall id="_1vP7" procedure="uiClickBreakpointView"/>
            <TestStep id="_1vP8" name="dynamicPrintf">
              <comment>Breakpoint view : line breakpoint add and delete</comment>
              <ProcedureCall id="_1vP9" procedure="uiClickEditorView"/>
              <ProcedureCall id="_1vPA" local="true" procedure="dpLineAdd"
                             retvarname="dpSuccess">
                <variable name="lineNum">45</variable>
                <variable name="variable">toto</variable>
                <variable name="dp_condition">false</variable>
                <variable name="dp_skip">false</variable>
              </ProcedureCall>
              <IfSequence id="_1vPB" test="$(dpSuccess)">
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1vPC" regexp="true">
                  <text>printf.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1vPD" regexp="true">
                  <text>.*toto=.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1vPE" regexp="true">
                  <text>.*mthread_stack.c :45.*Planted.*</text>
                </CheckStringStep>
              </IfSequence>
              <TestStep id="_1vPF" name="resumeFromBeginning">
                <TryStep id="_1vPG" name="resume">
                  <ProcedureCall id="_1vPH" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1vPI" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1vPJ" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CatchSequence exception="IndexNotFoundException" id="_1vPK"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1vPL"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <TestStep id="_1vPM" name="checkConsole">
                <ProcedureCall id="_1vPN" procedure="uiClickConsole"/>
                <ProcedureCall id="_1vPO" postdelay="15000"
                               procedure="consoleClean"/>
                <ProcedureCall id="_1vPP" local="true"
                               procedure="consoleCheck" retvarname="success">
                  <variable name="str">"toto="</variable>
                </ProcedureCall>
                <IfSequence id="_1vPQ" test="$(success)">
                  <ProcedureCall id="_1vPR"
                                 procedure="qfs.run-log.logMessage">
                    <variable name="message">Dynamic Printf ---- SUCCESSED!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1vPS"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title">DPrintf SUCCESSED!!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ElseSequence id="_1vPT">
                    <ProcedureCall id="_1vPU"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">Dynamic Printf ------ FAILED</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                  </ElseSequence>
                </IfSequence>
                <ProcedureCall id="_1vPV" procedure="consoleSave"/>
              </TestStep>
              <ProcedureCall id="_1vPW" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
        </TestSet>
      </TestSet>
    </TestSet>
    <TestSet id="_1uDV" name="wdbrpc_vx">
      <variable name="vxWdbrpcFlag">false</variable>
      <variable name="conName">""</variable>
      <comment>launch kinds of debuggee from UI, check if 
1, it launched successfully
2, it stopped at main</comment>
      <DependencyReference id="_1uU1" reference="wb.vxConsole"/>
      <TestSet id="_1uDi" name="mthread">
        <variable name="rtpVxe">""</variable>
        <variable name="vxeFile">""</variable>
        <TestSet id="_1uDj" name="kernel">
          <variable name="debuggee">mthread_stack</variable>
          <DependencyReference id="_1uDk" reference="wb.vxWdbRpcLaunchKernel">
            <variable name="entry">mthread</variable>
          </DependencyReference>
          <TestCase id="_1uF3" name="dynamicPrintfBreakpoint-KernelTask">
            <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1uF4" procedure="uiClickRse"/>
            <ProcedureCall id="_1uF7" procedure="uiClickBreakpointView"/>
            <TestStep id="_1uF6" name="dynamicPrintf">
              <comment>Breakpoint view : line breakpoint add and delete</comment>
              <ProcedureCall id="_1uF5" procedure="uiClickEditorView"/>
              <ProcedureCall id="_1uF8" local="true" procedure="dpLineAdd"
                             retvarname="dpSuccess">
                <variable name="lineNum">48</variable>
                <variable name="variable">toto</variable>
                <variable name="dp_condition">false</variable>
                <variable name="dp_skip">false</variable>
              </ProcedureCall>
              <IfSequence id="_1uF9" test="$(dpSuccess)">
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uFA" regexp="true">
                  <text>printf.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uFB" regexp="true">
                  <text>.*toto=.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uFC" regexp="true">
                  <text>.*mthread_stack.c :48.*Planted.*</text>
                </CheckStringStep>
              </IfSequence>
              <TestStep id="_1uFD" name="resumeFromBeginning">
                <TryStep id="_1uFE" name="resume">
                  <ProcedureCall id="_1uFF" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1uFG" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1uFH" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CatchSequence exception="IndexNotFoundException" id="_1uFI"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1uFJ"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <TestStep id="_1uUE" name="checkConsole">
                <ProcedureCall id="_1uUG" postdelay="15000"
                               procedure="terminalClear"/>
                <ProcedureCall id="_1uUF" local="true"
                               procedure="terminalCheck" retvarname="success">
                  <variable name="str">"toto="</variable>
                </ProcedureCall>
                <IfSequence id="_1uUI" test="$(success)">
                  <ProcedureCall id="_1vv1"
                                 procedure="qfs.run-log.logMessage">
                    <variable name="message">Dynamic Printf ---- SUCCESSED!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1vv2"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title">DPrintf SUCCESSED!!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ElseSequence id="_1uUK">
                    <ProcedureCall id="_1vv3"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">Dynamic Printf ------ FAILED</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                  </ElseSequence>
                </IfSequence>
                <ProcedureCall id="_1uUH" procedure="terminalSave"/>
              </TestStep>
              <ProcedureCall id="_1uFK" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
        </TestSet>
        <TestSet id="_1uLf" name="rtp">
          <variable name="debuggee">mthread_stack</variable>
          <DependencyReference id="_1uLg" reference="wb.vxWdbRpcLaunchRtp">
            <variable name="vxeFile">$(mthreadFile)</variable>
          </DependencyReference>
          <TestCase id="_1uUf" name="dynamicPrintfBreakpoint-RTP">
            <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1uUg" procedure="uiClickRse"/>
            <ProcedureCall id="_1uUh" procedure="uiClickBreakpointView"/>
            <TestStep id="_1uUi" name="dynamicPrintf">
              <comment>Breakpoint view : line breakpoint add and delete</comment>
              <ProcedureCall id="_1uUj" procedure="uiClickEditorView"/>
              <ProcedureCall id="_1uUk" local="true" procedure="dpLineAdd"
                             retvarname="dpSuccess">
                <variable name="lineNum">48</variable>
                <variable name="variable">toto</variable>
                <variable name="dp_condition">false</variable>
                <variable name="dp_skip">false</variable>
              </ProcedureCall>
              <IfSequence id="_1uUl" test="$(dpSuccess)">
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uUm" regexp="true">
                  <text>printf.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uUn" regexp="true">
                  <text>.*toto=.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uUo" regexp="true">
                  <text>.*mthread_stack.c :48.*Planted.*</text>
                </CheckStringStep>
              </IfSequence>
              <TestStep id="_1uUp" name="resumeFromBeginning">
                <TryStep id="_1uUq" name="resume">
                  <ProcedureCall id="_1uUr" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1uUs" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1uUt" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CatchSequence exception="IndexNotFoundException" id="_1uUu"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1uUv"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <TestStep id="_1uYY" name="checkConsole">
                <ProcedureCall id="_1uYZ" procedure="uiClickConsole"/>
                <ProcedureCall id="_1uYa" postdelay="15000"
                               procedure="consoleClean"/>
                <ProcedureCall id="_1uYb" local="true"
                               procedure="consoleCheck" retvarname="success">
                  <variable name="str">"toto="</variable>
                </ProcedureCall>
                <IfSequence id="_1uYc" test="$(success)">
                  <ProcedureCall id="_1uYd"
                                 procedure="qfs.run-log.logMessage">
                    <variable name="message">Dynamic Printf ---- SUCCESSED!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1uYe"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title">DPrintf SUCCESSED!!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ElseSequence id="_1uYf">
                    <ProcedureCall id="_1uYg"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">Dynamic Printf ------ FAILED</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                  </ElseSequence>
                </IfSequence>
                <ProcedureCall id="_1uYh" procedure="consoleSave"/>
              </TestStep>
              <ProcedureCall id="_1uV2" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
        </TestSet>
      </TestSet>
    </TestSet>
    <TestSet id="_1uV9" name="wdbpipe">
      <variable name="vxSimFlag">false</variable>
      <variable name="conName">""</variable>
      <comment>launch kinds of debuggee from UI, check if 
1, it launched successfully
2, it stopped at main</comment>
      <TestSet id="_1uVB" name="mthread">
        <variable name="rtpVxe">""</variable>
        <variable name="vxeFile">""</variable>
        <TestSet id="_1uVC" name="kernel">
          <variable name="debuggee">mthread_stack</variable>
          <DependencyReference id="_1uVD"
                               reference="wb.vxWdbPipeLaunchKernel">
            <variable name="entry">mthread</variable>
          </DependencyReference>
          <TestCase id="_1uVE" name="dynamicPrintfBreakpoint-KernelTask">
            <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1uVF" procedure="uiClickRse"/>
            <ProcedureCall id="_1uVG" procedure="uiClickBreakpointView"/>
            <TestStep id="_1uVH" name="dynamicPrintf">
              <comment>Breakpoint view : line breakpoint add and delete</comment>
              <ProcedureCall id="_1uVI" procedure="uiClickEditorView"/>
              <ProcedureCall id="_1uVJ" local="true" procedure="dpLineAdd"
                             retvarname="dpSuccess">
                <variable name="lineNum">48</variable>
                <variable name="variable">toto</variable>
                <variable name="dp_condition">false</variable>
                <variable name="dp_skip">false</variable>
              </ProcedureCall>
              <IfSequence id="_1uVK" test="$(dpSuccess)">
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uVL" regexp="true">
                  <text>printf.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uVM" regexp="true">
                  <text>.*toto=.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uVN" regexp="true">
                  <text>.*mthread_stack.c :48.*Planted.*</text>
                </CheckStringStep>
              </IfSequence>
              <TestStep id="_1uVO" name="resumeFromBeginning">
                <TryStep id="_1uVP" name="resume">
                  <ProcedureCall id="_1uVQ" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1uVR" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1uVS" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CatchSequence exception="IndexNotFoundException" id="_1uVT"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1uVU"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <TestStep id="_1uVV" name="checkConsole">
                <ProcedureCall id="_1uWv" procedure="uiClickTgtConsole"/>
                <ProcedureCall id="_1uVW" postdelay="15000"
                               procedure="tgtConsoleClean"/>
                <ProcedureCall id="_1uWy" procedure="tgtConsoleCheck">
                  <variable name="str">"toto="</variable>
                </ProcedureCall>
                <IfSequence id="_1uVY" test="$(success)">
                  <ProcedureCall id="_1uXU"
                                 procedure="qfs.run-log.logMessage">
                    <variable name="message">Dynamic Printf ---- SUCCESSED!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1uXV"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title">DPrintf SUCCESSED!!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ElseSequence id="_1uVa">
                    <ProcedureCall id="_1uXW"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">Dynamic Printf ------ FAILED</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                  </ElseSequence>
                </IfSequence>
                <ProcedureCall id="_1uWz" procedure="tgtConsoleSave"/>
              </TestStep>
              <ProcedureCall id="_1uVd" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
        </TestSet>
        <TestSet id="_1uVe" name="rtp">
          <variable name="debuggee">mthread_stack</variable>
          <DependencyReference id="_1uVf" reference="wb.vxWdbPipeLaunchRtp">
            <variable name="vxeFile">$_(mthreadFile)</variable>
          </DependencyReference>
          <TestCase id="_1uX0" name="dynamicPrintfBreakpoint-RTP">
            <comment>line breakpoint test 
debug view 
breakpoint view
</comment>
            <ProcedureCall id="_1uX1" procedure="uiClickRse"/>
            <ProcedureCall id="_1uX2" procedure="uiClickBreakpointView"/>
            <TestStep id="_1uX3" name="dynamicPrintf">
              <comment>Breakpoint view : line breakpoint add and delete</comment>
              <ProcedureCall id="_1uX4" procedure="uiClickEditorView"/>
              <ProcedureCall id="_1uX5" local="true" procedure="dpLineAdd"
                             retvarname="dpSuccess">
                <variable name="lineNum">48</variable>
                <variable name="variable">toto</variable>
                <variable name="dp_condition">false</variable>
                <variable name="dp_skip">false</variable>
              </ProcedureCall>
              <IfSequence id="_1uX6" test="$(dpSuccess)">
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uX7" regexp="true">
                  <text>printf.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uX8" regexp="true">
                  <text>.*toto=.*</text>
                </CheckStringStep>
                <CheckStringStep client="$(client)"
                                 component="Breakpoints.tree&amp;/0"
                                 id="_1uX9" regexp="true">
                  <text>.*mthread_stack.c :48.*Planted.*</text>
                </CheckStringStep>
              </IfSequence>
              <TestStep id="_1uXA" name="resumeFromBeginning">
                <TryStep id="_1uXB" name="resume">
                  <ProcedureCall id="_1uXC" postdelay="1000"
                                 procedure="qfs.swt.tree.selectNode">
                    <variable name="id">Debug.tree&amp;/0/0/0</variable>
                    <variable name="node"/>
                    <variable name="separator"/>
                  </ProcedureCall>
                  <ProcedureCall id="_1uXD" postdelay="3000"
                                 procedure="dbgViewResume"/>
                  <ProcedureCall id="_1uXE" postdelay="2000"
                                 procedure="qfs.swt.tree.expandNode">
                    <variable name="id">Debug.tree&amp;/0/0</variable>
                    <variable name="node">0</variable>
                    <variable name="separator">&amp;</variable>
                  </ProcedureCall>
                  <CatchSequence exception="IndexNotFoundException" id="_1uXF"
                                 maxerror="2"/>
                  <CatchSequence exception="TestException" id="_1uXG"
                                 maxerror="2" name="ignore"/>
                </TryStep>
              </TestStep>
              <TestStep id="_1uXH" name="checkConsole">
                <ProcedureCall id="_1uXI" procedure="uiClickConsole"/>
                <ProcedureCall id="_1uXJ" postdelay="15000"
                               procedure="consoleClean"/>
                <ProcedureCall id="_1uXK" local="true"
                               procedure="consoleCheck" retvarname="success">
                  <variable name="str">"toto="</variable>
                </ProcedureCall>
                <IfSequence id="_1uXL" test="$(success)">
                  <ProcedureCall id="_1uXM"
                                 procedure="qfs.run-log.logMessage">
                    <variable name="message">Dynamic Printf ---- SUCCESSED!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1uXT"
                                 procedure="qfs.run-log.screenshots.logScreenshot">
                    <variable name="inSUT">false</variable>
                    <variable name="title">DPrintf SUCCESSED!!</variable>
                    <variable name="dontcompactify">false</variable>
                    <variable name="report">true</variable>
                  </ProcedureCall>
                  <ElseSequence id="_1uXN">
                    <ProcedureCall id="_1uXR"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">Dynamic Printf ------ FAILED</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                  </ElseSequence>
                </IfSequence>
                <ProcedureCall id="_1uXP" procedure="consoleSave"/>
              </TestStep>
              <ProcedureCall id="_1uXQ" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
        </TestSet>
      </TestSet>
    </TestSet>
  </TestSet>
  <TestSet id="_1ui4" name="dbgCmdShell">
    <variable name="platformDir">$(platformDir)</variable>
    <TestSet id="_1ui5" name="wdbrpc">
      <variable name="wdbrpcFlag">false</variable>
      <variable name="conName">""</variable>
      <comment>launch kinds of debuggee from UI, check if 
1, it launched successfully
2, it stopped at main</comment>
      <TestSet id="_1ui6" name="penguin">
        <variable name="debuggee">penguin</variable>
        <TestSet id="_1ui7" name="launch">
          <variable name="tgtDebuggee">/dfe/penguin</variable>
          <DependencyReference id="_1uk-"
                               reference="wb.wdbrpcLaunchDebugCmdShell"/>
          <TestCase id="_1ul0" name="cmdUntil">
            <comment>Debug Command Shell "command" test
1,until
2,enter


</comment>
            <ProcedureCall id="_1ul1" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1ul2" name="untilMove">
              <ProcedureCall id="_1ul3" postdelay="2000"
                             procedure="cmdUntil"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1ul4">
                <text>main() - b_main.cpp:31</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1ul5" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1ul6" name="cmdNext">
            <comment>Debug Command Shell "command" test
1,next
2,enter
3,n

</comment>
            <ProcedureCall id="_1ul7" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1ul8" name="untilMove">
              <ProcedureCall id="_1vDW" procedure="cmdUntilOne"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1ulA">
                <text>main() - b_main.cpp:31</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1ulB" postdelay="2000" procedure="cmdNext"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1ulC">
              <text>main() - b_main.cpp:30</text>
            </CheckStringStep>
            <KeyEventStep client="$(client)"
                          component="Debug_Command_Shell.canvas"
                          event="KEY_PTR" id="_1ulD" keychar="13" keycode="10"
                          modifiers="0" postdelay="2000"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1ulE">
              <text>main() - b_main.cpp:31</text>
            </CheckStringStep>
            <ProcedureCall id="_1ulF" postdelay="2000" procedure="cmdN"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1ulG">
              <text>main() - b_main.cpp:30</text>
            </CheckStringStep>
            <ProcedureCall id="_1ulH" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1ulI" name="cmdStep">
            <comment>Debug Command Shell "command" test
1,step
2,enter
3,s

</comment>
            <ProcedureCall id="_1ulJ" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1ulK" name="untilMove">
              <ProcedureCall id="_1vDY" procedure="cmdUntilOne"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1ulM">
                <text>main() - b_main.cpp:31</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1ulN" postdelay="1000" procedure="cmdStep"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1ulO"
                             regexp="true">
              <text>BALL::Move.*</text>
            </CheckStringStep>
            <KeyEventStep client="$(client)"
                          component="Debug_Command_Shell.canvas"
                          event="KEY_PTR" id="_1ulP" keychar="13" keycode="10"
                          modifiers="0" postdelay="1000"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1ulQ"
                             regexp="true">
              <text>POINT.*</text>
            </CheckStringStep>
            <ProcedureCall id="_1ulR" postdelay="1000" procedure="cmdS"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1ulS"
                             regexp="true">
              <text>POINT.*</text>
            </CheckStringStep>
            <ProcedureCall id="_1v7t" procedure="cmdInput">
              <variable name="cmd">bt</variable>
            </ProcedureCall>
            <ProcedureCall id="_1ulT" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1ulU" name="cmdFinish">
            <comment>Debug Command Shell "command" test
1,Finish
2,enter

</comment>
            <ProcedureCall id="_1ulV" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1ulW" name="untilMove">
              <ProcedureCall id="_1ulX" postdelay="5000"
                             procedure="cmdUntil174"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1ulY">
                <text>POINT() - b_main.cpp:174</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1ulZ" postdelay="2000" procedure="cmdFinish"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1ula">
              <text>BALL() - b_main.cpp:106</text>
            </CheckStringStep>
            <KeyEventStep client="$(client)"
                          component="Debug_Command_Shell.canvas"
                          event="KEY_PTR" id="_1ulb" keychar="13" keycode="10"
                          modifiers="0" postdelay="2000"/>
            <CheckStringStep client="$(client)"
                             component="Debug.tree&amp;/0/0/0/0" id="_1ulc">
              <text>SOFT() - b_soft.h:10</text>
            </CheckStringStep>
            <ProcedureCall id="_1uld" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1uln" name="lineBreakpoint">
            <comment>Debug Command Shell "continue" test


</comment>
            <ProcedureCall id="_1ulr" postdelay="2000"
                           procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1ulo" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1ulp" name="breakLine" postdelay="2000">
              <ProcedureCall id="_1ulq" procedure="cmdBreakLine"/>
            </TestStep>
            <TryStep id="_1uls" name="checkInBreakpointView">
              <CheckStringStep client="$(client)"
                               component="WorkbenchWindow.tree2&amp;/0"
                               id="_1ult" regexp="true">
                <text>b_main.cpp:174.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1ulu"
                             maxerror="0"/>
            </TryStep>
            <TestStep id="_1ulv" name="continue" postdelay="3000">
              <ProcedureCall id="_1ulw" procedure="cmdContinue"/>
            </TestStep>
            <TryStep id="_1v7z" name="dbgCheckLine">
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1ulx">
                <text>POINT() - b_main.cpp:174</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1v7+"
                             maxerror="0"/>
            </TryStep>
            <ProcedureCall id="_1uly" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1v87" name="ExpressionBreakpoint">
            <comment>Debug Command Shell "continue" test


</comment>
            <ProcedureCall id="_1v88" postdelay="2000"
                           procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1v89" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1v8A" name="breakExpression">
              <ProcedureCall id="_1v8B" procedure="cmdInput">
                <variable name="cmd">break BALL::Move</variable>
              </ProcedureCall>
            </TestStep>
            <TryStep id="_1v8E" name="checkInBreakpointView">
              <CheckStringStep client="$(client)"
                               component="WorkbenchWindow.tree2&amp;/0"
                               id="_1v8F" regexp="true">
                <text>b_main.cpp:126.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1v8H"
                             maxerror="0"/>
            </TryStep>
            <TestStep id="_1v8N" name="continue" postdelay="3000">
              <ProcedureCall id="_1v8O" procedure="cmdContinue"/>
            </TestStep>
            <TryStep id="_1v8P" name="dbgCheckMove">
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1v8Q"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1v8R"
                             maxerror="0"/>
            </TryStep>
            <ProcedureCall id="_1v8S" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1v8U" name="frameLinkUnlink">
            <comment>Debug Command Shell "continue" test


</comment>
            <ProcedureCall id="_1v8V" postdelay="2000"
                           procedure="uiClickBreakpointView"/>
            <ProcedureCall id="_1v8W" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <TestStep id="_1v9U" name="untilMove">
              <ProcedureCall id="_1v9V" postdelay="5000"
                             procedure="cmdUntil174"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1v9W">
                <text>POINT() - b_main.cpp:174</text>
              </CheckStringStep>
            </TestStep>
            <TestStep id="_1v9H" name="linkFrame">
              <ProcedureCall id="_1vAK" procedure="uiClickVariableView"/>
              <ProcedureCall id="_1v9I" postdelay="1000" procedure="cmdLink"/>
              <TryStep id="_1v9X" name="checkFrame1">
                <ProcedureCall id="_1v9J" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">frame 1</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/BALL.*"
                                  id="_1v9R" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1v9S" test="not $(selected)">
                  <ProcedureCall id="_1v9T" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context enabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1v9Y"
                               maxerror="0"/>
              </TryStep>
              <TryStep id="_1v9Z" name="checkFrame3">
                <ProcedureCall id="_1v9e" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">frame 3</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/main().*"
                                  id="_1v9a" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1v9b" test="not $(selected)">
                  <ProcedureCall id="_1v9c" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context enabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1v9d"
                               maxerror="0"/>
              </TryStep>
              <TryStep id="_1v9f" name="frameDown">
                <ProcedureCall id="_1v9g" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">down</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/SOFT.*"
                                  id="_1v9h" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1v9i" test="not $(selected)">
                  <ProcedureCall id="_1v9j" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context enabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1v9k"
                               maxerror="0"/>
              </TryStep>
              <TryStep id="_1v9l" name="frameDown">
                <ProcedureCall id="_1v9m" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">down</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/BALL.*"
                                  id="_1v9n" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1v9o" test="not $(selected)">
                  <ProcedureCall id="_1v9p" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context enabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1v9q"
                               maxerror="0"/>
              </TryStep>
              <TryStep id="_1v9r" name="frameDown">
                <ProcedureCall id="_1v9s" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">down</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/POINT.*"
                                  id="_1v9t" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1v9u" test="not $(selected)">
                  <ProcedureCall id="_1v9v" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context enabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1v9w"
                               maxerror="0"/>
              </TryStep>
              <TryStep id="_1v9x" name="frameUp">
                <ProcedureCall id="_1v9y" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">up</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/BALL.*"
                                  id="_1v9z" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1v9+" test="not $(selected)">
                  <ProcedureCall id="_1v9-" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context enabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1vA0"
                               maxerror="0"/>
              </TryStep>
              <TryStep id="_1vA1" name="frameUp">
                <ProcedureCall id="_1vA2" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">up</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/SOFT.*"
                                  id="_1vA3" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1vA4" test="not $(selected)">
                  <ProcedureCall id="_1vA5" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context enabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1vA6"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1vA7" postdelay="1000"
                             procedure="cmdUnlink"/>
              <TryStep id="_1vA8" name="checkFrame1">
                <ProcedureCall id="_1vA9" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">frame 1</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/BALL.*"
                                  id="_1vAA" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1vAB" test="$(selected)">
                  <ProcedureCall id="_1vAC" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context disabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1vAD"
                               maxerror="0"/>
              </TryStep>
              <TryStep id="_1vAE" name="checkFrame0">
                <ProcedureCall id="_1vAF" postdelay="1000"
                               procedure="cmdInput">
                  <variable name="cmd">frame 0</variable>
                </ProcedureCall>
                <CheckBooleanStep checktype="selected" client="$(client)"
                                  component="Debug.tree%/penguin.*/penguin.*/penguin.*/POINT.*"
                                  id="_1vAG" local="true"
                                  resvarname="selected"/>
                <IfSequence id="_1vAH" test="$(selected)">
                  <ProcedureCall id="_1vAI" procedure="qfs.run-log.logError">
                    <variable name="message">wrong with Link with Active Debug Context disabled </variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
                <CatchSequence exception="TestException" id="_1vAJ"
                               maxerror="0"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1v9G" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <ProcedureCall id="_1v8h" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1ulz" name="cmdScript">
            <comment>Debug Command Shell gdb script test

</comment>
            <ProcedureCall id="_1ul+" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <ProcedureCall id="_1ul-" procedure="cmdScriptPenguin"/>
            <ProcedureCall id="_1um0" postdelay="2000"
                           procedure="uiClickBreakpointView"/>
            <TryStep id="_1um1">
              <CheckStringStep client="$(client)"
                               component="WorkbenchWindow.tree2&amp;/0"
                               id="_1um2" regexp="true">
                <text>b_main.cpp:126.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1um3"
                             maxerror="0"/>
            </TryStep>
            <TestStep id="_1um4" name="continue" postdelay="3000">
              <ProcedureCall id="_1um5" procedure="cmdContinue"/>
            </TestStep>
            <TryStep id="_1v7-" name="dbgCheckMove">
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1um6"
                               regexp="true">
                <text>BALL::Move.*</text>
              </CheckStringStep>
              <CatchSequence exception="TestException" id="_1v80"
                             maxerror="0"/>
            </TryStep>
            <ProcedureCall id="_1um7" procedure="dbgCmdSave"/>
          </TestCase>
          <CleanupSequence id="_1vFW" name="closeDbgCmdShell">
            <TestStep id="_1vFX" name="closeDebugCmdShell">
              <ProcedureCall id="_1vFY" procedure="uiCloseDbgShell"/>
            </TestStep>
          </CleanupSequence>
        </TestSet>
        <TestSet id="_1um8" name="attach">
          <variable name="tgtDebuggee">/dfe/penguin</variable>
          <variable name="object">penguin</variable>
          <DependencyReference id="_1um9" reference="wb.penguinAttachWdbrpc"/>
          <TestCase id="_1un6" name="gdbScript">
            <comment>Debug Command Shell gdb script test

</comment>
            <ProcedureCall id="_1v6v"
                           procedure="uiSetSash2HeightDbgCmdShell"/>
            <TestStep id="_1un7" name="debugCmdShellOpen">
              <ProcedureCall id="_1un8" procedure="uiOpenDbgShell">
                <variable name="level">3</variable>
              </ProcedureCall>
              <ProcedureCall id="_1un9" procedure="dbgCmdErrorCheck"/>
            </TestStep>
            <ProcedureCall id="_1v6u" procedure="uiSetSash2Height"/>
            <TestStep id="_1unA" name="debugCmdShellAttach">
              <TryStep id="_1unB" name="suspendCheck">
                <ProcedureCall id="_1unC" postdelay="2000"
                               procedure="qfs.swt.tree.expandNode">
                  <variable name="id">Debug.tree&amp;/0/0</variable>
                  <variable name="node">0</variable>
                  <variable name="separator">&amp;</variable>
                </ProcedureCall>
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0" id="_1unD"
                                 regexp="true">
                  <text>.*Stopped - container.*</text>
                </CheckStringStep>
                <CatchSequence exception="IndexNotFoundException" id="_1unE"
                               maxerror="2"/>
                <CatchSequence exception="TestException" id="_1unF"
                               maxerror="2" name="ignore"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1unG" name="debugCmdShellViewClean">
              <ProcedureCall id="_1unH" postdelay="1000"
                             procedure="dbgCmdClean"/>
            </TestStep>
            <TestStep id="_1unI" name="gdbScript">
              <ProcedureCall id="_1unJ" procedure="cmdScriptPenguin"/>
            </TestStep>
            <TestStep id="_1unK" name="breakpointView">
              <ProcedureCall id="_1unL" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1unM" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1unN" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1unO"
                               maxerror="0"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1unP" name="continue" postdelay="3000">
              <ProcedureCall id="_1unQ" procedure="cmdContinue"/>
            </TestStep>
            <TestStep id="_1unR" name="debugViewBrekpointHit">
              <TryStep id="_1unS" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1unT" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1unU"
                               maxerror="0"/>
              </TryStep>
            </TestStep>
            <TestStep id="_1unV" name="breakpointViewDelAll">
              <ProcedureCall id="_1unW" procedure="uiDelAllBp"/>
              <TryStep id="_1unX" name="checkBreapointView">
                <ProcedureCall id="_1unY"
                               procedure="qfs.swt.tree.checks.checkNumberOfRows">
                  <variable name="id">Breakpoints.tree&amp;/0</variable>
                  <variable name="compareValue">0</variable>
                  <variable name="compareMode">=</variable>
                  <variable name="errorLevel">ERROR</variable>
                  <variable name="appearInReport">1</variable>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_1unZ"
                               maxerror="0" name="ignore"/>
              </TryStep>
            </TestStep>
            <ProcedureCall id="_1una" procedure="dbgCmdSave"/>
            <TestStep id="_1unb" name="closeDebugCmdShell">
              <ProcedureCall id="_1unc" procedure="uiCloseDbgShell"/>
            </TestStep>
          </TestCase>
        </TestSet>
      </TestSet>
      <TestSet id="_1vDZ" name="mprocess">
        <variable name="debuggee">mprocess_lib</variable>
        <TestSet id="_1vFc" name="launch">
          <variable name="tgtDebuggee">/dfe/mprocess_lib</variable>
          <DependencyReference id="_1vFd"
                               reference="wb.wdbrpcLaunchDebugCmdShell"/>
          <TestCase id="_1vFe" name="cmdUntil">
            <comment>Debug Command Shell "command" test
1,until
2,enter


</comment>
            <ProcedureCall id="_1vFf" postdelay="1000"
                           procedure="dbgCmdClean"/>
            <ProcedureCall id="_1vFk" procedure="cmdInput">
              <variable name="cmd">continue</variable>
            </ProcedureCall>
            <TestStep id="_1vFg" name="untilMove">
              <ProcedureCall id="_1vFh" postdelay="2000"
                             procedure="cmdUntil"/>
              <CheckStringStep client="$(client)"
                               component="Debug.tree&amp;/0/0/0/0" id="_1vFi">
                <text>main() - b_main.cpp:31</text>
              </CheckStringStep>
            </TestStep>
            <ProcedureCall id="_1vFj" procedure="dbgCmdSave"/>
          </TestCase>
          <TestCase id="_1vDe" name="breakpointView">
            <comment>breakpoint view should show the breakpoint successfully added in library correctly
</comment>
            <ProcedureCall id="_1vDf" procedure="uiClickRse"/>
            <ProcedureCall id="_1vDg" procedure="uiShowBreakpointView"/>
            <ProcedureCall id="_1vDh" procedure="bpExp1"/>
            <ProcedureCall id="_1vDi" procedure="bpExp2"/>
            <ProcedureCall id="_1vDj" procedure="bpExp3"/>
            <ProcedureCall id="_1vDk" procedure="bpExp4"/>
            <ProcedureCall id="_1vDl" procedure="bpExp5"/>
            <ProcedureCall id="_1vDm" procedure="bpExpSCode"/>
            <ProcedureCall id="_1vDn" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1vDo" name="debugView">
            <comment>debug view should show the correct stackframes when different breakpoints are hit even if the stack frame reside in library

</comment>
            <ProcedureCall id="_1vDp" procedure="uiShowBreakpointView"/>
            <ProcedureCall id="_1vDq" procedure="bpExp1"/>
            <ProcedureCall id="_1vDr" procedure="bpExp2"/>
            <ProcedureCall id="_1vDs" procedure="bpExp3"/>
            <ProcedureCall id="_1vDt" procedure="bpExp4"/>
            <ProcedureCall id="_1vDu" procedure="bpExp5"/>
            <ProcedureCall id="_1vDv" procedure="uiCheckFrame1"/>
            <ProcedureCall id="_1vDw" procedure="uiCheckFrame2"/>
            <ProcedureCall id="_1vDx" procedure="uiCheckFrame3"/>
            <ProcedureCall id="_1vDy" procedure="uiCheckFrame4"/>
            <ProcedureCall id="_1vDz" procedure="uiCheckFrame5"/>
            <ProcedureCall id="_1vD+" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1vD-" name="debugViewSubProcesses">
            <comment>debug view should show the correct sub processes stackframes when different breakpoints are hit

</comment>
            <TestStep id="_1vE0" name="dbgSubProcessesStop">
              <ProcedureCall id="_1vE1" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1vE2" procedure="bpExpSharedCode"/>
              <ProcedureCall id="_1vE3" procedure="uiCheckSubProcessFrame"/>
              <ProcedureCall id="_1vE4" procedure="uiDelAllBp"/>
            </TestStep>
          </TestCase>
          <TestCase id="_1vE5" name="variableViewLib">
            <comment>variable view should show library stack frame correctly 
</comment>
            <TestStep id="_1vE6" name="dbgMid5Stop">
              <ProcedureCall id="_1vE7" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1vE8" procedure="bpExpMid5"/>
              <ProcedureCall id="_1vE9" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1vEA" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1vEB" postdelay="2000"
                           procedure="uiClickVariableView"/>
            <ProcedureCall id="_1vEC" procedure="frameCheck"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0/1"
                            event="MOUSE_MPRC" id="_1vED" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1vEE" procedure="frameCheck"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0/2"
                            event="MOUSE_MPRC" id="_1vEF" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1vEG" procedure="frameCheck"/>
          </TestCase>
          <TestCase id="_1vEH" name="variableViewSubProcesses">
            <comment>variable view should show threads stack frame correctly
</comment>
            <TestStep id="_1vEI" name="dbgSubProcessesStop">
              <ProcedureCall id="_1vEJ" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1vEK" procedure="bpExpSharedCode"/>
              <ProcedureCall id="_1vEL" procedure="uiCheckSubProcessFrame"/>
              <ProcedureCall id="_1vEM" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1vEN" postdelay="2000"
                           procedure="uiClickVariableView"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/1/0/1"
                            event="MOUSE_MPRC" id="_1vEO" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1vEP" procedure="threadFrameCheck0"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/2/0/1"
                            event="MOUSE_MPRC" id="_1vEQ" modifiers="16"
                            postdelay="2000"/>
            <ProcedureCall id="_1vER" procedure="threadFrameCheck1"/>
          </TestCase>
          <TestCase id="_1vES" name="expressionViewLib">
            <comment>expression view should show library symbols correctlly
</comment>
            <TestStep id="_1vET" name="dbgMid5Stop">
              <ProcedureCall id="_1vEU" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1vEV" procedure="bpExpMid5"/>
              <ProcedureCall id="_1vEW" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1vEX" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1vEY" procedure="uiShowExpressionView"/>
            <ProcedureCall id="_1vEZ" local="true" procedure="expAddwatch">
              <variable name="item">q</variable>
            </ProcedureCall>
            <ProcedureCall id="_1vEa" local="true" procedure="expAddwatch">
              <variable name="item">rectest</variable>
            </ProcedureCall>
            <ProcedureCall id="_1vEb" local="true" procedure="expAddwatch">
              <variable name="item">s1</variable>
            </ProcedureCall>
            <ProcedureCall id="_1vEc" postdelay="1000"
                           procedure="expExpandItems"/>
            <ProcedureCall id="_1vEd" predelay="1000"
                           procedure="expCollapsetems"/>
            <ProcedureCall id="_1vEe" procedure="expDelAll"/>
            <ProcedureCall id="_1vEf" procedure="uiCloseExpressionView"/>
          </TestCase>
          <TestCase id="_1vEg" name="registerView">
            <comment>register view test
</comment>
            <TestStep id="_1vEh" name="dbgMid5Stop">
              <ProcedureCall id="_1vEi" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1vEj" procedure="bpExpMid5"/>
              <ProcedureCall id="_1vEk" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1vEl" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1vEm" procedure="uiShowRegisterView"/>
            <ProcedureCall id="_1vEn" procedure="regExpandItems"/>
            <CheckStringStep client="$(client)"
                             component="Registers.tree@Value&amp;/0/1"
                             id="_1vEo" regexp="true">
              <text>0x[0-9A-F]+</text>
            </CheckStringStep>
            <CheckStringStep client="$(client)"
                             component="Registers.tree@Value&amp;/0/2"
                             id="_1vEp" regexp="true">
              <text>0x[0-9A-F]+</text>
            </CheckStringStep>
            <ProcedureCall id="_1vEq" procedure="regCollapsetems"/>
          </TestCase>
          <TestCase id="_1vEr" name="memoryBrowserView">
            <comment>memory browser view should show library symbols in memory correctly
</comment>
            <TestStep id="_1vEs" name="dbgMid5Stop">
              <ProcedureCall id="_1vEt" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1vEu" procedure="bpExpMid5"/>
              <ProcedureCall id="_1vEv" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1vEw" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1vEx" postdelay="1000"
                           procedure="uiShowMemoryBrowserView"/>
            <TextInputStep clear="true" client="$(client)"
                           component="Memory_Browser2.combo" id="_1vEy"
                           postdelay="1000" single="false">
              <text>&amp;p_q</text>
            </TextInputStep>
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonGo2" event="MOUSE_MPRC"
                            id="_1vEz" modifiers="16" postdelay="1000"/>
            <CheckBooleanStep checktype="visible" client="$(client)"
                              component="Memory_Browser2.canvas" id="_1vE+"/>
            <CheckBooleanStep checktype="visible" client="$(client)"
                              component="Memory_Browser2.canvas2" id="_1vE-"/>
            <ProcedureCall id="_1vF0" postdelay="2000"
                           procedure="memBrowserAddItem"/>
            <CheckBooleanStep checktype="visible" client="$(client)"
                              component="Memory_Browser2.canvas" id="_1vF1"/>
            <CheckBooleanStep checktype="visible" client="$(client)"
                              component="Memory_Browser2.canvas2" id="_1vF2"/>
            <ProcedureCall id="_1vF3" procedure="uiCloseMemoryBrowserView"/>
          </TestCase>
          <TestCase id="_1vF4" name="stepReturn">
            <comment>run-control step return test for library functions

</comment>
            <ProcedureCall id="_1vF5" procedure="uiShowBreakpointView"/>
            <ProcedureCall id="_1vF6" procedure="bpExpMid5"/>
            <RepeatSequence count="5" id="_1vF7" name="stepLoop">
              <ProcedureCall id="_1vF8" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1vF9" procedure="stepReturn"/>
            </RepeatSequence>
            <ProcedureCall id="_1vFA" procedure="uiDelAllBp"/>
          </TestCase>
          <TestCase id="_1vFB" name="openDebugCmdShell">
            <comment>debug view "Debug Command Shell" test
</comment>
            <TestStep id="_1vFC" name="dbgMid5Stop">
              <ProcedureCall id="_1vFD" procedure="uiClickBreakpointView"/>
              <ProcedureCall id="_1vFE" procedure="bpExpMid5"/>
              <ProcedureCall id="_1vFF" procedure="uiCheckFrame5"/>
              <ProcedureCall id="_1vFG" procedure="uiDelAllBp"/>
            </TestStep>
            <ProcedureCall id="_1vFH" procedure="uiOpenDbgShell"/>
            <ProcedureCall id="_1vFI" procedure="dbgCmdErrorCheck"/>
            <ProcedureCall id="_1vFJ" procedure="uiCloseDbgShell"/>
            <ProcedureCall id="_1vFK" procedure="uiDelAllBp"/>
            <ProcedureCall id="_1vFL" procedure="fileCloseAll"/>
          </TestCase>
          <TestCase id="_1vFM" name="terminateAndRelaunch">
            <comment>run-control terminate and relaunch 
</comment>
            <ProcedureCall id="_1vFN" procedure="uiShowBreakpointView"/>
            <ProcedureCall id="_1vFO" procedure="bpExpMid5"/>
            <TestStep id="_1vFP" name="terminateAndRelaunch">
              <RepeatSequence count="3" id="_1vFQ" name="stepLoop">
                <ProcedureCall id="_1vFR" procedure="uiCheckFrame5"/>
                <ProcedureCall id="_1vFS"
                               procedure="dbgViewTerminateRelaunch"/>
                <ProcedureCall id="_1vFT" procedure="dbgStopAtMain"/>
              </RepeatSequence>
            </TestStep>
            <ProcedureCall id="_1vFU" predelay="2000" procedure="uiDelAllBp"/>
            <ProcedureCall id="_1vFV" procedure="fileCloseAll"/>
          </TestCase>
        </TestSet>
      </TestSet>
    </TestSet>
  </TestSet>
  <TestSet id="_1sBN" name="wdmlx">
    <TestSet id="_1sBO" name="wdbrpc">
      <variable name="wdbrpcFlag">false</variable>
      <variable name="conName">""</variable>
      <TestSet id="_1sBP" name="penguin">
        <variable name="debuggee">'penguin'</variable>
        <variable name="object">'penguin'</variable>
        <variable name="exitFlag">true</variable>
        <TestSet id="_1sQ8" name="launch">
          <DependencyReference id="_1sPb" reference="wdm.wdmWsLaunchWdbrpc"/>
          <TestSet id="_1sDI" name="debugCmdShell">
            <TestCase id="_1sEH" name="gdbScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <TestStep id="_1sOW" name="openDebugCmdShell">
                <ProcedureCall id="_1sOX" procedure="uiOpenDbgShell"/>
                <ProcedureCall id="_1sOY" procedure="dbgCmdErrorCheck"/>
              </TestStep>
              <ProcedureCall id="_1sEI" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1sEJ" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1sEK" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sEL" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sEM" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sEN"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1sEO" name="continue" postdelay="3000">
                <ProcedureCall id="_1sEP" procedure="cmdContinue"/>
              </TestStep>
              <TryStep id="_1sXy" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sXz" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sX+"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1sER" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
        <TestSet id="_1sQF" name="launchWithShell">
          <DependencyReference id="_1sRq"
                               reference="wdm.wdmWsLaunchShellWdbrpc">
            <variable name="debuggee">$(debuggee)</variable>
          </DependencyReference>
          <TestSet id="_1sQH" name="debugCmdShell">
            <TestCase id="_1sQI" name="gdbScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <ProcedureCall id="_1sQM" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1sQN" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1sQO" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sX-" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sY0" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sY1"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1sQS" name="continue" postdelay="3000">
                <ProcedureCall id="_1sQT" procedure="cmdContinue"/>
              </TestStep>
              <TryStep id="_1sXv" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sXw" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sXx"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1sQV" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
        <TestSet id="_1sTJ" name="attach">
          <DependencyReference id="_1sTK" reference="wdm.wdmWsAttachWdbrpc"/>
          <TestSet id="_1sTL" name="debugCmdShell">
            <TestCase id="_1sTM" name="gdbScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <TestStep id="_1sTN" name="openDebugCmdShell">
                <ProcedureCall id="_1sWS" procedure="uiOpenDbgShell">
                  <variable name="level">3</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sTP" procedure="dbgCmdErrorCheck"/>
              </TestStep>
              <ProcedureCall id="_1sTQ" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1sTR" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1sTS" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sTT" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sTU" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sTV"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1sTW" name="continue" postdelay="3000">
                <ProcedureCall id="_1sTX" procedure="cmdContinue"/>
              </TestStep>
              <TryStep id="_1sWI" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sTY" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sWJ"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1sTZ" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
        <TestSet id="_1sWf" name="attachWithShell">
          <DependencyReference id="_1sXR"
                               reference="wdm.wdmWsAttachShellWdbrpc">
            <variable name="object">$(object)</variable>
          </DependencyReference>
          <TestSet id="_1sWh" name="debugCmdShell">
            <TestCase id="_1sWi" name="gdbScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <TestStep id="_1sWj" name="openDebugCmdShell">
                <ProcedureCall id="_1sWk" procedure="uiOpenDbgShell">
                  <variable name="level">3</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sWl" procedure="dbgCmdErrorCheck"/>
              </TestStep>
              <ProcedureCall id="_1sWm" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1sWn" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1sWo" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sWp" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sWq" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sWr"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1sWs" name="continue" postdelay="3000">
                <ProcedureCall id="_1sWt" procedure="cmdContinue"/>
              </TestStep>
              <TryStep id="_1sWu" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sWv" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sWw"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1sWx" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
      </TestSet>
      <TestSet id="_1shR" name="singleInstance">
        <variable name="object">'penguin'</variable>
        <variable name="debuggee">'penguin'</variable>
        <variable name="exitFlag">false</variable>
        <TestSet id="_1sid" name="launch">
          <DependencyReference id="_1sie" reference="wdm.wdmWsLaunchWdbrpc">
            <variable name="exitFlag">false</variable>
          </DependencyReference>
          <TestSet id="_1sif" name="debugCmdShell">
            <TestCase id="_1sig" name="gdbScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <TestStep id="_1sih" name="openDebugCmdShell">
                <ProcedureCall id="_1sii" procedure="uiOpenDbgShell"/>
                <ProcedureCall id="_1sij" procedure="dbgCmdErrorCheck"/>
              </TestStep>
              <ProcedureCall id="_1sik" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1sil" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1sim" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sin" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sio" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sip"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1siq" name="continue" postdelay="3000">
                <ProcedureCall id="_1sir" procedure="cmdContinue"/>
              </TestStep>
              <TryStep id="_1sis" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sit" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1siu"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1siv" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
        <TestSet id="_1siw" name="launchWithShell">
          <DependencyReference id="_1six"
                               reference="wdm.wdmWsLaunchShellWdbrpc">
            <variable name="debuggee">$(debuggee)</variable>
            <variable name="exitFlag">$(exitFlag)</variable>
          </DependencyReference>
          <TestSet id="_1siy" name="debugCmdShell">
            <TestCase id="_1siz" name="gdbScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <ProcedureCall id="_1si+" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1si-" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1sj0" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sj1" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sj2" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sj3"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1sj4" name="continue" postdelay="3000">
                <ProcedureCall id="_1sj5" procedure="cmdContinue"/>
              </TestStep>
              <TryStep id="_1sj6" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sj7" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sj8"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1sj9" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
        <TestSet id="_1sjA" name="attach">
          <DependencyReference id="_1sjB" reference="wdm.wdmWsAttachWdbrpc">
            <variable name="exitFlag">$(exitFlag)</variable>
          </DependencyReference>
          <TestSet id="_1sjC" name="debugCmdShell">
            <TestCase id="_1sjD" name="gdbScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <TestStep id="_1sjE" name="openDebugCmdShell">
                <ProcedureCall id="_1sjF" procedure="uiOpenDbgShell">
                  <variable name="level">3</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sjG" procedure="dbgCmdErrorCheck"/>
              </TestStep>
              <ProcedureCall id="_1sjH" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1sjI" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1sjJ" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sjK" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sjL" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sjM"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1sjN" name="continue" postdelay="3000">
                <ProcedureCall id="_1sjO" procedure="cmdContinue"/>
              </TestStep>
              <TryStep id="_1sjP" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sjQ" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sjR"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1sjS" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
        <TestSet id="_1sjT" name="attachWithShell">
          <DependencyReference id="_1sjU"
                               reference="wdm.wdmWsAttachShellWdbrpc">
            <variable name="object">$(object)</variable>
            <variable name="exitFlag">$(exitFlag)</variable>
          </DependencyReference>
          <TestSet id="_1sjV" name="debugCmdShell">
            <TestCase id="_1sjW" name="gdbScript">
              <comment>Debug Command Shell gdb script test

</comment>
              <TestStep id="_1sjX" name="openDebugCmdShell">
                <ProcedureCall id="_1sjY" procedure="uiOpenDbgShell">
                  <variable name="level">3</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sjZ" procedure="dbgCmdErrorCheck"/>
              </TestStep>
              <ProcedureCall id="_1sja" postdelay="1000"
                             procedure="dbgCmdClean"/>
              <ProcedureCall id="_1sjb" procedure="cmdScriptPenguin"/>
              <ProcedureCall id="_1sjc" postdelay="2000"
                             procedure="uiClickBreakpointView"/>
              <TryStep id="_1sjd" name="checkBreakpointView">
                <CheckStringStep client="$(client)"
                                 component="WorkbenchWindow.tree2&amp;/0"
                                 id="_1sje" regexp="true">
                  <text>b_main.cpp:126.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sjf"
                               maxerror="0"/>
              </TryStep>
              <TestStep id="_1sjg" name="continue" postdelay="3000">
                <ProcedureCall id="_1sjh" procedure="cmdContinue"/>
              </TestStep>
              <TryStep id="_1sji" name="checkDebugView">
                <CheckStringStep client="$(client)"
                                 component="Debug.tree&amp;/0/0/0/0"
                                 id="_1sjj" regexp="true">
                  <text>BALL::Move.*</text>
                </CheckStringStep>
                <CatchSequence exception="TestException" id="_1sjk"
                               maxerror="0"/>
              </TryStep>
              <ProcedureCall id="_1sjl" procedure="dbgCmdSave"/>
            </TestCase>
          </TestSet>
        </TestSet>
      </TestSet>
    </TestSet>
    <CleanupSequence id="_1spx" name="exitWdm">
      <TryStep id="_1spy" name="stillConnected">
        <ClientWaiter client="$(client)" engine="swt" id="_1spz" local="true"
                      resvarname="resWdmStartSuccess" timeout="0"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1sp+"
                       maxerror="0">
          <ReturnStep id="_1sp-"/>
        </CatchSequence>
      </TryStep>
      <ProcedureCall id="_1sq0" procedure="wdmExit"/>
    </CleanupSequence>
  </TestSet>
  <TestSet id="_1vum" name="ice2vx">
    <TestSet id="_1vun" name="wb"/>
  </TestSet>
  <PackageRoot id="_3">
    <Package id="_1o9B" name="utils">
      <comment>utils for wdm testing</comment>
      <Procedure id="_1l+X" name="getHostArch">
        <IfSequence id="_1l+Y" test="$(onWindows)">
          <ServerScriptStep id="_1l+a" name="getWinArch">
            <code>import os

arch = os.getenv("PROCESSOR_ARCHITEW6432")

# if envVar does not exist, getenv returns "None"
# in this case, let's assume it is a 32-bit host
if arch == None:
    rc.setGlobal("hostArch", "32-bit")
else:
    if arch.find("64") == -1:
        rc.setGlobal("hostArch", "32-bit")
    else:
        rc.setGlobal("hostArch", "64-bit")
</code>
          </ServerScriptStep>
          <ElseSequence id="_1l+Z" name="onUnix">
            <ShellClientStarter client="arch" command="uname -m" id="_1l+e"/>
            <ProcessWaiter client="arch" id="_1l+f"/>
            <SetGlobalStep id="_1l+g" local="true" varname="output">
              <default>${qftest:client.output.arch}</default>
            </SetGlobalStep>
            <ProcedureCall id="_1l+l" local="true"
                           procedure="wrs.general.utils.stripVariable"
                           retvarname="arch">
              <variable name="variable">$(output)</variable>
            </ProcedureCall>
            <IfSequence id="_1l+h"
                        test="&#34;$(arch)&#34; == &#34;x86_64&#34;">
              <SetGlobalStep id="_1l+i" varname="hostArch">
                <default>64-bit</default>
              </SetGlobalStep>
              <ElseSequence id="_1l+j">
                <SetGlobalStep id="_1l+k" varname="hostArch">
                  <default>32-bit</default>
                </SetGlobalStep>
              </ElseSequence>
            </IfSequence>
            <ServerScriptStep disabled="true" id="_1l+b" name="getUnixArch">
              <code>import os

arch = os.getenv("HOSTTYPE")

# if envVar does not exist, getenv returns "None"
if arch == None:
    rc.setGlobal("hostArch", "")
    rc.logError("Host architecture cannot be detected.")
else:
    if arch.find("64") == -1:
        rc.setGlobal("hostArch", "32-bit")
    else:
        rc.setGlobal("hostArch", "64-bit")
</code>
            </ServerScriptStep>
          </ElseSequence>
        </IfSequence>
      </Procedure>
      <Procedure id="_1lus" name="getHostname">
        <ServerScriptStep id="_1lut">
          <code>import socket
host = socket.gethostname()
rc.setGlobal("hostname", host)</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_3EW" name="getHostPlatform">
        <comment>Returns the host platform where QF-Test and SUT are running.

Possible return values:

- Windows: runs on any Windows platform

- Linux: runs on any Linux platform

- Solaris: runs on any Solaris platform

- unknown: none of the above platforms has been recognized; this should be treated as exception in the calling procedure or test-suite

@return	platform	Type of host platform
</comment>
        <SetGlobalStep id="_3Eg" local="true" varname="hostPlatform"/>
        <IfSequence id="_3EX"
                    test="'${system:os.name}'.find('Windows') &gt;= 0">
          <SetGlobalStep id="_3Eh" local="true" varname="hostPlatform">
            <default>Windows</default>
          </SetGlobalStep>
          <ElseifSequence id="_3EZ"
                          test="'${system:os.name}'.find('Linux') &gt;= 0">
            <SetGlobalStep id="_3Ei" local="true" varname="hostPlatform">
              <default>Linux</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseifSequence id="_3Eb"
                          test="'${system:os.name}'.find('SunOS') &gt;= 0">
            <SetGlobalStep id="_3Ej" local="true" varname="hostPlatform">
              <default>Solaris</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseSequence id="_3Ed">
            <SetGlobalStep id="_3Ek" local="true" varname="hostPlatform">
              <default>unknown</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
        <ReturnStep id="_3Ef" retval="$(hostPlatform)"/>
      </Procedure>
      <Procedure id="_1sAE" name="getExpect">
        <RepeatSequence count="10" id="_1sAF">
          <ProcessClientStarter client="uma"
                                executable="/folk/yzhang0/bin/rexe.exp"
                                id="_1sAG">
            <parameter>-ip</parameter>
            <parameter>$(ip)</parameter>
            <parameter>-p</parameter>
            <parameter>$(sshPort)</parameter>
            <parameter>-u</parameter>
          </ProcessClientStarter>
          <ProcessWaiter check="0" client="uma" id="_1sAH" local="true"
                         resvarname="uma_success" timeout="15000"/>
          <IfSequence id="_1sAI" test="$(uma_success)">
            <ReturnStep id="_1sAN" retval="true"/>
          </IfSequence>
        </RepeatSequence>
        <ReturnStep id="_1sAM" retval="false"/>
      </Procedure>
      <Procedure id="_1o9E" name="qemuServiceStoped">
        <ServerScriptStep id="_1o9L">
          <code>import glob
import os

platform_dir = '$(platformDir)'
var_dir = os.path.join(platform_dir,'host-cross','var')
os.chdir(var_dir)
pid_file = glob.glob('*.pid')

if len(pid_file) &gt; 0:
    rc.setLocal('stopped','False')
else:
    rc.setLocal('stopped','True')

</code>
        </ServerScriptStep>
        <ReturnStep id="_1o9M" retval="$(stopped)"/>
      </Procedure>
      <Procedure id="_1vPp" name="setWinPath">
        <ServerScriptStep id="_1vPq">
          <code>import os

rc.setGlobal('wdmWorkspace',tmpWs) 
rc.setGlobal('platformDir',tmpPd) </code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1o9C" name="killQemuServiceProc">
        <ProcedureCall id="_1o9N" procedure="utils.qemuServiceStoped"
                       retvarname="stopped"/>
        <IfSequence id="_1o9O" test="not $(stopped)">
          <ServerScriptStep id="_1o9P">
            <code>import glob
import os

def get_pid(pid_file):
    '''get pid of the running process which provide sevice for qemu'''
    pf = open(pid_file,'r')
    pid = pf.read()
    pf.close()
    return pid.strip()


platform_dir = '$(platformDir)'
var_dir = os.path.join(platform_dir,'host-cross','var')
os.chdir(var_dir)
pid_file = glob.glob('*.pid')

for file in pid_file:
    pid = get_pid(file)
    os.system('kill' + ' 9 ' + pid)
    os.waitpid(pid)
    os.remove(file)



</code>
          </ServerScriptStep>
        </IfSequence>
        <ServerScriptStep id="_1o9D">
          <code>import glob
import os

def get_pid(pid_file):
    '''get pid of the running process which provide sevice for qemu'''
    pf = open(pid_file,'r')
    pid = pf.read()
    pf.close()
    return pid.strip()


platform_dir = '$(platformDir)'
var_dir = os.path.join(platform_dir,'host-cross','var')
os.chdir(var_dir)
pid_file = glob.glob('*.pid')

for file in pid_file:
    pid = get_pid(file)
    os.system('kill' + ' 9 ' + pid)



</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1vQr" name="sshRestartUma">
        <variable name="sshPort">22</variable>
        <ProcedureCall id="_1vTN" local="true" procedure="utils.getRexePath"
                       retvarname="rexeExp"/>
        <RepeatSequence count="10" id="_1vQs">
          <ProcessClientStarter client="uma" executable="$(rexeExp)"
                                id="_1vQt">
            <parameter>-ip</parameter>
            <parameter>$(ip)</parameter>
            <parameter>-p</parameter>
            <parameter>$(sshPort)</parameter>
            <parameter>-u</parameter>
          </ProcessClientStarter>
          <ProcessWaiter check="0" client="uma" id="_1vQu" local="true"
                         resvarname="uma_success" timeout="15000"/>
          <IfSequence id="_1vQv" test="$(uma_success)">
            <ReturnStep id="_1vQw" retval="true"/>
          </IfSequence>
        </RepeatSequence>
        <ReturnStep id="_1vQx" retval="false"/>
      </Procedure>
      <Procedure id="_1sxy" name="sshStartDebuggee">
        <variable name="tgtDebuggee">$(tgtDebuggee)</variable>
        <ProcedureCall id="_1vTO" local="true" procedure="utils.getRexePath"
                       retvarname="rexeExp"/>
        <RepeatSequence count="10" id="_1sy4" var="idx">
          <ProcessClientStarter client="debuggee" executable="$(rexeExp)"
                                id="_1sy5">
            <parameter>-ip</parameter>
            <parameter>$(ip)</parameter>
            <parameter>-p</parameter>
            <parameter>$(sshPort)</parameter>
            <parameter>-d</parameter>
            <parameter>$(tgtDebuggee)</parameter>
          </ProcessClientStarter>
          <ProcessWaiter check="0" client="debuggee" id="_1sy6" local="true"
                         resvarname="debuggee_success" timeout="15000"/>
          <IfSequence id="_1sy7" test="$(debuggee_success)">
            <ReturnStep id="_1syE" retval="true"/>
          </IfSequence>
        </RepeatSequence>
        <ReturnStep id="_1sy2" retval="false"/>
      </Procedure>
      <Procedure id="_1syF" name="vlmGetTool">
        <variable name="winDrive">z:\\</variable>
        <ServerScriptStep id="_1syM" name="vlmTool">
          <code>import subprocess
import os,sys

if ${qftestJUI:windows}:
    map_drive = '$(winDrive)'
    vlm_env = os.path.join(map_drive,'commandline','vlmEnv.bat') + ' ' + map_drive
    vlm_tool = os.path.join(map_drive,'commandline','vlmTool.bat')
    vlm = vlm_env + ' &amp;&amp; ' + vlm_tool
else:
    vlm = '/folk/vlm/commandline/vlmTool'


rc.setGlobal('vlmTool',vlm)

</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1vQj" name="vlmIpPort">
        <variable name="barcode">$(bc)</variable>
        <ProcedureCall id="_1vQo" procedure="utils.vlmGetTool"/>
        <ServerScriptStep id="_1vQk" name="telnetIPandPort">
          <code>import subprocess
import os,sys

vlm = rc.lookup('vlmTool')

getAttr = vlm + ' getAttr -s amazon.wrs.com -t ' + '$(bc)' + ' '
getIp = getAttr + 'terminalserver'
getPort = getAttr + 'port'

outs = subprocess.Popen(getIp,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE).communicate()[0]
tsIP = outs.decode().strip()

outs = subprocess.Popen(getPort,shell=True,stdout=subprocess.PIPE).communicate()[0]
tsPort = outs.decode().strip()


rc.setGlobal('tsIP', tsIP)
tsPort = 2000 + int(tsPort)
rc.setGlobal('tsPort', tsPort)

</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1ubE" name="vlmBootdev">
        <variable name="barcode">$(bc)</variable>
        <ProcedureCall id="_1vQn" procedure="utils.vlmGetTool"/>
        <ServerScriptStep id="_1ubF" name="bootdev">
          <code>import subprocess,os

vlm = rc.lookup('vlmTool')

getAttr = vlm + ' getAttr -s amazon.wrs.com -t ' + '$(bc)' + ' '
getBootdev = getAttr + 'bootdev'

outs = subprocess.Popen(getBootdev,shell=True,stdout=subprocess.PIPE).communicate()[0]
bootdev = outs.decode().strip()
rc.setLocal('bcBootdev', bootdev)

</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1ubG" name="vlmInet">
        <variable name="barcode">$(bc)</variable>
        <ProcedureCall id="_1vQm" procedure="utils.vlmGetTool"/>
        <ServerScriptStep id="_1ubH" name="inet">
          <code>import subprocess

vlm = rc.lookup('vlmTool')

getAttr = vlm + ' getAttr -s amazon.wrs.com -t ' + '$(bc)' + ' '
getIp = getAttr + 'inet'

outs = subprocess.Popen(getIp,shell=True,stdout=subprocess.PIPE).communicate()[0]
bcInet = outs.decode().strip()
rc.setLocal('bcInet', bcInet)
</code>
        </ServerScriptStep>
        <ReturnStep id="_1vSD" retval="$(bcInet)"/>
      </Procedure>
      <Procedure id="_1u9Y" name="vlmConsoleKill">
        <ProcedureCall id="_1vQq" procedure="utils.vlmGetTool"/>
        <ServerScriptStep id="_1uYj" name="console reset">
          <code>import subprocess

vlm = rc.lookup('vlmTool')

consoleKill = vlm + ' console -s amazon.wrs.com -t ' + '$(bc) kill'
subprocess.Popen(consoleKill,shell=True,stdout=subprocess.PIPE)

</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1szo" name="vlmReboot">
        <variable name="barcode">$(bc)</variable>
        <ProcedureCall id="_1vQp" procedure="utils.vlmGetTool"/>
        <ServerScriptStep id="_1uTq" name="reboot">
          <code>import subprocess

    
vlm = rc.lookup('vlmTool')

reboot = vlm + ' ' + 'reboot -s amazon -t ' + '$(bc)'
try:
    retcode = subprocess.call(reboot,
                    shell=True,
                    stdout = subprocess.PIPE,
                    stderr = subprocess.STDOUT)
    if retcode != 0:
        print("Execution failed:", e )
except OSError:
    print("Execution failed:", e )

</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1vPn" name="getRtpPath">
        <variable name="demo">'penguin'</variable>
        <ServerScriptStep id="_1vPo" name="getDemoPath">
          <code>import sys,os

'''get path to vxworks demo code '''

vx_demo_dir = 'vx_demo_code'
layer_dir   = 'wb_custom_layers'

script_path = sys.path[0]

# now we get the wts root path
wts_path = os.path.split(script_path)[0]
layer_path = os.path.join(wts_path,layer_dir)
vx_demo_path = os.path.join(layer_path,vx_demo_dir)


dirs = os.listdir(vx_demo_path)
if $(demo) in dirs:
    rc.setLocal('demoPath', os.path.join(vx_demo_path,$(demo)))


</code>
        </ServerScriptStep>
        <ReturnStep id="_1vQS" retval="$(demoPath)"/>
      </Procedure>
      <Procedure id="_1vTK" name="getRexePath">
        <variable name="demo">'penguin'</variable>
        <ServerScriptStep id="_1vTL" name="exec.exp">
          <code>import os,sys

rexe_exp = 'rexe.exp'
script_dir = 'script'

suite_path = sys.path[0]
wts_path = os.path.split(suite_path)[0]
script_path = os.path.join(wts_path,script_dir)

rc.setLocal('rexeExp', os.path.join(script_path,rexe_exp))
</code>
        </ServerScriptStep>
        <ReturnStep id="_1vTM" retval="$(rexeExp)"/>
      </Procedure>
      <Procedure id="_1vTX" name="getGdbPenguin">
        <variable name="demo">'penguin'</variable>
        <ServerScriptStep id="_1vTY" name="penguin">
          <code>import os

gdb_script = 'penguin.gdb'

suite_path = sys.path[0]
gdb_file = os.path.join(suite_path,gdb_script)

if '${system:os.name}'.find('Windows') &gt;= 0:
    gdb_file = gdb_file.replace('\\','/')

penguinCmd = 'source ' + gdb_file
rc.setLocal('penguinGdbScript',penguinCmd)
</code>
        </ServerScriptStep>
        <ReturnStep id="_1vTZ" retval="$(penguinGdbScript)"/>
      </Procedure>
      <Procedure id="_1tre" name="buildRtp">
        <variable name="demo">'penguin'</variable>
        <ServerScriptStep id="_1trf" name="buildRtp">
          <code>import sys,os,shutil
import re
import subprocess


def get_platform():
    '''get supported platforms'''
    properties_file = os.path.join(r'$(WIND_HOME)','install.properties')
    # check for exist
    if not os.path.exists(properties_file):
        print('properties_file does NOT exist')
        sys.exit(1)

    # open that file
    pf = open(properties_file,'r')
    # read the entire content
    pfcontent = pf.read()
    platform = re.findall('export WIND_PLATFORM=(.*)\s+',pfcontent)
    if len(platform) &gt; 0:
        return platform
    else:
        print('no available WIND_PLATFORM exist !!')
        print('please make sure your installation is OK !!')
        sys.exit(1)


def cmd_outs(cmd,log_file=None,verbose=False):
    '''exec cmd'''
    p = subprocess.Popen(cmd,
                        shell=True,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
                        #close_fds=True)
    outs,errs = p.communicate()
    if errs:
        sys.stderr.write('FAILED in execute %s \n' % cmd)
        sys.stderr.write(cmd + '\n')

        if log_file:
            log_file.write('FAILED in execute %s \n' % cmd)
            log_file.write(errs + '\n')

        return (False,None)
    else:
        lines = outs.decode().strip()
        if verbose:
            for line in lines:
                print(lines)

        if log_file:
            log_file.write(lines)

        return (True,lines)

def set_env():
    '''set development env'''

    # first save sys env
    for env in os.environ:
        sys_env[env] = os.environ.get(env)
    # get wrenv
    if sys.platform == 'win32':
        wrenv = 'wrenv.exe -o print_env'
        env_sep = ':'
    else:
        wrenv = 'wrenv.sh -o print_env'
        env_sep = '='
    wrenv = os.path.join('$(WIND_HOME)',wrenv)
    vx_ver = [ vx for vx in get_platform() if vx.find('vxworks') != -1 ][0]
    cmd = wrenv+' -p'+' '+ vx_ver
    #lines = os.popen(cmd)

    # we get all the cmd output as one line string !
    (status,line) = cmd_outs(cmd)
    if not status:
        return False
    # try to get list
    lines = line.split(os.linesep)
    for line in lines:
        env_key,env_value = line.split('=')
        if len(env_value) == 0:
            del os.environ[env_key]
        else:
            os.environ[env_key] = env_value

def get_vxdemo_path(demo):
    '''get path to vxworks demo '''

    vx_demo_dir = 'vx_demo_code'
    layer_dir   = 'wb_custom_layers'

    script_path = sys.path[0]

    # now we get the wts root path
    wts_path = os.path.split(script_path)[0]
    layer_path = os.path.join(wts_path,layer_dir)
    vx_demo_path = os.path.join(layer_path,vx_demo_dir)


    dirs = os.listdir(vx_demo_path)
    if demo in dirs:
        return os.path.join(vx_demo_path,demo)


def src_copy(src_dir,dst_dir):
    '''copy source file to dest for test build'''

    global src_code_set
    # change to source directory
    os.chdir(src_dir)
    src_dir = os.getcwd()

    src_files = os.listdir(src_dir)
    for src_file in src_files:
        src_file_name = os.path.basename(src_file)
        if os.path.splitext(src_file_name)[1] not in src_code_set:
            continue
        dst_file = os.path.join(dst_dir,src_file_name)
        shutil.copy(src_file,dst_file)


def rtp_file_add(dst_dir):
    '''add file under current directory for project'''

    global src_type_set
    # change to project directory
    os.chdir(dst_dir)
    (parent_dir,prj_name) = os.path.split(dst_dir)

    # create log for record
    log_name = prj_name + '.log'
    log_file = os.path.join(parent_dir,log_name)
    log_hd = 0
    try:
        log_hd = open(log_file,'a')
    except IOError:
        sys.stderr.write('could not open file %s \n' % log_file)
        return None

    src_files = os.listdir(dst_dir)
    for src_file in src_files:
        if os.path.splitext(src_file)[1] not in src_type_set:
            continue

        file_add_str = 'vxprj rtp file add ' + src_file

        # try to add
        try:
            retcode = subprocess.call(file_add_str,
                            shell=True,
                            stdout = log_hd,
                            stderr = subprocess.STDOUT)
            if retcode != 0:
                return None
        except OSError:
            pass

    # close log file explicitly
    log_hd.close()

def dbg_build(dst_dir):
    '''build project for debug'''

    # change to project directory
    os.chdir(dst_dir)
    dst_dir = os.getcwd()

    (parent_dir,prj_name) = os.path.split(dst_dir)

    # create log for record
    log_name = prj_name + '.log'
    log_file = os.path.join(parent_dir,log_name)
    log_hd = 0
    try:
        log_hd = open(log_file,'a')
    except IOError:
        sys.stderr.write('could not open file %s \n' % log_file)
        return None

    # build the make build string
    debug_c_str = 'ADDED_CFLAGS+=-g'
    optim_close_str = 'CC_OPTIM_NORMAL=-O0'
    build_str = 'make' + ' ' + debug_c_str + ' ' \
               + optim_close_str

    # try to build
    try:
        retcode = subprocess.call(build_str,
                        shell=True,
                        stdout = log_hd,
                        stderr = subprocess.STDOUT)
        if retcode != 0:
            return None
    except OSError:
        pass

    # close log file explicitly
    log_hd.close()



def rtp_create(rtp_name):
    '''create project '''

    global vip_dir

    # change dir to the build directory
    os.chdir(r'$(wdmWorkspace)')

    # create log for record
    log_name = rtp_name + '.log'
    log_file = os.path.join(os.getcwd(),log_name)
    log_hd = 0
    try:
        log_hd = open(log_file,'a')
    except IOError:
        sys.stderr.write('could not open file %s \n' % log_file)
        return None

    # build vxprj create string
    create_str = 'vxprj rtp create -force ' + vip_dir + ' ' + rtp_name

    # try to create
    try:
        retcode = subprocess.call(create_str,
                        shell=True,
                        stdout = log_hd,
                        stderr = subprocess.STDOUT)
        if retcode != 0:
            return None
    except OSError :
        pass

    # close log file explicitly
    log_hd.close()


def rtp_list_create(demo):
    '''create project '''

    # normalize path in src_list
    global vip_dir
    (parent_dir,prj_name) = os.path.split(vip_dir)

    # setup development environment
    set_env()

    # get demo path
    demo_path = get_vxdemo_path(demo)
    # create all the prjects in rtp_list
    rtp_name = os.path.basename(demo_path) + '_rtp_' + prj_name
    rtp_create(rtp_name)
    dst_dir = os.path.join(r'$(wdmWorkspace)',rtp_name)
    src_copy(demo_path,dst_dir)
    rtp_file_add(dst_dir)
    dbg_build(dst_dir)



# main function

vip_dir   = r'$(platformDir)'
sys_env   = {}

build_flag  = False
prj_type_set   = ('dkm','rtp')
src_code_set   = ('.c','.h','.s','.cpp','.hpp')
src_type_set   = ('.c','.s','.cpp')
hrd_type_set   = ('.h','.hpp')
# Top-level script environment
if not os.path.exists(r'$(wdmWorkspace)'):
        os.makedirs(r'$(wdmWorkspace)')

os.chdir(r'$(wdmWorkspace)')

rtp_list_create($(demo))
</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1trh" name="buildSim">
        <ServerScriptStep id="_7" name="buildSim">
          <code>import java
import sys,os
import re
import subprocess

def get_platform(vx_install_dir):
    '''get supported platforms'''

    properties_file = os.path.join(vx_install_dir,'install.properties')
    # check for exist
    if not os.path.exists(properties_file):
        print('properties_file does NOT exist')
        sys.exit(1)

    # open that file
    pf = open(properties_file,'r')
    # read the entire content
    pfcontent = pf.read()
    platform = re.findall('export WIND_PLATFORM=(.*)\s+',pfcontent)
    if len(platform) &gt; 0:
        return platform
    else:
        print('no available WIND_PLATFORM exist !!')
        print('please make sure your installation is OK !!')
        sys.exit(1)


def cmd_outs(cmd,log_file=None,verbose=False):
    '''exec cmd'''

    global vx_build_dir

    os.chdir(vx_build_dir)
    p = subprocess.Popen(cmd,
                        shell=True,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)

    outs,errs = p.communicate()
    if errs:
        sys.stderr.write('FAILED in execute %s \n' % cmd)
        sys.stderr.write(cmd + '\n')

        if log_file:
            log_file.write('FAILED in execute %s \n' % cmd)
            log_file.write(errs + '\n')

        return (False,None)
    else:
        lines = outs.decode().strip()
        if verbose:
            for line in lines:
                print(lines)

        if log_file:
            log_file.write(lines)

        return (True,lines)



def set_env(vx_install_dir):
    '''set development env'''

    # get wrenv
    if '${system:os.name}'.find('Windows') &gt;= 0:
        wrenv = 'wrenv.exe -o print_env'
        env_sep = ':'
    else:
        wrenv = 'wrenv.sh -o print_env'
        env_sep = '='
    wrenv = os.path.join(vx_install_dir,wrenv)
    vx_ver = [ vx for vx in get_platform(vx_install_dir) if vx.find('vxworks') != -1 ][0]
    cmd = wrenv+' -p'+' '+ vx_ver

    # we get all the cmd output as one line string !
    (status,line) = cmd_outs(cmd)
    if not status:
        return False
    # try to get list
    lines = line.split(os.linesep)
    for line in lines:
        env_key,env_value = line.split('=')
        if len(env_value) == 0:
            del os.environ[env_key]
        else:
            os.environ[env_key] = env_value


# default vip build
def vip_create(vip_dir,vip_cmd,vx_install_dir,vx_build_dir):
    ''' execute the vip command'''

    set_env(vx_install_dir)

    file_name = os.path.split(vip_dir)[1] + '.log'

    log_file = os.path.join(vx_build_dir,file_name)
    try:
        log_hd = open(log_file,'w')
    except IOError:
        sys.stderr.write('could not open file %s \n' % log_file)
        return None

    subprocess.call(vip_cmd,
                    shell=True,
                    stdout = log_hd,
                    stderr = subprocess.STDOUT)
    os.chdir(vip_dir)

    wdb_comp  = 'vxprj component add INCLUDE_WDB_ALWAYS_ENABLED'
    subprocess.call(wdb_comp,
                    shell=True,
                    stdout = log_hd,
                    stderr = subprocess.STDOUT)


    build_cmd = 'vxprj build'
    subprocess.call(build_cmd,
                    shell=True,
                    stdout = log_hd,
                    stderr = subprocess.STDOUT)

    log_hd.close()



def linux32_build():
    '''build vxworks linux bsp'''

    global vx_install_dir
    global vx_build_dir
    global linux32tcs
    global create_str

    for tc in linux32tcs:
        # first do the UP build
        vip_name = 'vip_linux_' + tc
        dir_name = os.path.join(vx_build_dir,vip_name)
        vip_cmd  = create_str + ' linux ' + tc + ' ' + dir_name
        vip_create(dir_name,vip_cmd,vx_install_dir,vx_build_dir)

        # then do the SMP build
        vip_name = 'vip_linux_' + tc + '_smp'
        dir_name = os.path.join(vx_build_dir,vip_name)
        vip_cmd  = create_str + ' -smp linux ' + tc + ' ' + dir_name
        vip_create(dir_name,vip_cmd,vx_install_dir,vx_build_dir)


def linux64_build():
    '''build vxworks linux bsp'''

    global vx_install_dir
    global vx_build_dir
    global linux64tcs
    global create_str

    for tc in linux64tcs:
        # first do the UP build
        vip_name = 'vip_linux_' + tc + '_lp64'
        dir_name = os.path.join(vx_build_dir,vip_name)
        vip_cmd  = create_str + ' -lp64 linux ' + tc + ' ' + dir_name
        vip_create(dir_name,vip_cmd,vx_install_dir,vx_build_dir)

        # then do the SMP build
        vip_name = 'vip_linux_' + tc + '_lp64_smp'
        dir_name = os.path.join(vx_build_dir,vip_name)
        vip_cmd  = create_str + ' -lp64 -smp linux ' + tc + ' ' + dir_name
        vip_create(dir_name,vip_cmd,vx_install_dir,vx_build_dir)


# global variable definitions
vx_install_dir = '$(vx_install_dir)'
vx_build_dir = '$(vx_build_dir)'
win_arch   = ['x86','ia64']
linux_arch   = ['i386','x86_64']
linux32tcs = ['gnu','icc','diab']
linux64tcs = ['gnu','icc']
win32tcs = ['gnu','icc','diab']
win64tcs = ['gnu','icc']
create_str = 'vxprj vip create -force -profile PROFILE_DEVELOPMENT -debug'

# Top-level script environment
if __name__ == "__main__":
    linux32_build()
    linux64_build()


</code>
        </ServerScriptStep>
      </Procedure>
    </Package>
    <Package id="_1nKk" name="wdmGeneral">
      <Dependency id="_1nL9" name="wdmExit">
        <CleanupSequence id="_1nLA" name="wdmExit">
          <ProcedureCall id="_1nLB" procedure="wdmExit"/>
        </CleanupSequence>
      </Dependency>
      <Dependency id="_1nL0" name="wdmStart">
        <SetupSequence id="_1nL1" name="wdmStart">
          <ProcedureCall id="_1nL2" postdelay="4000" procedure="wdmStart"/>
        </SetupSequence>
      </Dependency>
    </Package>
    <Package id="_1qLP" name="wb">
      <Dependency id="_1qLQ" name="wbWs">
        <SetupSequence id="_1qLW" name="wbWsStart">
          <SetGlobalStep id="_1sqJ" varname="client">
            <default>wbWsStart</default>
          </SetGlobalStep>
          <TryStep id="_1sqK" name="startWdm">
            <ClientWaiter client="$(client)" engine="swt" id="_1sqL"
                          local="true" timeout="1000"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1sqM"
                           maxerror="0">
              <ProcedureCall id="_1sqN" procedure="wbStartWs"
                             retvarname="sutConnected"/>
              <TryStep id="_1sqO" name="closeOptDialog">
                <ComponentWaiter client="$(client)"
                                 component="WROptionalMessageDialog"
                                 id="_1sqP" timeout="5000"/>
                <MouseEventStep clicks="1" client="$(client)"
                                component="buttonDo_not_show_again"
                                event="MOUSE_MPRC" id="_1sqQ" modifiers="16"/>
                <MouseEventStep clicks="1" client="$(client)"
                                component="buttonOk27" event="MOUSE_MPRC"
                                id="_1sqR" modifiers="16"/>
                <CatchSequence exception="ComponentNotFoundException"
                               id="_1sqS" maxerror="0" name="ignore"/>
              </TryStep>
              <ProcedureCall id="_1vsP" procedure="fileCloseGetStarted"/>
              <IfSequence id="_1vQ7"
                          test="'${system:os.name}'.find('Windows') &gt;= 0">
                <SetGlobalStep id="_1vTe" varname="onWindows">
                  <default>True</default>
                </SetGlobalStep>
                <ProcedureCall id="_1vQH" procedure="win1600x1000"/>
                <ElseSequence id="_1vQI" name="non windows host">
                  <SetGlobalStep id="_1vTf" varname="onWindows">
                    <default>False</default>
                  </SetGlobalStep>
                  <ProcedureCall id="_1thC" procedure="winFullScreen"/>
                </ElseSequence>
              </IfSequence>
            </CatchSequence>
          </TryStep>
        </SetupSequence>
        <CleanupSequence id="_1qLg" name="wbExit">
          <TryStep id="_1qU7" name="exitWb">
            <ClientWaiter client="$(client)" engine="swt" id="_1qU8"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1qU9"
                           maxerror="0">
              <ReturnStep id="_1qUB"/>
            </CatchSequence>
          </TryStep>
          <ProcedureCall id="_1qLh" procedure="wbExit"/>
        </CleanupSequence>
      </Dependency>
      <Dependency id="_1vuI" name="wbOcdPerspective">
        <DependencyReference id="_1vuk" reference="wb.wbWs"/>
        <SetupSequence id="_1vuJ" name="ocd">
          <ProcedureCall id="_1vul" procedure="uiOpenOcdPespective"/>
          <ProcedureCall id="_1u8E" postdelay="1000" predelay="1000"
                         procedure="uiSetSash4Width"/>
          <ProcedureCall id="_1vQi" postdelay="1000"
                         procedure="uiSetSash3Width"/>
        </SetupSequence>
      </Dependency>
      <Dependency id="_1vr6" name="wdmWs">
        <SetupSequence id="_1vr7" name="wdmWsStart">
          <SetGlobalStep id="_1vr8" varname="client">
            <default>wdmWsStart</default>
          </SetGlobalStep>
          <TryStep id="_1vr9" name="startWdm">
            <ClientWaiter client="$(client)" engine="swt" id="_1vrA"
                          local="true" timeout="1000"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1vrB"
                           maxerror="0">
              <ProcedureCall id="_1vrC" procedure="wdmStartWs"
                             retvarname="sutConnected"/>
              <TryStep id="_1vrD" name="closeOptDialog">
                <ComponentWaiter client="$(client)"
                                 component="WROptionalMessageDialog"
                                 id="_1vrE" timeout="5000"/>
                <MouseEventStep clicks="1" client="$(client)"
                                component="buttonDo_not_show_again"
                                event="MOUSE_MPRC" id="_1vrF" modifiers="16"/>
                <MouseEventStep clicks="1" client="$(client)"
                                component="buttonOk27" event="MOUSE_MPRC"
                                id="_1vrG" modifiers="16"/>
                <CatchSequence exception="ComponentNotFoundException"
                               id="_1vrH" maxerror="0" name="ignore"/>
              </TryStep>
              <ProcedureCall id="_1vrI" procedure="fileCloseAllOpt"/>
              <IfSequence id="_1vrJ"
                          test="'${system:os.name}'.find('Windows') &gt;= 0">
                <SetGlobalStep id="_1vrK" varname="onWindows">
                  <default>True</default>
                </SetGlobalStep>
                <ProcedureCall id="_1vrL" procedure="win1600x1000"/>
                <ElseSequence id="_1vrM" name="non windows host">
                  <SetGlobalStep id="_1vrN" varname="onWindows">
                    <default>False</default>
                  </SetGlobalStep>
                  <ProcedureCall id="_1vrO" procedure="winFullScreen"/>
                </ElseSequence>
              </IfSequence>
              <ProcedureCall id="_1vrP" postdelay="1000" predelay="1000"
                             procedure="uiSetSash4Width"/>
              <ProcedureCall id="_1vrQ" postdelay="1000"
                             procedure="uiSetSash3Width"/>
            </CatchSequence>
          </TryStep>
        </SetupSequence>
        <CleanupSequence id="_1vrR" name="wdmWsExit">
          <TryStep id="_1vrS" name="exitWdm">
            <ClientWaiter client="$(client)" engine="swt" id="_1vrT"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1vrU"
                           maxerror="0">
              <ReturnStep id="_1vrV"/>
            </CatchSequence>
          </TryStep>
          <ProcedureCall id="_1vrW" procedure="wdmExit"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedexec="true" id="_1sga" name="wdbrpc">
        <DependencyReference id="_1sqU" reference="wb.wdmWs"/>
        <SetupSequence id="_1sgb" name="rseCon">
          <TestStep id="_1sgc" name="wdbrpcConnect">
            <TryStep id="_1vQJ" name="if not specify ip address">
              <IfSequence id="_1ueG" test="not &#34;$(ip)&#34;">
                <ProcedureCall id="_1vSE" procedure="utils.vlmInet">
                  <variable name="barcode">$(bc)</variable>
                </ProcedureCall>
                <SetGlobalStep id="_1vQN" varname="ip">
                  <default>$(bcInet)</default>
                </SetGlobalStep>
              </IfSequence>
              <CatchSequence exception="UnboundVariableException" id="_1vQK"
                             maxerror="0">
                <ProcedureCall id="_1vSF" procedure="utils.vlmInet">
                  <variable name="barcode">$(bc)</variable>
                </ProcedureCall>
                <SetGlobalStep id="_1vSG" varname="ip">
                  <default>$(bcInet)</default>
                </SetGlobalStep>
                <ServerScriptStep disabled="true" id="_1ueH" name="inet">
                  <code>import subprocess

if ${qftestJUI:windows}:
    vlm = 'vlmTool'
else:
    vlm = '/folk/vlm/commandline/vlmTool'

getAttr = vlm + ' getAttr -s amazon.wrs.com -t ' + '$(bc)' + ' '
getIp = getAttr + 'inet'

outs = subprocess.Popen(getIp,shell=True,stdout=subprocess.PIPE).communicate()[0]
bcInet = outs.decode().strip()
rc.setLocal('bcInet', bcInet)

</code>
                </ServerScriptStep>
                <SetGlobalStep disabled="true" id="_1ueI" varname="ip">
                  <default>$(bcInet)</default>
                </SetGlobalStep>
              </CatchSequence>
              <CatchSequence exception="TestException" id="_1vQL"
                             maxerror="0"/>
            </TryStep>
            <ServerScriptStep id="_1sgv" name="setConName">
              <code>import os

#ip = rc.lookup('ip')
prjBase = os.path.basename(os.path.normpath(r'$(platformDir)'))

conName = 'wdbrpc--' + prjBase + '--' + '$(ip)'

rc.setGlobal('conName',conName)
</code>
            </ServerScriptStep>
            <TryStep id="_1ueJ" name="select connection in RSE">
              <ProcedureCall id="_1ueK" procedure="qfs.swt.tree.selectNode">
                <variable name="id">Remote_Systems</variable>
                <variable name="node">$(conName).*</variable>
                <variable name="separator">%</variable>
              </ProcedureCall>
              <CatchSequence exception="IndexNotFoundException" id="_1ueL"
                             maxerror="0">
                <SetGlobalStep id="_1ueM" varname="wdbrpcFlag">
                  <default>false</default>
                </SetGlobalStep>
              </CatchSequence>
              <CatchSequence exception="TestException" id="_1ueN"
                             maxerror="0"/>
            </TryStep>
            <WhileSequence id="_1sge" test="not $(wdbrpcFlag)">
              <WhileSequence id="_1ueO" name="existOne?" test="1">
                <TryStep id="_1ueP" name="conNameExist?">
                  <ComponentWaiter client="$(client)"
                                   component="Remote_Systems%/$(conName).*"
                                   id="_1ueQ" timeout="1000"/>
                  <CatchSequence exception="ComponentNotFoundException"
                                 id="_1ueR" maxerror="0">
                    <BreakStep id="_1ueS"/>
                  </CatchSequence>
                </TryStep>
                <ProcedureCall id="_1ueT" procedure="rseDelName">
                  <variable name="vxName">$(conName)</variable>
                </ProcedureCall>
              </WhileSequence>
              <IfSequence id="_1vTP" test="$(onWindows)">
                <ProcedureCall id="_1vTU" local="true" procedure="lxConsole"
                               retvarname="getIt"/>
                <IfSequence id="_1vTV" test="not $(getIt)">
                  <ProcedureCall id="_1vTW"
                                 procedure="qfs.utils.testrun.skip.skipTestSet"/>
                </IfSequence>
                <ProcedureCall id="_1vTT" local="true"
                               procedure="uiLxUmaRestart" retvarname="login">
                  <variable name="bc">$(bc)</variable>
                </ProcedureCall>
                <ElseSequence id="_1vTR" name="non windows host">
                  <ProcedureCall id="_1sgp" local="true"
                                 procedure="utils.sshRestartUma"
                                 retvarname="login"/>
                </ElseSequence>
              </IfSequence>
              <IfSequence id="_1sgq" test="not $(login)">
                <ProcedureCall id="_1sgr" procedure="qfs.run-log.logMessage">
                  <variable name="message">failed to login the board</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sgs"
                               procedure="qfs.utils.testrun.skip.skipTestSet"/>
                <BreakStep id="_1sgt"/>
              </IfSequence>
              <ServerScriptStep id="_1sgw" name="rootfs">
                <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1sgx" local="true" postdelay="5000"
                             procedure="conLxUmaUdpPort"
                             retvarname="created"/>
              <IfSequence id="_1sgy" test="$(created)">
                <ProcedureCall id="_1uf7" local="true" procedure="rseLxWait"
                               retvarname="connected">
                  <variable name="vxName">$(conName)</variable>
                </ProcedureCall>
                <IfSequence id="_1sg+" test="$(connected)">
                  <SetGlobalStep id="_1sg-" varname="wdbrpcFlag">
                    <default>true</default>
                  </SetGlobalStep>
                  <ProcedureCall id="_1ugv" procedure="rseCollopse"/>
                </IfSequence>
              </IfSequence>
            </WhileSequence>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1sh1" name="rseDisCon">
          <TryStep id="_1sh2">
            <ClientWaiter client="$(client)" engine="swt" id="_1sh3"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1sh4"
                           maxerror="0">
              <ReturnStep id="_1sh5"/>
            </CatchSequence>
          </TryStep>
          <SetGlobalStep id="_1vU0" varname="wdbrpcFlag">
            <default>false</default>
          </SetGlobalStep>
          <ProcedureCall id="_1uf8" procedure="rseDelName">
            <variable name="vxName">$(conName)</variable>
          </ProcedureCall>
        </CleanupSequence>
      </Dependency>
      <Dependency id="_1rBd" name="wdbproxyMipc">
        <DependencyReference id="_1rBe" reference="wb.wdmWs"/>
        <SetupSequence id="_1rBf" name="rseCon">
          <TestStep id="_1rBx" name="connect to target from RSE">
            <ProcedureCall id="_1rBy" procedure="uiClickRse"/>
            <ServerScriptStep id="_1rBz" name="setConName">
              <code>import os

prjBase = os.path.basename(r'$(platformDir)')
conName = 'wdbproxy-MIPC--' + prjBase + '--' + '$(ip)'

rc.setGlobal('conName',conName)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1rB+" local="true"
                           procedure="qfs.swt.tree.getRowCount"
                           retvarname="nr_rse">
              <variable name="id">Remote_Systems</variable>
            </ProcedureCall>
            <IfSequence id="_1rB-" test="$(nr_rse) &gt; 1">
              <ProcedureCall id="_1rC0" procedure="rseClean">
                <comment>delete all rse connections</comment>
              </ProcedureCall>
              <ServerScriptStep id="_1rC1" name="lxMipcConCfg">
                <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')

debuggee = 'mthread_stack'
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setGlobal('hostDebuggee',hostDebuggee)
rc.setGlobal('tgtDebuggee',tgtDebuggee)</code>
              </ServerScriptStep>
              <ProcedureCall id="_1rHb" procedure="conLxWrproxyMipc"/>
              <TryStep id="_1rC-" name="connect">
                <TimeConstrainedSequence id="_1rD0" name="connect"
                                         timeerror="3" timelimit="120000">
                  <ProcedureCall id="_1rD1" procedure="conFirst"/>
                  <ProcedureCall id="_1rD2" procedure="rseConWait"/>
                  <ComponentWaiter client="$(client)"
                                   component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                   id="_1rD3" local="true" predelay="2000"
                                   timeout="120000">
                    <comment>wait for connection to complete</comment>
                  </ComponentWaiter>
                </TimeConstrainedSequence>
                <CatchSequence exception="CheckFailedException" id="_1rD4"
                               maxerror="0">
                  <ProcedureCall id="_1rD5"
                                 procedure="qfs.utils.testrun.skip.skipTestSet"/>
                </CatchSequence>
              </TryStep>
              <ElseifSequence id="_1rD6" test="$(nr_rse) == 0">
                <ServerScriptStep id="_1rP5" name="lxMipcConCfg">
                  <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')

debuggee = 'mthread_stack'
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setGlobal('hostDebuggee',hostDebuggee)
rc.setGlobal('tgtDebuggee',tgtDebuggee)</code>
                </ServerScriptStep>
                <ProcedureCall id="_1rP6" procedure="conLxWrproxyMipc"/>
                <TryStep id="_1rE5" name="connect">
                  <TimeConstrainedSequence id="_1rE6" name="connect"
                                           timeerror="3" timelimit="120000">
                    <ProcedureCall id="_1rE7" procedure="conFirst"/>
                    <ProcedureCall id="_1rE8" procedure="rseConWait"/>
                    <ComponentWaiter client="$(client)"
                                     component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                     id="_1rE9" local="true" predelay="2000"
                                     timeout="120000">
                      <comment>wait for connection to complete</comment>
                    </ComponentWaiter>
                  </TimeConstrainedSequence>
                  <CatchSequence exception="CheckFailedException" id="_1rEA"
                                 maxerror="0">
                    <ProcedureCall id="_1rEB"
                                   procedure="qfs.utils.testrun.skip.skipTestSet"/>
                  </CatchSequence>
                </TryStep>
              </ElseifSequence>
              <ElseSequence id="_1rEC" name="only one connection in RSE">
                <ProcedureCall id="_1rED" local="true" procedure="rseConName"
                               retvarname="oldName"/>
                <IfSequence id="_1rEE"
                            test="not &#34;$(oldName)&#34; == &#34;$(conName)&#34;">
                  <ProcedureCall id="_1rEF" procedure="rseClean">
                    <comment>delete all rse connections</comment>
                  </ProcedureCall>
                  <ServerScriptStep id="_1rP7" name="lxMipcConCfg">
                    <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')

debuggee = 'mthread_stack'
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setGlobal('hostDebuggee',hostDebuggee)
rc.setGlobal('tgtDebuggee',tgtDebuggee)</code>
                  </ServerScriptStep>
                  <ProcedureCall id="_1rP8" procedure="conLxWrproxyMipc"/>
                  <TryStep id="_1rFE" name="connect">
                    <TimeConstrainedSequence id="_1rFF" name="connect"
                                             timeerror="3" timelimit="120000">
                      <ProcedureCall id="_1rFG" procedure="conFirst"/>
                      <ProcedureCall id="_1rFH" procedure="rseConWait"/>
                      <ComponentWaiter client="$(client)"
                                       component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                       id="_1rFI" local="true" predelay="2000"
                                       timeout="120000">
                        <comment>wait for connection to complete</comment>
                      </ComponentWaiter>
                    </TimeConstrainedSequence>
                    <CatchSequence exception="CheckFailedException" id="_1rFJ"
                                   maxerror="0">
                      <ProcedureCall id="_1rFK"
                                     procedure="qfs.utils.testrun.skip.skipTestSet"/>
                    </CatchSequence>
                  </TryStep>
                  <ElseSequence id="_1rFL" name="same connection name is RSE">
                    <ProcedureCall id="_1rFM" local="true"
                                   procedure="rseConnected"
                                   retvarname="rseConnected"/>
                    <IfSequence id="_1rFN"
                                test="&#34;$(rseConnected)&#34; == &#34;unknown&#34;">
                      <ProcedureCall id="_1rFO" procedure="rseClean">
                        <comment>delete all rse connections</comment>
                      </ProcedureCall>
                      <ServerScriptStep id="_1rP9" name="lxMipcConCfg">
                        <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')

debuggee = 'mthread_stack'
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setGlobal('hostDebuggee',hostDebuggee)
rc.setGlobal('tgtDebuggee',tgtDebuggee)</code>
                      </ServerScriptStep>
                      <ProcedureCall id="_1rPA" procedure="conLxWrproxyMipc"/>
                      <TryStep id="_1rGN" name="connect">
                        <TimeConstrainedSequence id="_1rGO" name="connect"
                                                 timeerror="3"
                                                 timelimit="120000">
                          <ProcedureCall id="_1rGP" procedure="conFirst"/>
                          <ProcedureCall id="_1rGQ" procedure="rseConWait"/>
                          <ComponentWaiter client="$(client)"
                                           component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                           id="_1rGR" local="true"
                                           predelay="2000" timeout="120000">
                            <comment>wait for connection to complete</comment>
                          </ComponentWaiter>
                        </TimeConstrainedSequence>
                        <CatchSequence exception="CheckFailedException"
                                       id="_1rGS" maxerror="0">
                          <ProcedureCall id="_1rGT"
                                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
                        </CatchSequence>
                      </TryStep>
                      <ElseifSequence id="_1rGU"
                                      test="&#34;$(rseConnected)&#34; == &#34;False&#34;">
                        <TryStep id="_1rHR" name="connect">
                          <TimeConstrainedSequence id="_1rHS" name="connect"
                                                   timeerror="3"
                                                   timelimit="120000">
                            <ProcedureCall id="_1rHT" procedure="conFirst"/>
                            <ProcedureCall id="_1rHU" procedure="rseConWait"/>
                            <ComponentWaiter client="$(client)"
                                             component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                             id="_1rHV" local="true"
                                             predelay="2000" timeout="120000">
                              <comment>wait for connection to complete</comment>
                            </ComponentWaiter>
                          </TimeConstrainedSequence>
                          <CatchSequence exception="CheckFailedException"
                                         id="_1rHW" maxerror="0">
                            <ProcedureCall id="_1rHX"
                                           procedure="qfs.utils.testrun.skip.skipTestSet"/>
                          </CatchSequence>
                        </TryStep>
                      </ElseifSequence>
                      <ElseSequence id="_1rHY"/>
                    </IfSequence>
                  </ElseSequence>
                </IfSequence>
              </ElseSequence>
            </IfSequence>
            <ProcedureCall id="_1u9E" procedure="uiShowLineNum"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1rHZ" name="rseDisCon">
          <ProcedureCall id="_1rHa" procedure="rseClean">
            <comment>delete all rse connections</comment>
          </ProcedureCall>
        </CleanupSequence>
      </Dependency>
      <Dependency id="_1rPB" name="wdbproxyUdp">
        <DependencyReference id="_1rPC" reference="wb.wdmWs"/>
        <SetupSequence id="_1rPD" name="rseCon">
          <TestStep id="_1rPV" name="connect to target from RSE">
            <ProcedureCall id="_1rPW" procedure="uiClickRse"/>
            <ServerScriptStep id="_1rPX" name="setConName">
              <code>import os

prjBase = os.path.basename(r'$(platformDir)')
conName = 'wdbproxy-UDP--' + prjBase + '--' + '$(ip)'

rc.setGlobal('conName',conName)
</code>
            </ServerScriptStep>
            <ProcedureCall id="_1rPY" local="true"
                           procedure="qfs.swt.tree.getRowCount"
                           retvarname="nr_rse">
              <variable name="id">Remote_Systems</variable>
            </ProcedureCall>
            <IfSequence id="_1rPZ" test="$(nr_rse) &gt; 1">
              <ProcedureCall id="_1rPa" procedure="rseClean">
                <comment>delete all rse connections</comment>
              </ProcedureCall>
              <ServerScriptStep id="_1rPb" name="config">
                <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')

debuggee = 'mthread_stack'
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setGlobal('hostDebuggee',hostDebuggee)
rc.setGlobal('tgtDebuggee',tgtDebuggee)</code>
              </ServerScriptStep>
              <ProcedureCall id="_1rQT" procedure="conLxWrproxyUdpPort"/>
              <TryStep id="_1rPd" name="connect">
                <TimeConstrainedSequence id="_1rPe" name="connect"
                                         timeerror="3" timelimit="120000">
                  <ProcedureCall id="_1rPf" procedure="conFirst"/>
                  <ProcedureCall id="_1rPg" procedure="rseConWait"/>
                  <ComponentWaiter client="$(client)"
                                   component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                   id="_1rPh" local="true" predelay="2000"
                                   timeout="120000">
                    <comment>wait for connection to complete</comment>
                  </ComponentWaiter>
                </TimeConstrainedSequence>
                <CatchSequence exception="CheckFailedException" id="_1rPi"
                               maxerror="0">
                  <ProcedureCall id="_1rPj"
                                 procedure="qfs.utils.testrun.skip.skipTestSet"/>
                </CatchSequence>
              </TryStep>
              <ElseifSequence id="_1rPk" test="$(nr_rse) == 0">
                <ServerScriptStep id="_1rQU" name="lxL2swConCfg">
                  <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')

debuggee = 'mthread_stack'
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setGlobal('hostDebuggee',hostDebuggee)
rc.setGlobal('tgtDebuggee',tgtDebuggee)</code>
                </ServerScriptStep>
                <ProcedureCall id="_1rQV" procedure="conLxWrproxyUdpPort"/>
                <TryStep id="_1rPn" name="connect">
                  <TimeConstrainedSequence id="_1rPo" name="connect"
                                           timeerror="3" timelimit="120000">
                    <ProcedureCall id="_1rPp" procedure="conFirst"/>
                    <ProcedureCall id="_1rPq" procedure="rseConWait"/>
                    <ComponentWaiter client="$(client)"
                                     component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                     id="_1rPr" local="true" predelay="2000"
                                     timeout="120000">
                      <comment>wait for connection to complete</comment>
                    </ComponentWaiter>
                  </TimeConstrainedSequence>
                  <CatchSequence exception="CheckFailedException" id="_1rPs"
                                 maxerror="0">
                    <ProcedureCall id="_1rPt"
                                   procedure="qfs.utils.testrun.skip.skipTestSet"/>
                  </CatchSequence>
                </TryStep>
              </ElseifSequence>
              <ElseSequence id="_1rPu" name="only one connection in RSE">
                <ProcedureCall id="_1rPv" local="true" procedure="rseConName"
                               retvarname="oldName"/>
                <IfSequence id="_1rPw"
                            test="not &#34;$(oldName)&#34; == &#34;$(conName)&#34;">
                  <ProcedureCall id="_1rPx" procedure="rseClean">
                    <comment>delete all rse connections</comment>
                  </ProcedureCall>
                  <ServerScriptStep id="_1rQW" name="lxL2swConCfg">
                    <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')

debuggee = 'mthread_stack'
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setGlobal('hostDebuggee',hostDebuggee)
rc.setGlobal('tgtDebuggee',tgtDebuggee)</code>
                  </ServerScriptStep>
                  <ProcedureCall id="_1rQX" procedure="conLxWrproxyUdpPort"/>
                  <TryStep id="_1rP+" name="connect">
                    <TimeConstrainedSequence id="_1rP-" name="connect"
                                             timeerror="3" timelimit="120000">
                      <ProcedureCall id="_1rQ0" procedure="conFirst"/>
                      <ProcedureCall id="_1rQ1" procedure="rseConWait"/>
                      <ComponentWaiter client="$(client)"
                                       component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                       id="_1rQ2" local="true" predelay="2000"
                                       timeout="120000">
                        <comment>wait for connection to complete</comment>
                      </ComponentWaiter>
                    </TimeConstrainedSequence>
                    <CatchSequence exception="CheckFailedException" id="_1rQ3"
                                   maxerror="0">
                      <ProcedureCall id="_1rQ4"
                                     procedure="qfs.utils.testrun.skip.skipTestSet"/>
                    </CatchSequence>
                  </TryStep>
                  <ElseSequence id="_1rQ5" name="same connection name is RSE">
                    <ProcedureCall id="_1rQ6" local="true"
                                   procedure="rseConnected"
                                   retvarname="rseConnected"/>
                    <IfSequence id="_1rQ7"
                                test="&#34;$(rseConnected)&#34; == &#34;unknown&#34;">
                      <ProcedureCall id="_1rQ8" procedure="rseClean">
                        <comment>delete all rse connections</comment>
                      </ProcedureCall>
                      <ServerScriptStep id="_1rQY" name="lxL2swConCfg">
                        <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')

debuggee = 'mthread_stack'
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setGlobal('hostDebuggee',hostDebuggee)
rc.setGlobal('tgtDebuggee',tgtDebuggee)</code>
                      </ServerScriptStep>
                      <ProcedureCall id="_1rQZ"
                                     procedure="conLxWrproxyUdpPort"/>
                      <TryStep id="_1rQB" name="connect">
                        <TimeConstrainedSequence id="_1rQC" name="connect"
                                                 timeerror="3"
                                                 timelimit="120000">
                          <ProcedureCall id="_1rQD" procedure="conFirst"/>
                          <ProcedureCall id="_1rQE" procedure="rseConWait"/>
                          <ComponentWaiter client="$(client)"
                                           component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                           id="_1rQF" local="true"
                                           predelay="2000" timeout="120000">
                            <comment>wait for connection to complete</comment>
                          </ComponentWaiter>
                        </TimeConstrainedSequence>
                        <CatchSequence exception="CheckFailedException"
                                       id="_1rQG" maxerror="0">
                          <ProcedureCall id="_1rQH"
                                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
                        </CatchSequence>
                      </TryStep>
                      <ElseifSequence id="_1rQI"
                                      test="&#34;$(rseConnected)&#34; == &#34;False&#34;">
                        <TryStep id="_1rQJ" name="connect">
                          <TimeConstrainedSequence id="_1rQK" name="connect"
                                                   timeerror="3"
                                                   timelimit="120000">
                            <ProcedureCall id="_1rQL" procedure="conFirst"/>
                            <ProcedureCall id="_1rQM" procedure="rseConWait"/>
                            <ComponentWaiter client="$(client)"
                                             component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                                             id="_1rQN" local="true"
                                             predelay="2000" timeout="120000">
                              <comment>wait for connection to complete</comment>
                            </ComponentWaiter>
                          </TimeConstrainedSequence>
                          <CatchSequence exception="CheckFailedException"
                                         id="_1rQO" maxerror="0">
                            <ProcedureCall id="_1rQP"
                                           procedure="qfs.utils.testrun.skip.skipTestSet"/>
                          </CatchSequence>
                        </TryStep>
                      </ElseifSequence>
                      <ElseSequence id="_1rQQ"/>
                    </IfSequence>
                  </ElseSequence>
                </IfSequence>
              </ElseSequence>
            </IfSequence>
            <ProcedureCall id="_1u9D" procedure="uiShowLineNum"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1rQR" name="rseDisCon">
          <ProcedureCall id="_1rQS" procedure="rseClean">
            <comment>delete all rse connections</comment>
          </ProcedureCall>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1saL" name="wdbrpcLaunch">
        <variable name="tgtDebuggee"/>
        <DependencyReference id="_1sh7" reference="wb.wdbrpc"/>
        <SetupSequence id="_1saN" name="wdbrpcLaunch">
          <TestStep id="_1saO" name="wdbrpcLaunch">
            <ProcedureCall id="_1saP" procedure="rseSelectProcess"/>
            <ProcedureCall id="_1saQ" procedure="uiLaunchApp">
              <variable name="app">$(tgtDebuggee)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1trw" procedure="uiCheckModelDialog"/>
            <ProcedureCall id="_1saR" local="true" procedure="dbgStopAtMain"
                           retvarname="success"/>
            <IfSequence id="_1trx" test="not $(success)">
              <ProcedureCall id="_1try"
                             procedure="qfs.utils.testrun.skip.skipTestSet"/>
            </IfSequence>
            <ProcedureCall id="_1trz" procedure="uiShowLineNum"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1saS" name="clearDebugView">
          <TestStep id="_1saT" name="clearDebugView">
            <ProcedureCall id="_1saU" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1saV" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1seF" name="wdbrpcAttach">
        <variable name="tgtDebuggee"/>
        <variable name="object"/>
        <DependencyReference id="_1seG" reference="wb.wdbrpc"/>
        <SetupSequence id="_1seH" name="attachPenguin">
          <ServerScriptStep id="_1seI" name="debuggee">
            <code>import os

debuggee = $(debuggee)

tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setLocal('tgtDebuggee',tgtDebuggee)</code>
          </ServerScriptStep>
          <TestStep id="_1seJ" name="debuggee start" postdelay="2000">
            <RepeatSequence count="10" id="_1seK" var="idx">
              <ProcessClientStarter client="debuggee"
                                    executable="/folk/yzhang0/bin/rexe.exp"
                                    id="_1seL">
                <parameter>-ip</parameter>
                <parameter>$(ip)</parameter>
                <parameter>-p</parameter>
                <parameter>$(sshPort)</parameter>
                <parameter>-d</parameter>
                <parameter>$(tgtDebuggee)</parameter>
              </ProcessClientStarter>
              <ProcessWaiter check="0" client="debuggee" id="_1seM"
                             local="true" resvarname="debuggee_success"
                             timeout="15000"/>
              <IfSequence id="_1seN" test="$(debuggee_success)">
                <BreakStep id="_1seO"/>
              </IfSequence>
              <IfSequence id="_1seP" test="$(idx) &gt;= 9">
                <ProcedureCall id="_1seQ"
                               procedure="qfs.utils.testrun.skip.skipTestCase"/>
              </IfSequence>
            </RepeatSequence>
          </TestStep>
          <TestStep id="_1seR" name="rseAttachPenguin">
            <ProcedureCall id="_1seS" procedure="rseAttachPenguin"/>
            <TryStep id="_1seT" name="waitforDebugViewShow">
              <ComponentWaiter client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1seU"
                               timeout="30000"/>
              <CatchSequence exception="IndexNotFoundException" id="_1seV"
                             maxerror="2">
                <ProcedureCall id="_1seW" procedure="qfs.run-log.logError">
                  <variable name="message">qftest failed even to manually attach from penguin</variable>
                  <variable name="withScreenshots">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1seX"
                               procedure="qfs.utils.testrun.skip.skipTestSet"/>
              </CatchSequence>
              <CatchSequence exception="ComponentNotFoundException" id="_1seY"
                             maxerror="2">
                <ProcedureCall id="_1seZ" procedure="qfs.run-log.logError">
                  <variable name="message">qftest failed even to manually attach from penguin</variable>
                  <variable name="withScreenshots">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sea"
                               procedure="qfs.utils.testrun.skip.skipTestSet"/>
              </CatchSequence>
            </TryStep>
            <ProcedureCall id="_1u9C" procedure="uiShowLineNum"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1seb" name="clearDebugView">
          <TestStep id="_1sec" name="clearDebugView">
            <ProcedureCall id="_1sed" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1see" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1qSf"
                  name="multiThreadsLaunchWdbrpc">
        <DependencyReference id="_1qSg" reference="wb.wdbrpc"/>
        <SetupSequence id="_1qT3" name="launchMulti-ThreadsApp">
          <TestStep id="_1qT4" name="rseLaunchMulti-ThreadsApp">
            <ProcedureCall id="_1qT5" procedure="rseSelectProcess"/>
            <ProcedureCall id="_1qT6" procedure="uiLaunchApp">
              <variable name="app">/dfe/mthread_stack</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qT7" procedure="dbgStopAtMain"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1qT8" name="clearDebugView">
          <TestStep id="_1qT9" name="clearDebugView">
            <ProcedureCall id="_1qTA" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1qOD" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1qTB"
                  name="multiThreadsLibLaunchWdbrpc">
        <DependencyReference id="_1qTC" reference="wb.wdbrpc"/>
        <SetupSequence id="_1qTp" name="launchMulti-ThreadsLib">
          <TestStep id="_1qTq" name="rseLaunchMulti-ThreadsLib">
            <ProcedureCall id="_1qTr" procedure="rseSelectProcess"/>
            <ProcedureCall id="_1qTs" procedure="uiLaunchApp">
              <variable name="app">/dfe/mthread_lib</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qTt" procedure="dbgStopAtMain"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1qTI" name="clearDebugView">
          <TestStep id="_1qTJ" name="clearDebugView">
            <ProcedureCall id="_1qTK" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1sPK" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1qTf"
                  name="multiProcessLibLaunchWdbrpc">
        <DependencyReference id="_1qTg" reference="wb.wdbrpc"/>
        <SetupSequence id="_1qTu" name="launchMulti-ProcessesLib">
          <TestStep id="_1qTv" name="rseLaunchMulti-ProcessesLib">
            <ProcedureCall id="_1qTw" procedure="rseSelectProcess"/>
            <ProcedureCall id="_1qTx" procedure="uiLaunchApp">
              <variable name="app">/dfe/mprocess_lib</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qTy" procedure="dbgStopAtMain"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1qTm" name="clearDebugView">
          <TestStep id="_1qTn" name="clearDebugView">
            <ProcedureCall id="_1qTo" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1sPL" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1qcW" name="penguinLaunchWdbrpc">
        <DependencyReference id="_1qcX" reference="wb.wdbrpc"/>
        <SetupSequence id="_1qcY" name="launchPenguin">
          <TestStep id="_1qcZ" name="rseLaunchPenguin">
            <ProcedureCall id="_1qca" procedure="rseSelectProcess"/>
            <ProcedureCall id="_1qcb" procedure="uiLaunchApp">
              <variable name="app">/dfe/penguin</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qcc" procedure="dbgStopAtMain"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1qcd" name="clearDebugView">
          <TestStep id="_1qce" name="clearDebugView">
            <ProcedureCall id="_1qcf" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1raP" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1sY6" name="penguinAttachWdbrpc">
        <DependencyReference id="_1sY7" reference="wb.wdbrpc"/>
        <SetupSequence id="_1sY8" name="attachPenguin">
          <ServerScriptStep disabled="true" id="_1sZX" name="debuggee">
            <code>import os

debuggee = $(debuggee)

tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setLocal('tgtDebuggee',tgtDebuggee)</code>
          </ServerScriptStep>
          <IfSequence id="_1vTt" test="$(onWindows)">
            <ProcedureCall id="_1vTu" local="true" procedure="lxConsole"
                           retvarname="getIt"/>
            <IfSequence id="_1vTv" test="not $(getIt)">
              <ProcedureCall id="_1vTw"
                             procedure="qfs.utils.testrun.skip.skipTestSet"/>
            </IfSequence>
            <ProcedureCall id="_1vTx" local="true"
                           procedure="uiLxDebuggeeRestart"
                           retvarname="debuggeeStartSuccess">
              <variable name="tgtDebuggee">/dfe/penguin &amp;</variable>
              <variable name="debuggee">penguin</variable>
            </ProcedureCall>
            <ElseSequence id="_1vTy" name="non windows host">
              <ProcedureCall id="_1vT+" local="true"
                             procedure="utils.sshStartDebuggee"
                             retvarname="debuggeeStartSuccess">
                <variable name="tgtDebuggee">$(tgtDebuggee)</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
          <IfSequence id="_1shP" test="not $(debuggeeStartSuccess)">
            <ReturnStep id="_1shQ"/>
          </IfSequence>
          <TestStep id="_1sYU" name="rseAttachPenguin">
            <ProcedureCall id="_1sYh" procedure="rseAttachPenguin"/>
            <TryStep id="_1sYY" name="waitforDebugViewShow">
              <ComponentWaiter client="$(client)"
                               component="Debug.tree&amp;/0/0/0" id="_1sYZ"
                               timeout="30000"/>
              <CatchSequence exception="IndexNotFoundException" id="_1sYa"
                             maxerror="2">
                <ProcedureCall id="_1sYb" procedure="qfs.run-log.logError">
                  <variable name="message">qftest failed even to manually attach from penguin</variable>
                  <variable name="withScreenshots">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sYc"
                               procedure="qfs.utils.testrun.skip.skipTestSet"/>
              </CatchSequence>
              <CatchSequence exception="ComponentNotFoundException" id="_1sYd"
                             maxerror="2">
                <ProcedureCall id="_1sYe" procedure="qfs.run-log.logError">
                  <variable name="message">qftest failed even to manually attach from penguin</variable>
                  <variable name="withScreenshots">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sYf"
                               procedure="qfs.utils.testrun.skip.skipTestSet"/>
              </CatchSequence>
            </TryStep>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1sYD" name="clearDebugView">
          <TestStep id="_1sYE" name="clearDebugView">
            <ProcedureCall id="_1sYF" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1sYG" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1r1G"
                  name="wdbrpcLaunchDebugCmdShell">
        <DependencyReference id="_1r1H" reference="wb.wdbrpcLaunch">
          <variable name="tgtDebuggee">$(tgtDebuggee)</variable>
        </DependencyReference>
        <SetupSequence id="_1r1I" name="openDebugCmdShell">
          <ProcedureCall id="_1v6f" procedure="uiSetSash2HeightDbgCmdShell"/>
          <TestStep id="_1r1J" name="openDebugCmdShell">
            <ProcedureCall id="_1r1Q" procedure="uiOpenDbgShell"/>
            <ProcedureCall id="_1r1R" procedure="dbgCmdErrorCheck"/>
            <ProcedureCall id="_1v8T" procedure="dbgCmdClean"/>
          </TestStep>
          <ProcedureCall id="_1v6w" procedure="uiSetSash2Height"/>
        </SetupSequence>
        <CleanupSequence id="_1r1N" name="closeDebugCmdShell">
          <TestStep disabled="true" id="_1r1O" name="closeDebugCmdShell">
            <ProcedureCall id="_1r1S" procedure="uiCloseDbgShell"/>
          </TestStep>
          <TestStep id="_1r1n" name="clearDebugView">
            <ProcedureCall id="_1r1o" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1v6x" procedure="uiSetSash2Height"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1rZ6"
                  name="penguinLaunchWdbproxyUdp">
        <DependencyReference id="_1rZ7" reference="wb.wdbproxyUdp"/>
        <SetupSequence id="_1rZ8" name="launchPenguin">
          <TestStep id="_1rZ9" name="rseLaunchPenguin">
            <ProcedureCall id="_1rZA" procedure="rseSelectProcess"/>
            <ProcedureCall id="_1rZB" procedure="uiLaunchApp">
              <variable name="app">/dfe/penguin</variable>
            </ProcedureCall>
            <ProcedureCall id="_1rZC" procedure="dbgStopAtMain"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1rZD" name="clearDebugView">
          <TestStep id="_1rZE" name="clearDebugView">
            <ProcedureCall id="_1rZF" procedure="dbgViewClearTerminate"/>
          </TestStep>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1rZG"
                  name="penguinDebugCmdShellWdbproxyUdp">
        <DependencyReference id="_1rZH"
                             reference="wb.penguinLaunchWdbproxyUdp"/>
        <SetupSequence id="_1rZI" name="openDebugCmdShell">
          <TestStep id="_1rZJ" name="openDebugCmdShell">
            <ProcedureCall id="_1rZK" procedure="uiOpenDbgShell"/>
            <ProcedureCall id="_1rZL" procedure="dbgCmdErrorCheck"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1rZM" name="closeDebugCmdShell">
          <TestStep id="_1rZN" name="closeDebugCmdShell">
            <ProcedureCall id="_1rZO" procedure="uiCloseDbgShell"/>
            <ProcedureCall id="_1rZP" procedure="fileCloseAll"/>
          </TestStep>
          <TestStep id="_1rZQ" name="clearDebugView">
            <ProcedureCall id="_1rZR" procedure="dbgViewClearTerminate"/>
          </TestStep>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedexec="true" id="_1tJS" name="vxWdbPipe">
        <variable name="conName"/>
        <DependencyReference id="_1tJT" reference="wb.wdmWs"/>
        <SetupSequence id="_1tJU" name="rseCon">
          <TestStep id="_1tJV" name="simConnect">
            <ServerScriptStep id="_1tJd" name="setConName">
              <code>import os
import socket

prjBase = os.path.basename(r'$(platformDir)')
hostName = socket.gethostname()
conName = 'wdbpipe--' + prjBase + '--' + hostName

rc.setGlobal('conName',conName)
</code>
            </ServerScriptStep>
            <TryStep id="_1thT">
              <ProcedureCall id="_1thW" procedure="qfs.swt.tree.selectNode">
                <variable name="id">Remote_Systems</variable>
                <variable name="node">$(conName).*</variable>
                <variable name="separator">%</variable>
              </ProcedureCall>
              <CatchSequence exception="IndexNotFoundException" id="_1thU"
                             maxerror="0">
                <SetGlobalStep id="_1thX" varname="vxSimFlag">
                  <default>false</default>
                </SetGlobalStep>
              </CatchSequence>
              <CatchSequence exception="TestException" id="_1thV"
                             maxerror="0"/>
            </TryStep>
            <WhileSequence id="_1tJW" test="not $(vxSimFlag)">
              <WhileSequence id="_1tce" name="existOne?" test="1">
                <TryStep id="_1tcb" name="conNameExist?">
                  <ComponentWaiter client="$(client)"
                                   component="Remote_Systems%/$(conName).*"
                                   id="_1tcc" timeout="1000"/>
                  <CatchSequence exception="ComponentNotFoundException"
                                 id="_1tcd" maxerror="0">
                    <BreakStep id="_1tcf"/>
                  </CatchSequence>
                </TryStep>
                <ProcedureCall id="_1tca" procedure="rseDelName">
                  <variable name="vxName">$(conName)</variable>
                </ProcedureCall>
              </WhileSequence>
              <ServerScriptStep id="_1tJe" name="imageName">
                <code>import os

vipName = os.path.join(r'$(platformDir)','default','vxWorks')

rc.setLocal('vipName',vipName)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1tJf" local="true" postdelay="5000"
                             procedure="conVxSim" retvarname="created"/>
              <IfSequence id="_1tJg" test="$(created)">
                <ProcedureCall id="_1tJh" local="true" procedure="rseVxWait"
                               retvarname="connected">
                  <variable name="vxName">$(conName)</variable>
                </ProcedureCall>
                <IfSequence id="_1tJi" test="$(connected)">
                  <SetGlobalStep id="_1tJj" varname="vxSimFlag">
                    <default>true</default>
                  </SetGlobalStep>
                  <ProcedureCall id="_1u9X" procedure="rseCollopse"/>
                </IfSequence>
              </IfSequence>
            </WhileSequence>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1tJk" name="rseDisCon">
          <TryStep id="_1tJl">
            <ClientWaiter client="$(client)" engine="swt" id="_1tJm"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1tJn"
                           maxerror="0">
              <ReturnStep id="_1tJo"/>
            </CatchSequence>
          </TryStep>
          <ProcedureCall id="_1tgO" procedure="rseDelName">
            <variable name="vxName">$(conName)</variable>
          </ProcedureCall>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1tfY"
                  name="vxWdbPipeLaunchKernel">
        <variable name="tgtDebuggee"/>
        <DependencyReference id="_1tfZ" reference="wb.vxWdbPipe"/>
        <SetupSequence id="_1tfa" name="wdbrpcLaunch">
          <TestStep id="_1tfb" name="vxWdbPipeLaunch">
            <ProcedureCall id="_1tfj" postdelay="1000"
                           procedure="conVxSelect">
              <variable name="vxName">$(conName)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1tfd" postdelay="10000"
                           procedure="uiLaunchTask">
              <variable name="vxName">$(conName)</variable>
              <variable name="entry">mthread</variable>
              <variable name="arg">2</variable>
              <variable name="name">yzhang0 main</variable>
            </ProcedureCall>
            <ProcedureCall id="_1tgK" procedure="uiCheckModelDialog"/>
            <ProcedureCall id="_1tg3" predelay="2000"
                           procedure="dbgVxKernelMthreadStop"
                           retvarname="success">
              <variable name="vxName">$(conName)</variable>
            </ProcedureCall>
            <IfSequence id="_1tgM" test="not $(success)">
              <ProcedureCall id="_1tgN"
                             procedure="qfs.utils.testrun.skip.skipTestSet"/>
            </IfSequence>
            <ProcedureCall id="_1tgW" procedure="uiShowLineNum"/>
            <ProcedureCall id="_1vQ3" procedure="uiSetSash2Height"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1tff" name="clearDebugView">
          <TestStep id="_1tfg" name="clearDebugView">
            <ProcedureCall id="_1tfh" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1tfi" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1tjZ" name="vxWdbPipeLaunchRtp">
        <variable name="vxeFile">$(vxeFile)</variable>
        <DependencyReference id="_1tja" reference="wb.vxWdbPipe"/>
        <DependencyReference id="_1u95" reference="wb.mthreadVxe"/>
        <SetupSequence id="_1tjb" name="wdbrpcLaunch">
          <TestStep id="_1tjc" name="vxWdbPipeLaunch">
            <ProcedureCall id="_1vYZ" procedure="uiClickRse"/>
            <ProcedureCall id="_1tjd" procedure="conVxSelect">
              <variable name="vxName">$(conName)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1tje" procedure="uiLaunchRtpHost">
              <variable name="vxName">$(conName)</variable>
              <variable name="vxeFile">$(vxeFile)</variable>
              <variable name="arg">4</variable>
            </ProcedureCall>
            <ProcedureCall id="_1tjf" procedure="uiCheckModelDialog"/>
            <ProcedureCall id="_1tjg" procedure="dbgVxRtpStop"
                           retvarname="success">
              <variable name="vxName">$(conName)</variable>
              <variable name="vxeFile">$(mthreadVxe)</variable>
            </ProcedureCall>
            <IfSequence id="_1tjh" test="not $(success)">
              <ProcedureCall id="_1tji"
                             procedure="qfs.utils.testrun.skip.skipTestSet"/>
            </IfSequence>
            <ProcedureCall id="_1tjj" procedure="uiShowLineNum"/>
            <ProcedureCall id="_1vQ4" procedure="uiSetSash2Height"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1tjk" name="clearDebugView">
          <TestStep id="_1tjl" name="clearDebugView">
            <ProcedureCall id="_1tjm" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1tjn" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1vgh" name="vxWdbPipeRunRtp">
        <variable name="vxeFile">$(vxeFile)</variable>
        <DependencyReference id="_1vgi" reference="wb.vxWdbPipe"/>
        <DependencyReference id="_1vgj" reference="wb.mthreadVxe"/>
        <SetupSequence id="_1vgk" name="wdbrpcLaunch">
          <TestStep id="_1vgl" name="vxWdbPipeLaunch">
            <ProcedureCall id="_1vgm" procedure="uiClickRse"/>
            <ProcedureCall id="_1vgn" procedure="conVxSelect">
              <variable name="vxName">$(conName)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1vgo" postdelay="5000" procedure="uiRunRtp">
              <variable name="vxName">$(conName)</variable>
              <variable name="vxeFile">$(vxeFile)</variable>
              <variable name="arg">4</variable>
            </ProcedureCall>
            <ProcedureCall id="_1vgp" postdelay="3000"
                           procedure="uiCheckModelDialog"/>
            <ProcedureCall id="_1vhv" local="true" procedure="dbgGetAppName"
                           retvarname="dbgName">
              <variable name="idx">0</variable>
            </ProcedureCall>
            <ProcedureCall id="_1viG" local="true"
                           procedure="rseAttachRtpAllTask"
                           retvarname="success">
              <variable name="dbgName">$(dbgName)</variable>
            </ProcedureCall>
            <IfSequence id="_1vgr" test="not $(success)">
              <ProcedureCall id="_1vgs"
                             procedure="qfs.utils.testrun.skip.skipTestSet"/>
            </IfSequence>
            <ProcedureCall disabled="true" id="_1vgt"
                           procedure="uiShowLineNum"/>
            <ProcedureCall id="_1vgu" procedure="uiSetSash2Height"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1vgv" name="clearDebugView">
          <TestStep id="_1vgw" name="clearDebugView">
            <ProcedureCall id="_1vgx" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1vgy" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedexec="true" id="_1u5n" name="vxWdbRpc">
        <variable name="conName"/>
        <DependencyReference id="_1u5o" reference="wb.wdmWs"/>
        <SetupSequence id="_1u5p" name="rseCon">
          <TestStep id="_1u5q" name="wdbConnect">
            <IfSequence id="_1ubI" test="&#34;$(ip)&#34; == &#34;&#34;">
              <ServerScriptStep id="_1ubJ" name="inet">
                <code>import subprocess

if ${qftestJUI:windows}:
    vlm = 'vlmTool'
else:
    vlm = '/folk/vlm/commandline/vlmTool'

getAttr = vlm + ' getAttr -s amazon.wrs.com -t ' + '$(bc)' + ' '
getIp = getAttr + 'inet'

outs = subprocess.Popen(getIp,shell=True,stdout=subprocess.PIPE).communicate()[0]
bcInet = outs.decode().strip()
rc.setLocal('bcInet', bcInet)

</code>
              </ServerScriptStep>
              <SetGlobalStep id="_1ubK" varname="ip">
                <default>$(bcInet)</default>
              </SetGlobalStep>
            </IfSequence>
            <ServerScriptStep id="_1u5r" name="setConName">
              <code>import os
import socket

prjBase = os.path.basename(r'$(platformDir)')

conName = 'wdbrpc--' + prjBase + '--' + '$(ip)'

rc.setGlobal('conName',conName)
</code>
            </ServerScriptStep>
            <TryStep id="_1u5s" name="select connection in RSE">
              <ProcedureCall id="_1u5t" procedure="qfs.swt.tree.selectNode">
                <variable name="id">Remote_Systems</variable>
                <variable name="node">$(conName).*</variable>
                <variable name="separator">%</variable>
              </ProcedureCall>
              <CatchSequence exception="IndexNotFoundException" id="_1u5u"
                             maxerror="0">
                <SetGlobalStep id="_1u5v" varname="vxWdbrpcFlag">
                  <default>false</default>
                </SetGlobalStep>
              </CatchSequence>
              <CatchSequence exception="TestException" id="_1u5w"
                             maxerror="0"/>
            </TryStep>
            <WhileSequence id="_1u5x" test="not $(vxWdbrpcFlag)">
              <WhileSequence id="_1u5y" name="existOne?" test="1">
                <TryStep id="_1u5z" name="conNameExist?">
                  <ComponentWaiter client="$(client)"
                                   component="Remote_Systems%/$(conName).*"
                                   id="_1u5+" timeout="1000"/>
                  <CatchSequence exception="ComponentNotFoundException"
                                 id="_1u5-" maxerror="0">
                    <BreakStep id="_1u60"/>
                  </CatchSequence>
                </TryStep>
                <ProcedureCall id="_1u61" procedure="rseDelName">
                  <variable name="vxName">$(conName)</variable>
                </ProcedureCall>
              </WhileSequence>
              <ServerScriptStep id="_1u62" name="imageName">
                <code>import os

vipName = os.path.join(r'$(platformDir)','default','vxWorks')

rc.setLocal('vipName',vipName)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1u63" local="true" postdelay="5000"
                             procedure="conVxWdbrpc" retvarname="created"/>
              <IfSequence id="_1u64" test="$(created)">
                <ProcedureCall id="_1u65" local="true" procedure="rseVxWait"
                               retvarname="connected">
                  <variable name="vxName">$(conName)</variable>
                </ProcedureCall>
                <IfSequence id="_1u66" test="$(connected)">
                  <SetGlobalStep id="_1u67" varname="vxWdbrpcFlag">
                    <default>true</default>
                  </SetGlobalStep>
                  <ProcedureCall id="_1u9W" procedure="rseCollopse"/>
                </IfSequence>
              </IfSequence>
            </WhileSequence>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1u68" name="rseDisCon">
          <TryStep id="_1u69" name="sutExist?">
            <ClientWaiter client="$(client)" engine="swt" id="_1u6A"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1u6B"
                           maxerror="0">
              <ReturnStep id="_1u6C"/>
            </CatchSequence>
          </TryStep>
          <WhileSequence id="_1u96" name="existOne?" test="1">
            <TryStep id="_1u97" name="conNameExist?">
              <ComponentWaiter client="$(client)"
                               component="Remote_Systems%/$(conName).*"
                               id="_1u98" timeout="1000"/>
              <CatchSequence exception="ComponentNotFoundException" id="_1u99"
                             maxerror="0">
                <BreakStep id="_1u9A"/>
              </CatchSequence>
            </TryStep>
            <ProcedureCall id="_1u9B" procedure="rseDelName">
              <variable name="vxName">$(conName)</variable>
            </ProcedureCall>
          </WhileSequence>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1u6t" name="vxWdbRpcLaunchKernel">
        <variable name="tgtDebuggee"/>
        <DependencyReference id="_1u6u" reference="wb.vxWdbRpc"/>
        <SetupSequence id="_1u6v" name="wdbrpcLaunch">
          <TestStep id="_1u6w" name="vxWdbRpcLaunch">
            <ProcedureCall id="_1u6x" procedure="conVxSelect">
              <variable name="vxName">$(conName)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1u6y" procedure="uiLaunchTask">
              <variable name="vxName">$(conName)</variable>
              <variable name="entry">mthread</variable>
              <variable name="arg">2</variable>
              <variable name="name">yzhang0 main</variable>
            </ProcedureCall>
            <ProcedureCall id="_1u6z" procedure="uiCheckModelDialog"/>
            <ProcedureCall id="_1u6+" procedure="dbgVxKernelMthreadStop"
                           retvarname="success">
              <variable name="vxName">$(conName)</variable>
            </ProcedureCall>
            <IfSequence id="_1u6-" test="not $(success)">
              <ProcedureCall id="_1u70"
                             procedure="qfs.utils.testrun.skip.skipTestSet"/>
            </IfSequence>
            <ProcedureCall id="_1u71" procedure="uiShowLineNum"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1u72" name="clearDebugView">
          <TestStep id="_1u73" name="clearDebugView">
            <ProcedureCall id="_1u74" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1u75" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1u76" name="vxWdbRpcLaunchRtp">
        <variable name="vxeFile">$(vxeFile)</variable>
        <DependencyReference id="_1u77" reference="wb.vxWdbRpc"/>
        <DependencyReference id="_1u8v" reference="wb.mthreadVxe"/>
        <SetupSequence id="_1u78" name="wdbrpcLaunch">
          <TestStep id="_1u79" name="vxWdbRpcLaunch">
            <ProcedureCall id="_1u7A" procedure="conVxSelect">
              <variable name="vxName">$(conName)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1u7B" procedure="uiLaunchRtpTgt">
              <variable name="vxName">$(conName)</variable>
              <variable name="vxeFile">$(mthreadTgtsvrFile)</variable>
              <variable name="arg">4</variable>
            </ProcedureCall>
            <ProcedureCall id="_1u7C" procedure="uiCheckModelDialog"/>
            <ProcedureCall id="_1u7D" procedure="dbgVxRtpStop"
                           retvarname="success">
              <variable name="vxName">$(conName)</variable>
              <variable name="vxeFile">$(mthreadVxe)</variable>
            </ProcedureCall>
            <IfSequence id="_1u7E" test="not $(success)">
              <ProcedureCall id="_1u7F"
                             procedure="qfs.utils.testrun.skip.skipTestSet"/>
            </IfSequence>
            <ProcedureCall id="_1u7G" procedure="uiShowLineNum"/>
          </TestStep>
        </SetupSequence>
        <CleanupSequence id="_1u7H" name="clearDebugView">
          <TestStep id="_1u7I" name="clearDebugView">
            <ProcedureCall id="_1u7J" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1u7K" procedure="fileCloseAll"/>
        </CleanupSequence>
      </Dependency>
      <Dependency id="_1u8s" name="mthreadVxe">
        <SetupSequence id="_1u8t" name="mthreadVxe">
          <ServerScriptStep id="_1u8o" name="getRtpFile">
            <code>import os

(parent_dir,vip_name) = os.path.split(r'$(platformDir)')
rtp_dir = 'mthread' + '_rtp_' + vip_name
rtp_name = rtp_dir + '.vxe'
rc.setGlobal('mthreadVxe',rtp_name)

vxe_dir = os.path.join(r'$(wdmWorkspace)',rtp_dir)
vxe_tgtsvr_dir = os.path.join('/tgtsvr',rtp_dir)
vxeTgtFile = os.path.join(vxe_tgtsvr_dir,rtp_name)
vxeHostFile = os.path.join(vxe_dir,rtp_name)
srcMainFile = os.path.join(vxe_dir,'mthread_stack.c')
srcMidFile = os.path.join(vxe_dir,'mid_stack.c')

rc.setGlobal('mthreadTgtsvrFile',vxeTgtFile)
rc.setGlobal('mthreadFile',vxeHostFile)
rc.setGlobal('rtpMainSrc',srcMainFile)
rc.setGlobal('rtpMidSrc',srcMidFile)
</code>
          </ServerScriptStep>
          <ProcedureCall id="_1u8p" local="true"
                         procedure="qfs.shellutils.exists" retvarname="ready">
            <variable name="file">$(mthreadFile)</variable>
          </ProcedureCall>
          <IfSequence id="_1u8q" test="not $(ready)">
            <ProcedureCall id="_1u8r" procedure="utils.buildRtp">
              <variable name="demo">'mthread'</variable>
            </ProcedureCall>
          </IfSequence>
        </SetupSequence>
      </Dependency>
      <Dependency id="_1uTs" name="vxConsole">
        <DependencyReference id="_1uU2" reference="wb.wdmWs"/>
        <SetupSequence id="_1uTt" name="get vxworks console">
          <ProcedureCall id="_1ubB" local="true" procedure="vxConsole"
                         retvarname="getIt"/>
          <IfSequence id="_1ubC" test="not $(getIt)">
            <ProcedureCall id="_1ubD"
                           procedure="qfs.utils.testrun.skip.skipTestSet"/>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_1uUU" name="vxConsoleClear">
          <TryStep id="_1uUW" name="clear Terminal">
            <ProcedureCall id="_1uUV" procedure="terminalClear"/>
            <CatchSequence exception="TestException" id="_1uUX" maxerror="0"/>
          </TryStep>
        </CleanupSequence>
      </Dependency>
      <Dependency id="_1ufn" name="lxConsole">
        <DependencyReference id="_1ufo" reference="wb.wdmWs"/>
        <SetupSequence id="_1ufp" name="get WRLinux console">
          <ProcedureCall id="_1ufq" local="true" procedure="lxConsole"
                         retvarname="getIt"/>
          <IfSequence id="_1ufr" test="not $(getIt)">
            <ProcedureCall id="_1ufs"
                           procedure="qfs.utils.testrun.skip.skipTestSet"/>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_1uft" name="vxConsoleClear">
          <TryStep id="_1ufu" name="clear Terminal">
            <ProcedureCall id="_1ufv" procedure="terminalClear"/>
            <CatchSequence exception="TestException" id="_1ufw" maxerror="0"/>
          </TryStep>
        </CleanupSequence>
      </Dependency>
    </Package>
    <Package id="_1s2e" name="wdm">
      <Dependency forcedcleanup="true" id="_1s2f" name="wdmWs">
        <SetupSequence id="_1s2g" name="wdmWsStart">
          <SetGlobalStep id="_1sOr" varname="client">
            <default>wdmWsStart</default>
          </SetGlobalStep>
          <TryStep id="_1s2k" name="wdmStart">
            <ClientWaiter client="$(client)" engine="swt" id="_1s2l"
                          local="true" timeout="1000"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1s2m"
                           maxerror="0">
              <ProcedureCall id="_1s2n" procedure="wdmStartWs"
                             retvarname="sutConnected"/>
            </CatchSequence>
          </TryStep>
          <TryStep id="_1sOs" name="closeOptDialog">
            <ComponentWaiter client="$(client)"
                             component="WROptionalMessageDialog" id="_1sOt"
                             timeout="5000"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonDo_not_show_again"
                            event="MOUSE_MPRC" id="_1sOu" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonOk27" event="MOUSE_MPRC"
                            id="_1sOv" modifiers="16"/>
            <CatchSequence exception="ComponentNotFoundException" id="_1sOw"
                           maxerror="0" name="ignore"/>
          </TryStep>
          <ProcedureCall id="_1sOx" procedure="fileCloseAllOpt"/>
        </SetupSequence>
        <CleanupSequence id="_1s2p" name="wdmWsExit">
          <TryStep id="_1s2q">
            <ClientWaiter client="$(client)" engine="swt" id="_1s2r"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1s2s"
                           maxerror="0">
              <ReturnStep id="_1s2t"/>
            </CatchSequence>
          </TryStep>
          <ProcedureCall id="_1s2u" procedure="wdmExit"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedexec="true" id="_1s46" name="wdbrpc">
        <variable name="exitFlag">true</variable>
        <SetupSequence id="_1s48" name="rseCon">
          <TestStep id="_1sXe" name="wdbrpcConnect">
            <SetGlobalStep id="_1skD" varname="client">
              <default>wdmWsStart</default>
            </SetGlobalStep>
            <WhileSequence id="_1sQA" test="not $(wdbrpcFlag)">
              <TryStep id="_1sNI" name="startWdm">
                <ClientWaiter client="$(client)" engine="swt" id="_1sNJ"
                              local="true" timeout="1000"/>
                <CatchSequence exception="ClientNotConnectedException"
                               id="_1sNK" maxerror="0">
                  <ProcedureCall id="_1sNL" procedure="wdmStartWs"
                                 retvarname="sutConnected"/>
                  <TryStep id="_1sPc" name="closeOptDialog">
                    <ComponentWaiter client="$(client)"
                                     component="WROptionalMessageDialog"
                                     id="_1sPd" timeout="5000"/>
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="buttonDo_not_show_again"
                                    event="MOUSE_MPRC" id="_1sPe"
                                    modifiers="16"/>
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="buttonOk27" event="MOUSE_MPRC"
                                    id="_1sPf" modifiers="16"/>
                    <CatchSequence exception="ComponentNotFoundException"
                                   id="_1sPg" maxerror="0" name="ignore"/>
                  </TryStep>
                  <ProcedureCall id="_1sPh" procedure="fileCloseAllOpt"/>
                </CatchSequence>
              </TryStep>
              <ProcedureCall id="_1sAO" local="true"
                             procedure="utils.sshRestartUma"
                             retvarname="login"/>
              <IfSequence id="_1sAP" test="not $(login)">
                <ProcedureCall id="_1sAQ" procedure="qfs.run-log.logMessage">
                  <variable name="message">failed to login the board</variable>
                  <variable name="dontcompactify">false</variable>
                  <variable name="report">true</variable>
                </ProcedureCall>
                <ProcedureCall id="_1sAZ"
                               procedure="qfs.utils.testrun.skip.skipTestSet"/>
                <BreakStep id="_1sQC"/>
              </IfSequence>
              <ProcedureCall id="_1ufA" procedure="rseDelName">
                <variable name="vxName">$(conName)</variable>
              </ProcedureCall>
              <ServerScriptStep id="_1sAV" name="setConName">
                <code>import os

prjBase = os.path.basename(os.path.normpath(r'$(platformDir)'))
conName = 'wdbrpc--' + prjBase + '--' + '$(ip)'

rc.setGlobal('conName',conName)
</code>
              </ServerScriptStep>
              <ServerScriptStep id="_1sAW" name="rootfs">
                <code>import os

rootfsDir = os.path.join($(platformDir),'export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)
</code>
              </ServerScriptStep>
              <ProcedureCall id="_1sAX" local="true" postdelay="5000"
                             procedure="conLxUmaUdpPort"
                             retvarname="created"/>
              <IfSequence id="_1sQB" test="$(created)">
                <ProcedureCall id="_1sAY" local="true" procedure="rseWait"
                               retvarname="connected"/>
                <ElseSequence id="_1sp9" name="not created">
                  <SetGlobalStep id="_1spA" varname="connected">
                    <default>false</default>
                  </SetGlobalStep>
                </ElseSequence>
              </IfSequence>
              <IfSequence id="_1sAa" test="$(connected)">
                <SetGlobalStep id="_1sQE" varname="wdbrpcFlag">
                  <default>true</default>
                </SetGlobalStep>
              </IfSequence>
            </WhileSequence>
          </TestStep>
          <IfSequence id="_1shS" test="$(exitFlag)">
            <ProcedureCall id="_1sAd" procedure="wdmExit"/>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_1s5o" name="rseDisCon">
          <TryStep id="_1sXq" name="stillConnected">
            <ClientWaiter client="$(client)" engine="swt" id="_1sXr"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1sXs"
                           maxerror="0">
              <ReturnStep id="_1sXt"/>
            </CatchSequence>
          </TryStep>
          <ProcedureCall id="_1uf9" procedure="rseDelName">
            <variable name="vxName">$(conName)</variable>
          </ProcedureCall>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1s2v" name="wdmWsLaunchWdbrpc">
        <variable name="debuggee">$(debuggee)</variable>
        <DependencyReference id="_1s93" reference="wdm.wdbrpc">
          <variable name="exitFlag">$(exitFlag)</variable>
        </DependencyReference>
        <SetupSequence id="_1s2w" name="wdmWsStart">
          <ServerScriptStep id="_1sPq" name="debuggee">
            <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
debuggee = $(debuggee)
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setLocal('hostDebuggee',hostDebuggee)
rc.setLocal('tgtDebuggee',tgtDebuggee)</code>
          </ServerScriptStep>
          <IfSequence id="_1skE" test="$(exitFlag)">
            <TestStep id="_1sXg" name="wdbrpcLaunchWithoutShellAttached">
              <ProcedureCall id="_1sPk" local="true" procedure="lxWsLStart"
                             retvarname="launch"/>
              <IfSequence id="_1sPl" test="not $(launch)">
                <ProcedureCall id="_1sPm" procedure="qfs.run-log.logError">
                  <variable name="message">wdm failed to launch debuggee</variable>
                  <variable name="withScreenshots">true</variable>
                </ProcedureCall>
              </IfSequence>
            </TestStep>
            <ElseSequence id="_1skF">
              <TestStep id="_1skI"
                        name="wdbrpcLaunchWithoutShellAttachedSingleInstance">
                <ProcedureCall id="_1sni" local="true"
                               procedure="lxWsLStartSingle"
                               retvarname="launch"/>
                <IfSequence id="_1snj" test="not $(launch)">
                  <ProcedureCall id="_1snk" procedure="qfs.run-log.logError">
                    <variable name="message">wdm failed to launch debuggee</variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
              </TestStep>
            </ElseSequence>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_1s31" name="clearDebugView">
          <TryStep id="_1soL" name="stillConnected">
            <ClientWaiter client="$(client)" engine="swt" id="_1soM"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1soN"
                           maxerror="0">
              <ReturnStep id="_1soO"/>
            </CatchSequence>
          </TryStep>
          <TestStep id="_1sNN" name="clearDebugView">
            <ProcedureCall id="_1sNO" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1sNP" procedure="fileCloseAll"/>
          <IfSequence id="_1sj+" test="$(exitFlag)">
            <TryStep id="_1sj-">
              <ClientWaiter client="$(client)" engine="swt" id="_1sk0"
                            local="true" resvarname="resWdmStartSuccess"
                            timeout="0"/>
              <CatchSequence exception="ClientNotConnectedException"
                             id="_1sk1" maxerror="0">
                <ReturnStep id="_1sk2"/>
              </CatchSequence>
            </TryStep>
            <ProcedureCall id="_1sk3" procedure="wdmExit"/>
          </IfSequence>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1sQW"
                  name="wdmWsLaunchShellWdbrpc">
        <variable name="debuggee">$(debuggee)</variable>
        <DependencyReference id="_1sQX" reference="wdm.wdbrpc">
          <variable name="exitFlag">$(exitFlag)</variable>
        </DependencyReference>
        <SetupSequence id="_1sQY" name="wdmWsStart">
          <ServerScriptStep id="_1sQa" name="debuggee">
            <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
debuggee = $(debuggee)
hostDebuggee = os.path.join(rootfsDir,'dfe',debuggee)
tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setLocal('hostDebuggee',hostDebuggee)
rc.setLocal('tgtDebuggee',tgtDebuggee)</code>
          </ServerScriptStep>
          <IfSequence id="_1snl" test="$(exitFlag)">
            <TestStep id="_1sXf" name="wdbrpcLauchWithShellAttached">
              <ProcedureCall id="_1sRp" local="true" procedure="lxWsLShStart"
                             retvarname="launch"/>
              <IfSequence id="_1sQf" test="not $(launch)">
                <ProcedureCall id="_1sQg" procedure="qfs.run-log.logError">
                  <variable name="message">wdm failed to launch debuggee</variable>
                  <variable name="withScreenshots">true</variable>
                </ProcedureCall>
              </IfSequence>
            </TestStep>
            <ElseSequence id="_1snm">
              <TestStep id="_1snn"
                        name="wdbrpcLaunchWithShellAttachedSingleInstance">
                <ProcedureCall id="_1sno" local="true"
                               procedure="lxWsLShStartSingle"
                               retvarname="launch"/>
                <IfSequence id="_1snp" test="not $(launch)">
                  <ProcedureCall id="_1snq" procedure="qfs.run-log.logError">
                    <variable name="message">wdm failed to launch debuggee</variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </IfSequence>
              </TestStep>
            </ElseSequence>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_1sQn" name="clearDebugView">
          <TryStep id="_1soP" name="stillConnected">
            <ClientWaiter client="$(client)" engine="swt" id="_1soQ"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1soR"
                           maxerror="0">
              <ReturnStep id="_1soS"/>
            </CatchSequence>
          </TryStep>
          <TestStep id="_1sQo" name="clearDebugView">
            <ProcedureCall id="_1sQp" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1sQq" procedure="fileCloseAll"/>
          <IfSequence id="_1sju" test="$(exitFlag)">
            <TryStep id="_1sjv">
              <ClientWaiter client="$(client)" engine="swt" id="_1sjw"
                            local="true" resvarname="resWdmStartSuccess"
                            timeout="0"/>
              <CatchSequence exception="ClientNotConnectedException"
                             id="_1sjx" maxerror="0">
                <ReturnStep id="_1sjy"/>
              </CatchSequence>
            </TryStep>
            <ProcedureCall id="_1sjz" procedure="wdmExit"/>
          </IfSequence>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1sSE" name="wdmWsAttachWdbrpc">
        <variable name="object">$(object)</variable>
        <DependencyReference id="_1sSF" reference="wdm.wdbrpc">
          <variable name="exitFlag">$(exitFlag)</variable>
        </DependencyReference>
        <SetupSequence id="_1sSG" name="wdmWsStart">
          <ServerScriptStep id="_1sTj" name="debuggee">
            <code>import os

debuggee = $(debuggee)

tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setLocal('tgtDebuggee',tgtDebuggee)</code>
          </ServerScriptStep>
          <TestStep id="_1sTa" name="debuggee start">
            <RepeatSequence count="10" id="_1sTb" var="idx">
              <ProcessClientStarter client="debuggee"
                                    executable="/folk/yzhang0/bin/rexe.exp"
                                    id="_1sTc">
                <parameter>-ip</parameter>
                <parameter>$(ip)</parameter>
                <parameter>-p</parameter>
                <parameter>$(sshPort)</parameter>
                <parameter>-d</parameter>
                <parameter>$(tgtDebuggee)</parameter>
              </ProcessClientStarter>
              <ProcessWaiter check="0" client="debuggee" id="_1sTe"
                             local="true" resvarname="debuggee_success"
                             timeout="15000"/>
              <IfSequence id="_1sTf" test="$(debuggee_success)">
                <BreakStep id="_1sTg"/>
              </IfSequence>
              <IfSequence id="_1sTh" test="$(idx) &gt;= 9">
                <ProcedureCall id="_1sTi"
                               procedure="qfs.utils.testrun.skip.skipTestCase"/>
              </IfSequence>
            </RepeatSequence>
          </TestStep>
          <IfSequence id="_1snr" test="$(exitFlag)">
            <TestStep id="_1sXh" name="wdbrpcAttachWithoutShellAttached">
              <ProcedureCall id="_1sTI" postdelay="4000"
                             procedure="lxWsAStart" retvarname="attach">
                <variable name="object">$(object)</variable>
              </ProcedureCall>
              <IfSequence id="_1sSN" test="not $(attach)">
                <ProcedureCall id="_1sVX" procedure="rseAttachPenguin"/>
                <TryStep id="_1sVY" name="waitforDebugViewShow">
                  <ComponentWaiter client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1sVZ" timeout="30000"/>
                  <CatchSequence exception="IndexNotFoundException" id="_1sVa"
                                 maxerror="2">
                    <ProcedureCall id="_1sVb"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">qftest failed even to manually attach from penguin</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                    <ProcedureCall id="_1sVc"
                                   procedure="qfs.utils.testrun.skip.skipTestSet"/>
                  </CatchSequence>
                  <CatchSequence exception="ComponentNotFoundException"
                                 id="_1sXk" maxerror="2">
                    <ProcedureCall id="_1sXl"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">qftest failed even to manually attach from penguin</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                    <ProcedureCall id="_1sXm"
                                   procedure="qfs.utils.testrun.skip.skipTestSet"/>
                  </CatchSequence>
                </TryStep>
              </IfSequence>
            </TestStep>
            <ElseSequence id="_1sns">
              <TestStep id="_1snt"
                        name="wdbrpcAttachWithoutShellAttachedSingleInstance">
                <ProcedureCall id="_1snu" postdelay="4000"
                               procedure="lxWsAStartSingle"
                               retvarname="attach">
                  <variable name="object">$(object)</variable>
                </ProcedureCall>
                <IfSequence id="_1snv" test="not $(attach)">
                  <ProcedureCall id="_1snw" procedure="rseAttachPenguin"/>
                  <TryStep id="_1snx" name="waitforDebugViewShow">
                    <ComponentWaiter client="$(client)"
                                     component="Debug.tree&amp;/0/0/0"
                                     id="_1sny" timeout="30000"/>
                    <CatchSequence exception="IndexNotFoundException"
                                   id="_1snz" maxerror="2">
                      <ProcedureCall id="_1sn+"
                                     procedure="qfs.run-log.logError">
                        <variable name="message">qftest failed even to manually attach from penguin</variable>
                        <variable name="withScreenshots">true</variable>
                      </ProcedureCall>
                      <ProcedureCall id="_1sn-"
                                     procedure="qfs.utils.testrun.skip.skipTestSet"/>
                    </CatchSequence>
                    <CatchSequence exception="ComponentNotFoundException"
                                   id="_1so0" maxerror="2">
                      <ProcedureCall id="_1so1"
                                     procedure="qfs.run-log.logError">
                        <variable name="message">qftest failed even to manually attach from penguin</variable>
                        <variable name="withScreenshots">true</variable>
                      </ProcedureCall>
                      <ProcedureCall id="_1so2"
                                     procedure="qfs.utils.testrun.skip.skipTestSet"/>
                    </CatchSequence>
                  </TryStep>
                </IfSequence>
              </TestStep>
            </ElseSequence>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_1sSP" name="clearDebugView">
          <TryStep id="_1soT" name="stillConnected">
            <ClientWaiter client="$(client)" engine="swt" id="_1soU"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1soV"
                           maxerror="0">
              <ReturnStep id="_1soW"/>
            </CatchSequence>
          </TryStep>
          <TestStep id="_1sSQ" name="clearDebugView">
            <ProcedureCall id="_1sSR" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1sSS" procedure="fileCloseAll"/>
          <IfSequence id="_1sjo" test="$(exitFlag)">
            <TryStep id="_1sjp">
              <ClientWaiter client="$(client)" engine="swt" id="_1sjq"
                            local="true" resvarname="resWdmStartSuccess"
                            timeout="0"/>
              <CatchSequence exception="ClientNotConnectedException"
                             id="_1sjr" maxerror="0">
                <ReturnStep id="_1sjs"/>
              </CatchSequence>
            </TryStep>
            <ProcedureCall id="_1sjt" procedure="wdmExit"/>
          </IfSequence>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_1sWy"
                  name="wdmWsAttachShellWdbrpc">
        <variable name="object">$(object)</variable>
        <DependencyReference id="_1sWz" reference="wdm.wdbrpc">
          <variable name="exitFlag">$(exitFlag)</variable>
        </DependencyReference>
        <SetupSequence id="_1sW+" name="wdmWsStart">
          <ServerScriptStep id="_1sW-" name="debuggee">
            <code>import os

debuggee = $(debuggee)

tgtDebuggee = os.path.join('/dfe',debuggee)

rc.setLocal('tgtDebuggee',tgtDebuggee)</code>
          </ServerScriptStep>
          <TestStep id="_1sX0" name="debuggee start">
            <RepeatSequence count="10" id="_1sX1" var="idx">
              <ProcessClientStarter client="debuggee"
                                    executable="/folk/yzhang0/bin/rexe.exp"
                                    id="_1sX2">
                <parameter>-ip</parameter>
                <parameter>$(ip)</parameter>
                <parameter>-p</parameter>
                <parameter>$(sshPort)</parameter>
                <parameter>-d</parameter>
                <parameter>$(tgtDebuggee)</parameter>
              </ProcessClientStarter>
              <ProcessWaiter check="0" client="debuggee" id="_1sX3"
                             local="true" resvarname="debuggee_success"
                             timeout="15000"/>
              <IfSequence id="_1sX4" test="$(debuggee_success)">
                <BreakStep id="_1sX5"/>
              </IfSequence>
              <IfSequence id="_1sX6" test="$(idx) &gt;= 9">
                <ProcedureCall id="_1sX7"
                               procedure="qfs.utils.testrun.skip.skipTestCase"/>
              </IfSequence>
            </RepeatSequence>
          </TestStep>
          <IfSequence id="_1so3" test="$(exitFlag)">
            <TestStep id="_1sXj" name="wdbrpcAttachWithShellAttached">
              <ProcedureCall id="_1sXA" postdelay="4000"
                             procedure="lxWsAShStart" retvarname="attach">
                <variable name="object">$(object)</variable>
              </ProcedureCall>
              <IfSequence id="_1sXB" test="not $(attach)">
                <ProcedureCall id="_1sXC" procedure="rseAttachPenguin"/>
                <TryStep id="_1sXD" name="waitforDebugViewShow">
                  <ComponentWaiter client="$(client)"
                                   component="Debug.tree&amp;/0/0/0"
                                   id="_1sXE" timeout="30000"/>
                  <CatchSequence exception="IndexNotFoundException" id="_1sXn"
                                 maxerror="2">
                    <ProcedureCall id="_1sXo"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">qftest failed even to manually attach from penguin</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                    <ProcedureCall id="_1sXp"
                                   procedure="qfs.utils.testrun.skip.skipTestSet"/>
                  </CatchSequence>
                  <CatchSequence exception="ComponentNotFoundException"
                                 id="_1sXF" maxerror="2">
                    <ProcedureCall id="_1sXG"
                                   procedure="qfs.run-log.logError">
                      <variable name="message">qftest failed even to manually attach from penguin</variable>
                      <variable name="withScreenshots">true</variable>
                    </ProcedureCall>
                    <ProcedureCall id="_1sXH"
                                   procedure="qfs.utils.testrun.skip.skipTestSet"/>
                  </CatchSequence>
                </TryStep>
              </IfSequence>
            </TestStep>
            <ElseSequence id="_1so4">
              <TestStep id="_1so5"
                        name="wdbrpcAttachWithShellAttachedSingleInstance">
                <ProcedureCall id="_1so6" postdelay="4000"
                               procedure="lxWsAShStartSingle"
                               retvarname="attach">
                  <variable name="object">$(object)</variable>
                </ProcedureCall>
                <IfSequence id="_1so7" test="not $(attach)">
                  <ProcedureCall id="_1so8" procedure="rseAttachPenguin"/>
                  <TryStep id="_1so9" name="waitforDebugViewShow">
                    <ComponentWaiter client="$(client)"
                                     component="Debug.tree&amp;/0/0/0"
                                     id="_1soA" timeout="30000"/>
                    <CatchSequence exception="IndexNotFoundException"
                                   id="_1soB" maxerror="2">
                      <ProcedureCall id="_1soC"
                                     procedure="qfs.run-log.logError">
                        <variable name="message">qftest failed even to manually attach from penguin</variable>
                        <variable name="withScreenshots">true</variable>
                      </ProcedureCall>
                      <ProcedureCall id="_1soD"
                                     procedure="qfs.utils.testrun.skip.skipTestSet"/>
                    </CatchSequence>
                    <CatchSequence exception="ComponentNotFoundException"
                                   id="_1soE" maxerror="2">
                      <ProcedureCall id="_1soF"
                                     procedure="qfs.run-log.logError">
                        <variable name="message">qftest failed even to manually attach from penguin</variable>
                        <variable name="withScreenshots">true</variable>
                      </ProcedureCall>
                      <ProcedureCall id="_1soG"
                                     procedure="qfs.utils.testrun.skip.skipTestSet"/>
                    </CatchSequence>
                  </TryStep>
                </IfSequence>
              </TestStep>
            </ElseSequence>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_1sXI" name="clearDebugView">
          <TryStep id="_1soX" name="stillConnected">
            <ClientWaiter client="$(client)" engine="swt" id="_1soY"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1soZ"
                           maxerror="0">
              <ReturnStep id="_1soa"/>
            </CatchSequence>
          </TryStep>
          <TestStep id="_1sXJ" name="clearDebugView">
            <ProcedureCall id="_1sXK" procedure="dbgViewClearTerminate"/>
          </TestStep>
          <ProcedureCall id="_1sXL" procedure="fileCloseAll"/>
          <IfSequence id="_1sjn" test="$(exitFlag)">
            <TryStep id="_1sXM">
              <ClientWaiter client="$(client)" engine="swt" id="_1sXN"
                            local="true" resvarname="resWdmStartSuccess"
                            timeout="0"/>
              <CatchSequence exception="ClientNotConnectedException"
                             id="_1sXO" maxerror="0">
                <ReturnStep id="_1sXP"/>
              </CatchSequence>
            </TryStep>
            <ProcedureCall id="_1sXQ" procedure="wdmExit"/>
          </IfSequence>
        </CleanupSequence>
      </Dependency>
    </Package>
    <Package id="_D" name="VLM">
      <Package id="_c" name="Utilities">
        <Procedure id="_A" name="checkOSWindows">
          <comment>Checks whether we are on a Windows host.

@return	win	1 ----&gt; OS == Windows
		0 ----&gt; OS == not Windows</comment>
          <ServerScriptStep id="_8" name="Windows Check">
            <code>rc.setLocal('win',${qftest:windows})</code>
          </ServerScriptStep>
          <ReturnStep id="_B" retval="$(win)">
            <comment>win == 1 ----&gt; OS == windows
win == 0 ----&gt; OS == not windows</comment>
          </ReturnStep>
        </Procedure>
        <Procedure id="_I" name="execShellCommand">
          <variable name="cmd"/>
          <comment>Executes a shell command.

@param	cmd	Command to be executed

@return	res	1 = success, 0 = fail

Note:
Please add function eval() to evaluate the return value. This will transfer the return value from 'unicode' to 'list'

Example:
res = rc.callProcedure('VLM.Miscellaneous.execShellCommand',{'cmd':'net use'})
res = eval(res)</comment>
          <ServerScriptStep id="_K" name="Execute Shell Command">
            <code>import subprocess

cmd = rc.lookup('cmd')

process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

outs,err = process.communicate()

if err:
    hasErr = 1
    res = [hasErr,err]
else:
    hasErr = 0
    res = [hasErr,outs]
    
rc.setLocal('res',res)</code>
          </ServerScriptStep>
          <ReturnStep id="_1vup" retval="$(res)"/>
        </Procedure>
        <Procedure id="_1vuq" name="getVlmTool">
          <variable name="mappingServer"/>
          <comment>Detects the location of the VLM tool.

If necessary, maps the Samba server location to a Windows drive.

@param	mappingServer	Samba server name or ip address to be mapped on Windows

@return	vlmTool	Path to VLM tool</comment>
          <ServerScriptStep id="_1vur" name="Get vlmTool">
            <code>import subprocess
import re
import string
import os

mappingServer = rc.lookup('mappingServer')

def joinVlmTool_win(dev,initCMD):
    devName = dev+':'
    cmd = initCMD
    vlmEnvPath = devName+'\\'+os.path.join('commandline','vlmEnv.bat')
    vlmToolPath = devName+'\\'+os.path.join('commandline','vlmTool.bat')
    cmd = cmd+' &amp;&amp; '+vlmEnvPath+' '+devName
    cmd = cmd+' &amp;&amp; '+vlmToolPath
    return cmd
win = rc.callProcedure('VLM.Utilities.checkOSWindows')
if win=='1':
    pResList = rc.callProcedure('VLM.Utilities.execShellCommand',{'cmd':'net use'})
    pResList = eval(pResList)
    pRes = pResList[1].split('\r')
    tmpList = []
    tmpDevList = []
    for n in pRes:
        dev = re.findall('(.[^ ]):', n)
        if dev:
            tmpDevList.append(dev[0].strip())
            path = re.findall('(\\\\.*vlm[^ ]*)',n)
            if path:
                tmpList.append(dev[0]+':'+path[0])
    if len(tmpList) &gt; 0:
        tmpPath = []
        for n in tmpList:
            tmpPath = re.findall('(\\\\.*vlm$)',n)
            if tmpPath:
                tmpDev = re.findall('(.[^ ]):', n)
                cmd = joinVlmTool_win(tmpDev[0],'net use')
                break
    else:
        if len(tmpDevList) &gt; 0:
            alphaList = []
            for n in range(65,91):
                alphaList.append(chr(n))
            alphaList.reverse()
            for n in alphaList:
                notIn = n
                for m in tmpDevList:
                    if n == m:
                        notIn = 0
                if notIn == n:
                    emptyDev = n
                    break
            tmpDev = emptyDev
        else:
            tmpDev = 'Z'        

        tmpCmd = 'net use '+tmpDev+':'+' \\\\'+mappingServer+'\\vlm'+' &amp;&amp; net use'
        cmd = joinVlmTool_win(tmpDev,tmpCmd)       

else:
    cmd = '/'+os.path.join('folk','vlm','commandline','vlmTool')

rc.setLocal('vlmTool',cmd)</code>
          </ServerScriptStep>
          <ReturnStep id="_U" retval="$(vlmTool)"/>
        </Procedure>
        <Procedure id="_C" name="getTargetAttributes">
          <variable name="barcode"/>
          <variable name="mappingServer"/>
          <comment>Gets all attributes from the target in VLM.

@param	barcode	Barcode of the target
@param	mappingServer	Samba server name or ip address to be mapped on Windows

@return	res	Target attributes</comment>
          <ServerScriptStep id="_H" name="Get Target Attributes">
            <code>import subprocess
import re
import string
import os
import sys

barcode = rc.lookup('barcode')
mappingServer = rc.lookup('mappingServer')
amazon = 'amazon.wrs.com'

vlmTool = rc.callProcedure('VLM.Utilities.getVlmTool',{'mappingServer':mappingServer})

cmd = vlmTool+' getAttr -s '+amazon+' -t '+barcode+' all'

res = rc.callProcedure('VLM.Utilities.execShellCommand',{'cmd':cmd})

rc.setLocal('res',res)
</code>
          </ServerScriptStep>
          <ReturnStep id="_1vus" retval="$(res)"/>
        </Procedure>
        <Procedure id="_Y" name="getInfoFromAttributes">
          <variable name="keyword"/>
          <variable name="attrList"/>
          <comment>Extracts the information related to a target attribute.

@param	keyword	Target attribute
@param	attrList	List of target attributes

@return	res	Target attribute information</comment>
          <ServerScriptStep id="_Z" name="Get Info from Attributes">
            <code>import re
import string

keyword = rc.lookup('keyword')
attrList = rc.lookup('attrList')

attrList = eval(attrList)

for n in attrList:
    info = re.findall(keyword+'.*:(.*)',n)
    if info:
        break
        
if info == []:
    print 'The info not found!'
    rc.setLocal('res','notFound')
else:
    rc.setLocal('res',info[0].strip())</code>
          </ServerScriptStep>
          <ReturnStep id="_a" retval="$(res)"/>
        </Procedure>
        <Procedure id="_V" name="whoami">
          <ServerScriptStep id="_W" name="Who am I">
            <code>import getpass

user = getpass.getuser()

rc.setLocal('user',user)</code>
          </ServerScriptStep>
          <ReturnStep id="_X" retval="$(user)"/>
        </Procedure>
        <Procedure id="_1vut" name="getReserver">
          <variable name="barcode"/>
          <variable name="mappingServer"/>
          <comment>Finds out who reserved a target in VLM.

@param	barcode	Barcode of the target

@param	mappingServer Samba server name or ip address to be mapped on Windows

@return	userName	&lt;user name&gt; who has currently reserved the target
		NA: target is available to reserve.
		err: errors happened during the process to get the target's attributes
</comment>
          <ServerScriptStep id="_1vuu" name="Who Reserved the Target">
            <code>import re
import string

barcode = rc.lookup('barcode')

res = rc.callProcedure('VLM.Utilities.getTargetAttributes',{'barcode':barcode,'mappingServer':'pek-rhfs1'})
res = eval(res)

#if get attributes success, split the results to a list
if res[0] == 0:
    resList = res[1].split('\r\n')
    reservingUser = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':'Reserved By','attrList':resList})

    if reservingUser == '':
        rc.setLocal('userName','NA')
    else:
        rc.setLocal('userName',reservingUser)
else:
    #if not success, print the error messages and set return value to 'err'
    print res[1]
    rc.setLocal('userName','err')</code>
          </ServerScriptStep>
          <ReturnStep id="_b" retval="$(userName)"/>
        </Procedure>
      </Package>
      <Procedure id="_d" name="reserveTarget">
        <variable name="barcode"/>
        <variable name="mappingServer"/>
        <comment>Reserves a target in VLM.

@param	barcode	Barcode of the target
@param	mappingServer	Samba server name or ip address to be mapped on Windows

@return	Reserved	1 = success, 0 = fail</comment>
        <ServerScriptStep id="_e" name="Reserve Target">
          <code>amazon = 'amazon.wrs.com'
barcode = rc.lookup('barcode')
mappingServer = rc.lookup('mappingServer')

currentUser = rc.callProcedure('VLM.Utilities.whoami')

reservingUser = rc.callProcedure('VLM.Utilities.getReserver',{'barcode':barcode,'mappingServer':mappingServer})

if reservingUser == 'err':
    print 'Procedure:&lt;getReserver&gt; returned error.'

if currentUser == reservingUser:
    print('The target:'+barcode+' has already been reserved by you('+reservingUser+')!')
    rc.setLocal('Reserved', 1)
else:
    if reservingUser != 'NA' and reservingUser != 'err':
        print('The target:'+barcode+' is reserved by '+reservingUser+'!')
        print 'You CANNOT reserve it now!'
        rc.setLocal('Reserved', 0)

if reservingUser == 'NA':
    print 'The target is available to reserve.'
    vlmTool = rc.callProcedure('VLM.Utilities.getVlmTool',{'mappingServer':mappingServer})
    cmd = vlmTool+' reserve -s '+amazon+' -t '+barcode
    res = rc.callProcedure('VLM.Utilities.execShellCommand',{'cmd':cmd})
    res = eval(res)

    if res[0] == 1:
        print 'Reservation failed with:'
        print(res[1])
        rc.setLocal('Reserved', 0)
    else:
        userCheck = rc.callProcedure('VLM.Utilities.getReserver',{'barcode':barcode})
        if userCheck == currentUser:
            print 'Reservation succeeded!'
            rc.setLocal('Reserved', 1)
        else:
            print('You DO NOT have permission to reserve the target('+barcode+')!')
            rc.setLocal('Reserved', 0)
</code>
        </ServerScriptStep>
        <ReturnStep id="_h" retval="$(Reserved)"/>
      </Procedure>
      <Procedure id="_f" name="unreserveTarget">
        <variable name="barcode"/>
        <variable name="mappingServer"/>
        <comment>Unreserves a target in VLM.

@param	barcode	Barcode of the target to be unreserved
@param	mappingServer	Samba server name or ip address to be mapped on Windows

@return	unReserved	1 = success, 0 = fail</comment>
        <ServerScriptStep id="_g" name="Unreserve Target">
          <code>amazon = 'amazon.wrs.com'
barcode = rc.lookup('barcode')
mappingServer = rc.lookup('mappingServer')

currentUser = rc.callProcedure('VLM.Utilities.whoami')

reservingUser = rc.callProcedure('VLM.Utilities.getReserver',{'barcode':barcode,'mappingServer':mappingServer})

if reservingUser == 'err':
    print 'Procedure:&lt;getReserver&gt; returned error.'

if currentUser == reservingUser:
    print 'The target is available to unreserve.'
    vlmTool = rc.callProcedure('VLM.Utilities.getVlmTool',{'mappingServer':mappingServer})
    cmd = vlmTool+' unreserve -s '+amazon+' -t '+barcode
    res = rc.callProcedure('VLM.Utilities.execShellCommand',{'cmd':cmd})
    res = eval(res)

    if res[0] == 1:
        print 'Unreservation failed with:'
        print(res[1])
        rc.setLocal('unReserved', 0)
    else:
        print 'Unreservation succeeded!'
        rc.setLocal('unReserved', 1)
else:
    if reservingUser != 'NA' and reservingUser != 'err':
        print('The target:'+barcode+' is reserved by '+reservingUser+'!')
        print 'You CANNOT unReserve it!'
        rc.setLocal('unReserved', 0)

if reservingUser == 'NA':
    print('The target:'+barcode+' is not reserved by anyone!')
    rc.setLocal('unReserved', 0)</code>
        </ServerScriptStep>
        <ReturnStep id="_i" retval="$(unReserved)"/>
      </Procedure>
      <Procedure id="_p" name="bootTarget">
        <variable name="TOS">VX</variable>
        <variable name="barcode">18044</variable>
        <variable name="kernel">/folk/svc-stsv/hfu/workspace/VIP/VIP_mst_omap3530evm_gnu_32_UP/default/vxWorks</variable>
        <variable name="ftpServer">128.224.158.22</variable>
        <variable name="netmask">NA</variable>
        <variable name="ftpUser">target</variable>
        <variable name="ftpPasswd">vxTarget</variable>
        <variable name="autoBoot">Y</variable>
        <variable name="smallRootfs">N</variable>
        <variable name="mappingServer">pek-rhfs1</variable>
        <comment>Boots a target in VLM.

@param	TOS	LX = linux, VX = vxworks
@param	barcode	Barcode of the target
@param	kernel	(vxworks) absolute path to the vxworks image file
@param	ftpServer	(vxworks) ftp server ip address
@param	netmask	(vxworks) subnet mask
@param	ftpUser	(vxworks) ftp user login
@param	ftpPasswd	(vxworks) ftp password
@param	autoBoot	(vxworks) Y = autoboot is ON, N = autoboot is OFF
@param	smallRootfs	(linux) Y = linux rootfs is small
@param	mappingServer	Samba server name or ip address to be mapped on Windows

@return	Booted	1 = success, 0 = fail</comment>
        <ServerScriptStep id="_q" name="Boot Target">
          <code>import telnetlib
import string
import re

TOS = rc.lookup('TOS')
barcode = rc.lookup('barcode')
kernel = rc.lookup('kernel')
ftpServer = rc.lookup('ftpServer')
netmask = rc.lookup('netmask')
ftpUser = rc.lookup('ftpUser')
ftpPasswd = rc.lookup('ftpPasswd')
autoBoot = rc.lookup('autoBoot')
smallRootfs = rc.lookup('smallRootfs')
mappingServer = rc.lookup('mappingServer')

currentUser = rc.callProcedure('VLM.Utilities.whoami')
reservingUser = rc.callProcedure('VLM.Utilities.getReserver',{'barcode':barcode,'mappingServer':mappingServer})

if reservingUser == 'err':
    print 'Procedure:&lt;getReserver&gt; returned error.'

if currentUser == reservingUser:
    print 'The target is available to boot.'
    res = rc.callProcedure('VLM.Utilities.getTargetAttributes',{'barcode':barcode,'mappingServer':mappingServer})
    res = eval(res)
    
    if res[0] == 0:
        attrList = res[1].split('\r\n')

    terServer = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':'Terminal Server','attrList':attrList})
    terPort = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':'Terminal Server Port','attrList':attrList})
    terPort = int(terPort)+2000

    tn = telnetlib.Telnet(terServer,terPort)

    rebooted = rc.callProcedure('VLM.rebootTarget',{'barcode':barcode,'mappingServer':mappingServer})

    if TOS == 'LX':
        err,obj,outs_part1 = tn.expect(['Welcome to Wind River Linux'],180)

        if smallRootfs == 'Y' and err == 0:
            tn.write('\n\r')
            err,obj,outs_part2 = tn.expect(['#'],180)
    
        if smallRootfs == 'N' and err == 0:
            err,obj,outs_part2 = tn.expect(['login:'],180)

        outsList1 = outs_part1.split('\r\n')
        outsList2 = outs_part2.split('\r\n')
        outsList = outsList1 + outsList2
    
        for n in outsList:
            print n

    if TOS == 'VX':
        bootDev = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':'Boot Device','attrList':attrList})
        dev = re.findall('[a-zA-Z]+',bootDev)[0]
        devNum = re.findall('[0-9]+',bootDev)
        if devNum == []:
            devNum = '0'
        else:
            devNum = devNum[0]
        ip = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':'IP Address','attrList':attrList})
        gateway = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':'Gateway','attrList':attrList})

        if netmask == 'NA':
            cmd = '@'+dev+'('+devNum+',0)host:'+kernel+' h='+ftpServer+' e='+ip+' g='+gateway+' u='+ftpUser+' pw='+ftpPasswd+' f=0x400'
        else:
            cmd = '@'+dev+'('+devNum+',0)host:'+kernel+' h='+ftpServer+' e='+ip+':'+netmask+' g='+gateway+' u='+ftpUser+' pw='+ftpPasswd+' f=0x400'
    
        if autoBoot == 'Y':
            err,obj,outs_part1 = tn.expect(['Press any key to stop auto-boot'],60)
            if err == 0:
                tn.write('\n\r')
        
        err,obj,outs_part2 = tn.expect(['VxWorks Boot'],10)
        if err == 0:
            tn.write(cmd+'\r\n')
        err,obj,outs_part3 = tn.expect(['WDB: Ready'],30)
        
        outsList = outs_part3.split('\r\n')

        for n in outsList:
            print n

    tn.close()

    if rebooted == '1':          
        if err == 0:
            rc.setLocal('Booted',1)
        else:
            rc.setLocal('Booted',0)
    else:
        rc.setLocal('Booted',0)
else:
    if reservingUser != 'NA' and reservingUser != 'err':
        print('The target:'+barcode+' is already reserved by '+reservingUser+'!')
        print 'You CANNOT boot it!'
        rc.setLocal('Booted', 0)
        
if reservingUser == 'NA':
    print('The target:'+barcode+' is not reserved by anyone!')
    rc.setLocal('Booted', 0)
</code>
        </ServerScriptStep>
        <ReturnStep id="_r" retval="$(Booted)"/>
      </Procedure>
      <Procedure id="_j" name="rebootTarget">
        <variable name="barcode"/>
        <variable name="mappingServer"/>
        <comment>Reboots a target in VLM.

@param	barcode	Barcode of the target
@param	mappingServer	Samba server name or ip address to be mapped on Windows

@return	Rebooted	1 = success, 0 = fail</comment>
        <ServerScriptStep id="_k" name="Reboot Target">
          <code>amazon = 'amazon.wrs.com'
barcode = rc.lookup('barcode')
mappingServer = rc.lookup('mappingServer')

currentUser = rc.callProcedure('VLM.Utilities.whoami')

reservingUser = rc.callProcedure('VLM.Utilities.getReserver',{'barcode':barcode,'mappingServer':mappingServer})

if reservingUser == 'err':
    print 'Procedure:&lt;getReserver&gt; returned error.'

if currentUser == reservingUser:
    print 'The target is available to reboot.'
    vlmTool = rc.callProcedure('VLM.Utilities.getVlmTool',{'mappingServer':mappingServer})
    cmd = vlmTool+' reboot -s '+amazon+' -t '+barcode
    res = rc.callProcedure('VLM.Utilities.execShellCommand',{'cmd':cmd})
    res = eval(res)

    if res[0] == 1:
        print 'Reboot failed with:'
        print(res[1])
        rc.setLocal('Rebooted', 0)
    else:
        print 'Reboot succeeded!'
        rc.setLocal('Rebooted', 1)
else:
    if reservingUser != 'NA' and reservingUser != 'err':
        print('The target:'+barcode+' is reserved by '+reservingUser+'!')
        print 'You CANNOT reboot it!'
        rc.setLocal('Rebooted', 0)

if reservingUser == 'NA':
    print('The target:'+barcode+' is not reserved by anyone!')
    rc.setLocal('Rebooted', 0)
</code>
        </ServerScriptStep>
        <ReturnStep id="_l" retval="$(Rebooted)"/>
      </Procedure>
      <Procedure id="_m" name="copyFile">
        <variable name="barcode"/>
        <variable name="mappingServer"/>
        <variable name="kernel"/>
        <variable name="rootfs"/>
        <variable name="dtb"/>
        <comment>Copies a file onto a Linux target.

NOTE 1: If the target is NO PPC target, please set dtb to 'NA' !

@param	barcode	Barcode of the target
@param	kernel	Absolute path to the uImage file
@param	rootfs	Absolute path to the rootfs archive file
@param	mappingServer	Samba server name or ip address to be mapped on Windows

@return	Copied	1 = success, 0 = fail

PS:
On windows,I thought it should proceed like this:
Z:\commandline\vlmTool.bat copyFile -s amazon -t 13269 -k D:\common_pc_64-default_kernel_image-WR4.3.0.0_standard -r D:\common_pc_64-standard-glibc_small-dist.tar.bz2
This will lead to be a 'Path not found' error.

But the correct one should be like this, even you are on windows. Give it a linux path, everything works just fine.
Z:\commandline\vlmTool.bat copyFile -s amazon -t 13269 -k /folk/svc-stsv/workspace/platform/lx43/common_pc_64_standard_small/export/common_pc_64-default_kernel_image-WR4.3.0.0_standard -r /folk/svc-stsv/workspace/platform/lx43/common_pc_64_standard_small/export/common_pc_64-standard-glibc_small-dist.tar.bz2 
</comment>
        <ServerScriptStep id="_n" name="Copy File">
          <code>amazon = 'amazon.wrs.com'
barcode = rc.lookup('barcode')
mappingServer = rc.lookup('mappingServer')
kernel = rc.lookup('kernel')
rootfs = rc.lookup('rootfs')
dtb = rc.lookup('dtb')

currentUser = rc.callProcedure('VLM.Utilities.whoami')

reservingUser = rc.callProcedure('VLM.Utilities.getReserver',{'barcode':barcode,'mappingServer':mappingServer})

if reservingUser == 'err':
    print 'Procedure:&lt;getReserver&gt; returned error.'

if currentUser == reservingUser:
    print 'The target is available to copy file.'
    vlmTool = rc.callProcedure('VLM.Utilities.getVlmTool',{'mappingServer':mappingServer})
    if dtb == 'NA':
        cmd = vlmTool+' copyFile -s '+amazon+' -t '+barcode+' -k '+kernel+' -r '+rootfs
    else:
        cmd = vlmTool+' copyFile -s '+amazon+' -t '+barcode+' -k '+kernel+' -r '+rootfs+' -d '+dtb
    print cmd
    res = rc.callProcedure('VLM.Utilities.execShellCommand',{'cmd':cmd})
    res = eval(res)

    if res[0] == 1:
        print 'Copy file failed with:'
        print(res[1])
        rc.setLocal('Copied', 0)
    else:
        print 'Copy file succeeded!'
        rc.setLocal('Copied', 1)
else:
    if reservingUser != 'NA' and reservingUser != 'err':
        print('The target:'+barcode+' is reserved by '+reservingUser+'!')
        print 'You CAN NOT copy file!'
        rc.setLocal('Copied', 0)

if reservingUser == 'NA':
    print('The target:'+barcode+' is not reserved by anyone!')
    rc.setLocal('Copied', 0)</code>
        </ServerScriptStep>
        <ReturnStep id="_o" retval="$(Copied)"/>
      </Procedure>
      <Procedure id="_s" name="getOneAttr">
        <variable name="barcode">18819</variable>
        <variable name="mappingServer">pek-rhfs1</variable>
        <variable name="keyword">Reserved By</variable>
        <comment>get one attribute information from target

@param	barcode	Barcode of the target
@param	mappingServer	Samba server name or ip address to be mapped on Windows
@param	keyword	Target attribute

@return	attr	not 0 = success, 0 = fail</comment>
        <ServerScriptStep id="_u" name="get One Attribute">
          <code>import re
import string

barcode = rc.lookup('barcode')
mappingServer = rc.lookup('mappingServer')
keyword = rc.lookup('keyword')

res = rc.callProcedure('VLM.Utilities.getTargetAttributes',{'barcode':barcode,'mappingServer':mappingServer})
res = eval(res)

#if get attributes success, split the results to a list
if res[0] == 0:
    resList = res[1].split('\r\n')
    attr = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':keyword,'attrList':resList})

    if attr != 'notFound':
        print 'Attribute found!'
        rc.setLocal('attr',attr)
    else:
        print 'The keyword is not available!!'
        rc.setLocal('attr',0)
else:
    #if not success, print the error messages and set return value to 'err'
    print res[1]
    rc.setLocal('attr',0)</code>
        </ServerScriptStep>
        <ReturnStep id="_v" retval="$(attr)"/>
      </Procedure>
      <Procedure id="_t" name="launchUsermodeAgent">
        <variable name="barcode">18819</variable>
        <variable name="smallRootfs">N</variable>
        <variable name="mappingServer">pek-rhfs1</variable>
        <variable name="UMAport">2012</variable>
        <comment>Hep launch usermode-agent on wrlinux target

@param	barcode	Barcode of the target to be unreserved
@param	mappingServer	Samba server name or ip address to be mapped on Windows
@param	smallRootfs	Y = linux rootfs is small
@param	UMAport	The port number for usermode-agent

@return	launched	1 = success, 0 = fail</comment>
        <ServerScriptStep id="_x" name="Launch Usermode-agent">
          <code>import telnetlib

barcode = rc.lookup('barcode')
smallRootfs = rc.lookup('smallRootfs')
mappingServer = rc.lookup('mappingServer')
UMAport = rc.lookup('UMAport')

currentUser = rc.callProcedure('VLM.Utilities.whoami')
reservingUser = rc.callProcedure('VLM.Utilities.getReserver',{'barcode':barcode,'mappingServer':mappingServer})

if reservingUser == 'err':
    print 'Procedure:&lt;getReserver&gt; returned error.'

if currentUser == reservingUser:
    print 'The target is available to launch usermode-agent.'
    res = rc.callProcedure('VLM.Utilities.getTargetAttributes',{'barcode':barcode,'mappingServer':mappingServer})
    res = eval(res)
    
    if res[0] == 0:
        attrList = res[1].split('\r\n')

    terServer = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':'Terminal Server','attrList':attrList})
    terPort = rc.callProcedure('VLM.Utilities.getInfoFromAttributes',{'keyword':'Terminal Server Port','attrList':attrList})
    terPort = int(terPort)+2000

    tn = telnetlib.Telnet(terServer,terPort)
    tn.write('\n\r')
    tn.write('\n\r')

    if smallRootfs == 'Y':
        tn.write('\n\r')
        err,obj,outs_part1 = tn.expect(['#'],10)
        if err == 0:
            tn.write('usermode-agent -daemon -p '+UMAport+' -V\n')
            err,obj,outs_part2 = tn.expect(['DAEMON READY'],10)
            err,obj,outs_part3 = tn.expect(['#'],10)
        
        if err == 0:
            outsList1 = outs_part1.split('\r\n')
            outsList2 = outs_part2.split('\r\n')
            outsList3 = outs_part3.split('\r\n')
            outsList = outsList1 + outsList2 + outsList3
    
            for n in outsList:
                print n

    if smallRootfs == 'N':
        err,obj,outs_part1 = tn.expect(['login:'],10)
        if err == 0:
            tn.write('root\n')
            err,obj,outs_part2 = tn.expect(['Password:'],10)
        if err == 0:
            tn.write('root\n')
            err,obj,outs_part3 = tn.expect(['root&gt;'],10)
        if err == 0:
            tn.write('usermode-agent -daemon -p '+UMAport+' -V\n')
            err,obj,outs_part4 = tn.expect(['DAEMON READY'],10)
            err,obj,outs_part5 = tn.expect(['root&gt;'],10)
        if err == 0:
            outsList1 = outs_part1.split('\r\n')
            outsList2 = outs_part2.split('\r\n')
            outsList3 = outs_part3.split('\r\n')
            outsList4 = outs_part4.split('\r\n')
            outsList5 = outs_part5.split('\r\n')
            outsList = outsList1 + outsList2 + outsList3 + outsList4 + outsList5
    
            for n in outsList:
                print n

    tn.close()
    
    if err == 0:
        print '=================================================================================='
        print 'Usermode-agent launch succeeded.'
        print '=================================================================================='
        rc.setLocal('launched',1)
    else:
        print 'Error happened during launch usermode-agent!!'
        rc.setLocal('launched',0)
else:
    if reservingUser != 'NA' and reservingUser != 'err':
        print('The target:'+barcode+' is already reserved by '+reservingUser+'!')
        print 'You CANNOT launch usermode-agent!'
        rc.setLocal('launched', 0)
        
if reservingUser == 'NA':
    print('The target:'+barcode+' is not reserved by anyone!')
    rc.setLocal('launched', 0)
</code>
        </ServerScriptStep>
        <ReturnStep id="_y" retval="$(launched)"/>
      </Procedure>
    </Package>
    <Procedure id="_1nNF" name="wdmCapWRLinux">
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1nNG" modifiers="16" x="37"
                      y="82"/>
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1nNH"/>
      <SelectionEventStep client="$(client)"
                          component="menu-window-preferences"
                          event="SELECTION" id="_1nNI"/>
      <ComponentWaiter client="$(client)"
                       component="WorkbenchPreferenceDialog" id="_1nNJ"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WorkbenchPreferenceDialog.text"
                      event="MOUSE_MPRC" id="_1nNK" modifiers="16" x="45"
                      y="11"/>
      <TextInputStep clear="true" client="$(client)"
                     component="WorkbenchPreferenceDialog.text" id="_1nNL">
        <text>Capa</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WorkbenchPreferenceDialog.tree@/Wind River/Capabilities"
                      event="MOUSE_MPRC" id="_1nNM" modifiers="16"/>
      <ProcedureCall id="_1nNN" procedure="qfs.swt.tree.expandNode">
        <variable name="id">WorkbenchPreferenceDialog.tree2</variable>
        <variable name="node">Development</variable>
        <variable name="separator">@</variable>
      </ProcedureCall>
      <ProcedureCall id="_1nNO" procedure="qfs.swt.checkbox.set">
        <variable name="check">true</variable>
        <variable name="id">WorkbenchPreferenceDialog.tree2@/Development/Wind River Linux Development</variable>
      </ProcedureCall>
      <ProcedureCall id="_1nNP" procedure="qfs.swt.checkbox.select">
        <variable name="id">WorkbenchPreferenceDialog.tree2@/Development/Wind River Linux Development</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk30"
                      event="MOUSE_MPRC" id="_1nNQ" modifiers="16"/>
    </Procedure>
    <Procedure id="_1vjt" name="conOcdIss">
      <variable name="conName"/>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1vju" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1vjv" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1vjw"
                       postdelay="2000"/>
      <TryStep id="_1vjx" name="select ocd iss">
        <ProcedureCall id="_1vjy" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree</variable>
          <variable name="node">On Chip Debugging</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/On Chip Debugging/Wind River OCD ISS Connection"
                        event="MOUSE_MPRC" id="_1vkm" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1vj+"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1vj-" retval="simConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1vk0" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonProcessor:" event="MOUSE_MPRC"
                      id="_1vl4" modifiers="16" postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="button_Select..._" event="MOUSE_MPRC"
                      id="_1vl9" modifiers="16" postdelay="1000"/>
      <ComponentWaiter client="$(client)"
                       component="WRUnifiedProcessorSelectionDialog"
                       id="_1vlA"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRUnifiedProcessorSelectionDialog.tree@/MPC82xx"
                      event="MOUSE_MPRC" id="_1vlB" modifiers="16"
                      postdelay="1000" x="-14" y="11"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRUnifiedProcessorSelectionDialog.tree@/MPC82xx/MPC8265"
                      event="MOUSE_MPRC" id="_1vlC" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk9"
                      event="MOUSE_MPRC" id="_1vlD" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1vk3" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1vk4" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1vk6" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1vk7" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1vk9" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1vlM" modifiers="16"
                      postdelay="2000"/>
      <ProcedureCall id="_1vkG" postdelay="1000"
                     procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <FetchTextStep client="$(client)" component="WRNewConnectionWizard.text"
                     id="_1vlL" varname="issConName"/>
      <TryStep id="_1vkI" name="finish" postdelay="5000">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1vkJ" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1vkK"
                       maxerror="0" name="cancle">
          <catchmessage>wdm : $(conName) can NOT created</catchmessage>
          <TryStep id="_1vkL" name="cancle">
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonCancel19" event="MOUSE_MPRC"
                            id="_1vkM" modifiers="16" postdelay="2000"/>
            <CatchSequence exception="TestException" id="_1vkN" maxerror="0"/>
          </TryStep>
          <ReturnStep id="_1vkO" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="DeadlockTimeoutException" id="_1vkP"
                       maxerror="2" name="cancle">
          <ReturnStep id="_1vkQ" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1vkR" maxerror="0"
                       name="cancle">
          <TryStep id="_1vkS" name="cancle">
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonCancel19" event="MOUSE_MPRC"
                            id="_1vkT" modifiers="16" postdelay="2000"/>
            <CatchSequence exception="TestException" id="_1vkU" maxerror="0"/>
          </TryStep>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1vkV" retval="true"/>
    </Procedure>
    <Procedure id="_1nJF" name="conLxRpc">
      <variable name="ipAddr">$(ipAddr)</variable>
      <variable name="platformDir">$(platformDir)</variable>
      <ServerScriptStep id="_1nJG">
        <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')
conName = prjBase + '-' + '$(ipAddr)' + '-rpc'

rc.setLocal('conName',conName)
</code>
      </ServerScriptStep>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1nJH" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1nJI" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1nJJ"
                       postdelay="2000"/>
      <TryStep id="_1nLC">
        <ProcedureCall id="_1nNl" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree@/Wind River Linux</variable>
          <variable name="node">Wind River Linux</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/Wind River Linux/Wind River Linux User Mode Target Server Connection"
                        event="MOUSE_MPRC" id="_1nJK" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1nLD"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1nLE" retval="umaUdpConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1nJL" modifiers="16"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1nJM" param1="629"
                          param2="731"/>
      <SelectionEventStep client="$(client)"
                          component="groupBackend_settings.combo@wdbrpc"
                          event="SELECTION" id="_1nNU"/>
      <MouseEventStep clicks="1" client="$(client)" component="settings.combo"
                      event="MOUSE_MPRC" id="_1nJN" modifiers="16" x="3"
                      y="13"/>
      <TextInputStep clear="true" client="$(client)"
                     component="settings.combo" id="_1nJO">
        <text>$(ipAddr)</text>
        <comment>input target IP address</comment>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupTarget_file_system.combo"
                      event="MOUSE_MPRC" id="_1nJP" modifiers="16" x="16"
                      y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupTarget_file_system.combo" id="_1nJQ">
        <text>$(rootfsDir)</text>
        <comment>input target rootf filesystem</comment>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1nJR" modifiers="16"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1nJS" param1="642"
                          param2="731"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonAdd...4"
                      event="MOUSE_MPRC" id="_1nJT" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="ObjectPathMappingControl__EditPathMappingDialog"
                       id="_1nJU"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo"
                     id="_1nJV">
        <text>/</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo2"
                     id="_1nJX">
        <text>$(dbgfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk40"
                      event="MOUSE_MPRC" id="_1nJY" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1nJZ" modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;0"
                       id="_1nJa">
        <text>$(dbgfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;1"
                      event="MOUSE_MPRC" id="_1nJb" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;2"
                      event="MOUSE_MPRC" id="_1nJc" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1nJd" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1nJe" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="buttonStop_triggering_thread"
                          event="SELECTION" id="_1nJf"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1nJg" modifiers="16"/>
      <ProcedureCall id="_1nJh" procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1nJi">
        <text>$(conName)</text>
      </TextInputStep>
      <TryStep id="_1nNV" name="finish">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1nNX" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1nNW" maxerror="0"
                       name="cancle">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1nNa" modifiers="16"/>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1nNv" name="conLxQemu">
      <variable name="platformDir">$(platformDir)</variable>
      <ServerScriptStep disabled="true" id="_1nNw">
        <code>import os

rootfsDir = os.path.join('$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')
conName = prjBase + '-qemu'

rc.setLocal('conName',conName)
</code>
      </ServerScriptStep>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1nNx" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1nNy" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1nNz"
                       postdelay="2000"/>
      <TryStep id="_1nN+">
        <ProcedureCall id="_1nN-" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree@/Wind River Linux</variable>
          <variable name="node">Wind River Linux</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/Wind River Linux/Wind River QEMU Linux User Mode Target Server Connection"
                        event="MOUSE_MPRC" id="_1nOb" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1nO1"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1nO2" retval="umaUdpConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1nO3" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.text"
                      event="MOUSE_MPRC" id="_1nvp" modifiers="16" x="35"
                      y="9"/>
      <SetGlobalStep id="_1o2T" local="true" varname="insNum">
        <default>3</default>
      </SetGlobalStep>
      <ProcedureCall id="_1o2U" local="true"
                     procedure="qfs.utils.random.getNumberFromRange"
                     retvarname="insNum">
        <variable name="lowest">11</variable>
        <variable name="highest">99</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1nvq"
                     postdelay="1000" predelay="1000">
        <text>$(insNum)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupWind_River_Linux_platform_project.combo"
                      event="MOUSE_MPRC" id="_1nQ7" modifiers="16" x="112"
                      y="15"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupWind_River_Linux_platform_project.combo"
                     id="_1nQ9">
        <text> $(platformDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupQEMU_simulator_configuration.table@Name@TARGET_QEMU_OPTS"
                      disabled="true" event="MOUSE_MPRC" id="_1n-W"
                      modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupQEMU_simulator_configuration.table@Value&amp;58"
                      disabled="true" event="MOUSE_MPRC" id="_1n-X"
                      modifiers="16"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupQEMU_simulator_configuration.text"
                     disabled="true" id="_1n-Y">
        <text>"-i 2"</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1n-Z" modifiers="16"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1nQm" param1="629"
                          param2="731"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1nQq" modifiers="16"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1nQr" param1="642"
                          param2="731"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonAdd...4"
                      event="MOUSE_MPRC" id="_1nOC" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="ObjectPathMappingControl__EditPathMappingDialog"
                       id="_1nOD"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo"
                     id="_1nOE">
        <text>/</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo2"
                     id="_1nOG">
        <text>$(dbgfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk40"
                      event="MOUSE_MPRC" id="_1nOH" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1nOI" modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;0"
                       id="_1nOJ">
        <text>$(dbgfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;1"
                      event="MOUSE_MPRC" id="_1nOK" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;2"
                      event="MOUSE_MPRC" id="_1nOL" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1nOM" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1nON" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="buttonStop_triggering_thread"
                          event="SELECTION" id="_1nOO"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1nOP" modifiers="16"/>
      <ProcedureCall id="_1nOQ" procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1nOR">
        <text>$(conName)</text>
      </TextInputStep>
      <TryStep id="_1nOS" name="finish">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1nOT" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1nOU"
                       maxerror="0" name="cancle">
          <catchmessage>wdm : $(conName) can NOT created</catchmessage>
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1nOV" modifiers="16"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1n-a" maxerror="0"
                       name="cancle">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1n-b" modifiers="16"/>
        </CatchSequence>
      </TryStep>
      <SetGlobalStep id="_1n-f" local="true" varname="rseItem"/>
      <ProcedureCall id="_1n-e" local="true"
                     procedure="qfs.swt.tree.getRowCount"
                     retvarname="rseItem">
        <variable name="id">Remote_Systems</variable>
      </ProcedureCall>
      <Test id="_1n-j">
        <IfSequence id="_1n-g" test="$(rseItem) == 0">
          <ReturnStep id="_1n-h"/>
        </IfSequence>
      </Test>
    </Procedure>
    <Procedure id="_1oNO" name="conLxUmaUdp">
      <ServerScriptStep disabled="true" id="_1oNP">
        <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')
conName = prjBase + '-qemu'

rc.setLocal('conName',conName)
</code>
      </ServerScriptStep>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1oNQ" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1oNR" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1oNS"
                       postdelay="2000"/>
      <TryStep id="_1oNT">
        <ProcedureCall id="_1oNU" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree@/Wind River Linux</variable>
          <variable name="node">Wind River Linux</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/Wind River Linux/Wind River Linux User Mode Target Server Connection"
                        event="MOUSE_MPRC" id="_1oOQ" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1oNW"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1oNX" retval="umaUdpConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1oNY" modifiers="16"/>
      <TextInputStep clear="true" client="$(client)"
                     component="settings.combo" id="_1oOe" postdelay="1000"
                     predelay="1000" single="false">
        <text>$(ip)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupBackend_settings.text"
                      event="MOUSE_MPRC" id="_1pYa" modifiers="16" x="26"
                      y="13"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.text" id="_1pYb"
                     postdelay="1000" predelay="1000" single="false">
        <text>$(umaPort)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupTarget_file_system.combo"
                      event="MOUSE_MPRC" id="_1oOf" modifiers="16" x="23"
                      y="1"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupTarget_file_system.combo" id="_1oOg"
                     postdelay="1000" predelay="1000" single="false">
        <text>$(rootfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1oOn" modifiers="16"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1oOo" param1="655"
                          param2="726"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1oOp" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonAdd...4"
                      event="MOUSE_MPRC" id="_1oOq" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="ObjectPathMappingControl__EditPathMappingDialog"
                       id="_1oOr"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo"
                     id="_1oNo">
        <text>/</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo2"
                     id="_1oNp" postdelay="1000">
        <text>$(dbgfsDir)</text>
      </TextInputStep>
      <TryStep id="_1pYc">
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk40"
                        event="MOUSE_MPRC" id="_1oNq" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1pYd" maxerror="0"/>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1oNr" modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;0"
                       id="_1oNs">
        <text>$(dbgfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;1"
                      event="MOUSE_MPRC" id="_1oNt" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;2"
                      event="MOUSE_MPRC" id="_1oNu" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1oNv" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1oNw" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="buttonStop_triggering_thread"
                          event="SELECTION" id="_1oNx"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1oNy" modifiers="16"/>
      <ProcedureCall id="_1oNz" procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1oN+">
        <text>$(conName)</text>
      </TextInputStep>
      <TryStep id="_1oN-" name="finish">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1oO0" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1oO1"
                       maxerror="0" name="cancle">
          <catchmessage>wdm : $(conName) can NOT created</catchmessage>
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1oO2" modifiers="16"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1oO3" maxerror="0"
                       name="cancle">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1oO4" modifiers="16"/>
        </CatchSequence>
      </TryStep>
      <SetGlobalStep id="_1oO5" local="true" varname="rseItem"/>
      <ProcedureCall id="_1oO6" local="true"
                     procedure="qfs.swt.tree.getRowCount"
                     retvarname="rseItem">
        <variable name="id">Remote_Systems</variable>
      </ProcedureCall>
      <Test id="_1oO7">
        <IfSequence id="_1oO8" test="$(rseItem) == 0">
          <ReturnStep id="_1oO9"/>
        </IfSequence>
      </Test>
    </Procedure>
    <Procedure id="_1pVu" name="conLxUmaUdpPort">
      <variable name="ip"/>
      <variable name="port"/>
      <variable name="rootfsDir"/>
      <variable name="rootfsDirWb"/>
      <variable name="dbgfsDir"/>
      <variable name="dbgfsDirWb"/>
      <variable name="conName"/>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1pVw" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1pVx" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1pVy"
                       postdelay="2000"/>
      <TryStep id="_1pVz"
               name="select Wind River Linux User Mode Target Server Connection">
        <ProcedureCall id="_1pV+" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree@/Wind River Linux</variable>
          <variable name="node">Wind River Linux</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/Wind River Linux/Wind River Linux User Mode Target Server Connection"
                        event="MOUSE_MPRC" id="_1pV-" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1pW0"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1pW1" retval="umaUdpConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1pW2" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="groupBackend_settings.combo@wdbrpc"
                          event="SELECTION" id="_1rHr" postdelay="2000"/>
      <IfSequence id="_1vS3" test="not '$(ip)'">
        <ProcedureCall id="_1vS0" local="true" procedure="utils.vlmInet"
                       retvarname="bcInet">
          <variable name="barcode">$(bc)</variable>
        </ProcedureCall>
        <SetGlobalStep id="_1vS1" varname="ip">
          <default>$(bcInet)</default>
        </SetGlobalStep>
      </IfSequence>
      <TextInputStep clear="true" client="$(client)"
                     component="settings.combo" id="_1vS2" postdelay="1000"
                     predelay="1000" single="false">
        <text>$(ip)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupBackend_settings.text"
                      event="MOUSE_MPRC" id="_1pX8" modifiers="16" x="26"
                      y="13"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.text" id="_1pX9"
                     postdelay="1000" predelay="1000" single="false">
        <text>$(umaPort)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupTarget_file_system.combo"
                      event="MOUSE_MPRC" id="_1pW4" modifiers="16" x="23"
                      y="1"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupTarget_file_system.combo" id="_1pW5"
                     postdelay="1000" predelay="1000" single="false">
        <text>$(rootfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1pW6" modifiers="16"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1pW7" param1="655"
                          param2="726"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1pW8" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonAdd...4"
                      event="MOUSE_MPRC" id="_1pW9" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="ObjectPathMappingControl__EditPathMappingDialog"
                       id="_1pWA"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo"
                     id="_1pWB">
        <text>/</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo2"
                     id="_1pWC" single="false">
        <text>$(dbgfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk40"
                      event="MOUSE_MPRC" id="_1pWD" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      disabled="true" event="MOUSE_MPRC" id="_1pWE"
                      modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;0"
                       id="_1pWF">
        <text>$(dbgfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;1"
                      disabled="true" event="MOUSE_MPRC" id="_1pWG"
                      modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;1"
                       id="_1pY-">
        <text>$(rootfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1pWI" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1pWJ" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="buttonStop_triggering_thread"
                          event="SELECTION" id="_1pWK"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1pWL" modifiers="16"/>
      <ProcedureCall id="_1pWM" procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1pWN"
                     postdelay="2000">
        <text>$(conName)</text>
      </TextInputStep>
      <TryStep id="_1pWO" name="finish" postdelay="5000">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1pWP" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1pWQ"
                       maxerror="0" name="cancle">
          <catchmessage>wdm : $(conName) can NOT created</catchmessage>
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1pWR" modifiers="16" postdelay="2000"/>
          <ReturnStep id="_1soi" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1pWS" maxerror="0"
                       name="cancle">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1pWT" modifiers="16"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1sPw" retval="true"/>
    </Procedure>
    <Procedure id="_1r9f" name="conLxWrproxyUdpPort">
      <ServerScriptStep disabled="true" id="_1r9g">
        <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')
conName = prjBase + '-qemu'

rc.setLocal('conName',conName)
</code>
      </ServerScriptStep>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1r9h" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1r9i" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1r9j"
                       postdelay="2000"/>
      <TryStep id="_1r9k">
        <ProcedureCall id="_1r9l" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree@/Wind River Linux</variable>
          <variable name="node">Wind River Linux</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/Wind River Linux/Wind River Linux User Mode Target Server Connection"
                        event="MOUSE_MPRC" id="_1r9m" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1r9n"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1r9o" retval="umaUdpConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1r9p" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="groupBackend_settings.combo@wdbproxy"
                          event="SELECTION" id="_1rB3"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupBackend_settings.combo9"
                      event="MOUSE_MPRC" id="_1rB8" modifiers="16" x="120"
                      y="9"/>
      <SelectionEventStep client="$(client)"
                          component="groupBackend_settings.combo7@UDP"
                          event="SELECTION" id="_1rB9"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.combo2" id="_1rJ2"
                     postdelay="1000" predelay="1000">
        <text>$(ip)</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.text2" id="_1rJ3"
                     postdelay="1000">
        <text>0x4444</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.combo8" id="_1rJ4"
                     postdelay="1000">
        <text>10.0.0.2</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.text3" id="_1rJ5"
                     postdelay="1000">
        <text>0x4321</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupTarget_file_system.combo" id="_1rJ6"
                     postdelay="1000">
        <text>$(rootfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1r9v" modifiers="16"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1r9w" param1="655"
                          param2="726"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1r9x" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonAdd...4"
                      event="MOUSE_MPRC" id="_1r9y" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="ObjectPathMappingControl__EditPathMappingDialog"
                       id="_1r9z"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo"
                     id="_1r9+">
        <text>/</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo2"
                     id="_1r9-" single="false">
        <text>$(dbgfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk40"
                      event="MOUSE_MPRC" id="_1rA0" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      disabled="true" event="MOUSE_MPRC" id="_1rA1"
                      modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;0"
                       id="_1rA2">
        <text>$(dbgfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;1"
                      disabled="true" event="MOUSE_MPRC" id="_1rA3"
                      modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;1"
                       id="_1rA4">
        <text>$(rootfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1rA5" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1rA6" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="buttonStop_triggering_thread"
                          event="SELECTION" id="_1rA7"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1rA8" modifiers="16"/>
      <ProcedureCall id="_1rA9" procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1rAA"
                     postdelay="2000">
        <text>$(conName)</text>
      </TextInputStep>
      <TryStep id="_1rAB" name="finish">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1rAC" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1rAD"
                       maxerror="0" name="cancle">
          <catchmessage>wdm : $(conName) can NOT created</catchmessage>
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1rAE" modifiers="16"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rAF" maxerror="0"
                       name="cancle">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1rAG" modifiers="16"/>
        </CatchSequence>
      </TryStep>
      <ProcedureCall id="_1sQ0" local="true"
                     procedure="qfs.swt.tree.getRowCount"
                     retvarname="rseItem">
        <variable name="id">Remote_Systems</variable>
      </ProcedureCall>
      <IfSequence id="_1sQ1" test="$(rseItem) != 1">
        <ProcedureCall id="_1sQ2" procedure="qfs.run-log.logError">
          <variable name="message">failed to create connection $(conName) </variable>
          <variable name="withScreenshots">true</variable>
        </ProcedureCall>
        <ReturnStep id="_1sQ3" retval="false"/>
      </IfSequence>
      <ReturnStep id="_1sQ4" retval="true"/>
    </Procedure>
    <Procedure id="_1rAM" name="conLxWrproxyMipc">
      <ServerScriptStep disabled="true" id="_1rAN">
        <code>import os

rootfsDir = os.path.join(r'$(platformDir)','export','dist')
dbgfsDir = os.path.join(rootfsDir,'usr','lib','debug')

rootfsDirWb = rootfsDir + os.sep
dbgfsDirWb = dbgfsDir + os.sep

rc.setLocal('rootfsDir',rootfsDir)
rc.setLocal('dbgfsDir',dbgfsDir)
rc.setLocal('rootfsDirWb',rootfsDirWb)
rc.setLocal('dbgfsDirWb',dbgfsDirWb)

prjBase = os.path.basename('$(platformDir)')
conName = prjBase + '-qemu'

rc.setLocal('conName',conName)
</code>
      </ServerScriptStep>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1rAO" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1rAP" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1rAQ"
                       postdelay="2000"/>
      <TryStep id="_1rAR">
        <ProcedureCall id="_1rAS" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree@/Wind River Linux</variable>
          <variable name="node">Wind River Linux</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/Wind River Linux/Wind River Linux User Mode Target Server Connection"
                        event="MOUSE_MPRC" id="_1rAT" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1rAU"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1rAV" retval="umaUdpConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1rAW" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="groupBackend_settings.combo@wdbproxy"
                          event="SELECTION" id="_1rBA"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="groupBackend_settings.combo9"
                      event="MOUSE_MPRC" id="_1rBB" modifiers="16" x="120"
                      y="9"/>
      <SelectionEventStep client="$(client)"
                          component="groupBackend_settings.combo7@MIPC"
                          event="SELECTION" id="_1rBC"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.combo9" id="_1rBX"
                     postdelay="1000" predelay="1000">
        <text>$(ip)</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.text" id="_1rBY"
                     postdelay="1000">
        <text>0x4444</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.combo4" id="_1rBZ"
                     postdelay="1000">
        <text>2</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.combo5" id="_1rBa"
                     postdelay="1000">
        <text>1</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupBackend_settings.combo6" id="_1rBb"
                     postdelay="1000">
        <text>main</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupTarget_file_system.combo" id="_1rAb"
                     postdelay="1000" predelay="1000" single="false">
        <text>$(rootfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1rAc" modifiers="16"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1rAd" param1="655"
                          param2="726"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1rAe" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonAdd...4"
                      event="MOUSE_MPRC" id="_1rAf" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="ObjectPathMappingControl__EditPathMappingDialog"
                       id="_1rAg"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo"
                     id="_1rAh">
        <text>/</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="ObjectPathMappingControl__EditPathMappingDialog.combo2"
                     id="_1rAi" single="false">
        <text>$(dbgfsDir)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk40"
                      event="MOUSE_MPRC" id="_1rAj" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      disabled="true" event="MOUSE_MPRC" id="_1rAk"
                      modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;0"
                       id="_1rAl">
        <text>$(dbgfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;1"
                      disabled="true" event="MOUSE_MPRC" id="_1rAm"
                      modifiers="16"/>
      <CheckStringStep client="$(client)"
                       component="WRNewConnectionWizard.table@Host Path&amp;1"
                       id="_1rAn">
        <text>$(rootfsDirWb)</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1rAo" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1rAp" modifiers="16"/>
      <SelectionEventStep client="$(client)"
                          component="buttonStop_triggering_thread"
                          event="SELECTION" id="_1rAq"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1rAr" modifiers="16"/>
      <ProcedureCall id="_1rAs" procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1rAt"
                     postdelay="2000">
        <text>$(conName)</text>
      </TextInputStep>
      <TryStep id="_1rAu" name="finish">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1rAv" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1rAw"
                       maxerror="0" name="cancle">
          <catchmessage>wdm : $(conName) can NOT created</catchmessage>
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1rAx" modifiers="16"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rAy" maxerror="0"
                       name="cancle">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel19" event="MOUSE_MPRC"
                          id="_1rAz" modifiers="16"/>
        </CatchSequence>
      </TryStep>
      <ProcedureCall id="_1sPx" local="true"
                     procedure="qfs.swt.tree.getRowCount"
                     retvarname="rseItem">
        <variable name="id">Remote_Systems</variable>
      </ProcedureCall>
      <IfSequence id="_1sPy" test="$(rseItem) != 1">
        <ProcedureCall id="_1sPz" procedure="qfs.run-log.logError">
          <variable name="message">failed to create connection $(conName) </variable>
          <variable name="withScreenshots">true</variable>
        </ProcedureCall>
        <ReturnStep id="_1sP+" retval="false"/>
      </IfSequence>
      <ReturnStep id="_1sP-" retval="true"/>
    </Procedure>
    <Procedure id="_1tHT" name="conVxSim">
      <variable name="vipName"/>
      <variable name="conName"/>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1tHV" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1tHW" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1tHX"
                       postdelay="2000"/>
      <TryStep id="_1tHY">
        <ProcedureCall id="_1tHZ" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree@/VxWorks 6.x</variable>
          <variable name="node">Wind River VxWorks 6.x Simulator Connection</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/VxWorks 6.x/Wind River VxWorks 6.x Simulator Connection"
                        event="MOUSE_MPRC" id="_1tIQ" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1tHb"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1tHc" retval="simConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1tHd" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonCustom_simulator:" event="MOUSE_MPRC"
                      id="_1tJ7" modifiers="16" postdelay="2000"/>
      <TextInputStep clear="true" client="$(client)" component="comboTip"
                     id="_1tJ8" postdelay="4000">
        <text>$(vipName)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1tJ9" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1tJA" modifiers="16"
                      postdelay="2000"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1tJB" param1="525"
                          param2="629"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1tJC" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1tJD" modifiers="16"
                      postdelay="2000"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1tJE" param1="775"
                          param2="629"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1tJF" modifiers="16"
                      postdelay="2000"/>
      <ComponentEventStep client="$(client)" component="WRNewConnectionWizard"
                          event="COMPONENT_RESIZED" id="_1tJG" param1="775"
                          param2="664"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;1"
                      event="MOUSE_MPRC" id="_1tJH" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1tJL" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1tJM" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1tJN" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1tJO" modifiers="16"
                      postdelay="2000"/>
      <ProcedureCall id="_1tH+" procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1tH-"
                     postdelay="2000">
        <text>$(conName)</text>
      </TextInputStep>
      <TryStep id="_1tI0" name="finish" postdelay="5000">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1tI1" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1tI2"
                       maxerror="0" name="cancle">
          <catchmessage>wdm : $(conName) can NOT created</catchmessage>
          <TryStep id="_1tsO" name="cancle">
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonCancel19" event="MOUSE_MPRC"
                            id="_1tI3" modifiers="16" postdelay="2000"/>
            <CatchSequence exception="TestException" id="_1tsP" maxerror="0"/>
          </TryStep>
          <ReturnStep id="_1tI4" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="DeadlockTimeoutException" id="_1tI5"
                       maxerror="2" name="cancle">
          <ReturnStep id="_1tsN" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1tsL" maxerror="0"
                       name="cancle">
          <TryStep id="_1tsQ" name="cancle">
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonCancel19" event="MOUSE_MPRC"
                            id="_1tsR" modifiers="16" postdelay="2000"/>
            <CatchSequence exception="TestException" id="_1tsS" maxerror="0"/>
          </TryStep>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1tIB" retval="true"/>
    </Procedure>
    <Procedure id="_1u6E" name="conVxWdbrpc">
      <variable name="vipName"/>
      <variable name="conName"/>
      <MouseEventStep clicks="1" client="$(client)" component="Remote_Systems"
                      event="MOUSE_MPRC" id="_1u6F" modifiers="16" x="54"
                      y="64"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipDefine_a_connection_to_remote_system"
                      event="MOUSE_MPRC" id="_1u6G" modifiers="16"/>
      <ComponentWaiter client="$(client)"
                       component="RSEMainNewConnectionWizard" id="_1u6H"
                       postdelay="2000"/>
      <TryStep id="_1u6I" name="select vxworks wdb connection">
        <ProcedureCall id="_1u6J" procedure="qfs.swt.tree.expandNode">
          <variable name="id">RSENewConnectionWizardSelectionPage.tree@/VxWorks 6.x</variable>
          <variable name="node">Wind River VxWorks 6.x Simulator Connection</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="RSENewConnectionWizardSelectionPage.tree@/VxWorks 6.x/Wind River VxWorks 6.x Target Server Connection"
                        event="MOUSE_MPRC" id="_1u6K" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1u6L"
                       maxerror="0" name="ignore ">
          <catchmessage>no "WR Linux User Mode Target Server Connection "</catchmessage>
          <ReturnStep id="_1u6M" retval="simConnection"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext"
                      event="MOUSE_MPRC" id="_1u6N" modifiers="16"
                      postdelay="2000"/>
      <IfSequence id="_1vS4" test="not '$(ip)'">
        <ProcedureCall id="_1vS5" local="true" procedure="utils.vlmInet"
                       retvarname="bcInet">
          <variable name="barcode">$(bc)</variable>
        </ProcedureCall>
        <SetGlobalStep id="_1vS6" varname="ip">
          <default>$(bcInet)</default>
        </SetGlobalStep>
      </IfSequence>
      <TextInputStep clear="true" client="$(client)"
                     component="settings.combo" id="_1u7i" postdelay="2000">
        <text>$(ip)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonFile:"
                      event="MOUSE_MPRC" id="_1u7p" modifiers="16"
                      postdelay="2000"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupKernel_image.combo" id="_1u7j"
                     postdelay="2000">
        <text>$(vipName)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1u6Q" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRNewConnectionWizard.table@Host Path&amp;0"
                      event="MOUSE_MPRC" id="_1u7l" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1u7k" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1u7m" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext2"
                      event="MOUSE_MPRC" id="_1u7n" modifiers="16"
                      postdelay="2000"/>
      <ProcedureCall id="_1u6d" procedure="qfs.swt.checkbox.deselect">
        <variable name="id">buttonImmediately_connect_to_target_if_possible</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="WRNewConnectionWizard.text" id="_1u6e"
                     postdelay="2000">
        <text>$(conName)</text>
      </TextInputStep>
      <TryStep id="_1u6f" name="finish" postdelay="5000">
        <MouseEventStep clicks="1" client="$(client)" component="buttonFinish"
                        event="MOUSE_MPRC" id="_1u6g" modifiers="16"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1u6h"
                       maxerror="0" name="cancle">
          <catchmessage>wdm : $(conName) can NOT created</catchmessage>
          <TryStep id="_1u6i" name="cancle">
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonCancel19" event="MOUSE_MPRC"
                            id="_1u6j" modifiers="16" postdelay="2000"/>
            <CatchSequence exception="TestException" id="_1u6k" maxerror="0"/>
          </TryStep>
          <ReturnStep id="_1u6l" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="DeadlockTimeoutException" id="_1u6m"
                       maxerror="2" name="cancle">
          <ReturnStep id="_1u6n" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1u6o" maxerror="0"
                       name="cancle">
          <TryStep id="_1u6p" name="cancle">
            <MouseEventStep clicks="1" client="$(client)"
                            component="buttonCancel19" event="MOUSE_MPRC"
                            id="_1u6q" modifiers="16" postdelay="2000"/>
            <CatchSequence exception="TestException" id="_1u6r" maxerror="0"/>
          </TryStep>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1u6s" retval="true"/>
    </Procedure>
    <Procedure id="_1nRZ" name="conFirst">
      <TryStep id="_1nRc" name="selectConnection">
        <ProcedureCall id="_1nRd" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Remote_Systems</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.target.ui.rse.ConnectAction"
                        event="MOUSE_MPRC" id="_1nRb" modifiers="16"/>
        <CatchSequence exception="DisabledComponentException" id="_1nRe"
                       maxerror="0" name="ignore">
          <ReturnStep id="_1nRf"/>
        </CatchSequence>
      </TryStep>
      <ComponentWaiter client="$(client)"
                       component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                       id="_1nS1" local="true" timeout="180000">
        <comment>wait for connection to complete</comment>
      </ComponentWaiter>
    </Procedure>
    <Procedure id="_1tcI" name="conVxSelect">
      <variable name="vxName">$(conName)</variable>
      <ProcedureCall id="_1tgt" procedure="uiClickRse"/>
      <TryStep id="_1tcJ" name="selectConnection">
        <ProcedureCall id="_1tcK" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Remote_Systems</variable>
          <variable name="node">$(vxName).*</variable>
          <variable name="separator">%</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.target.ui.rse.ConnectAction"
                        event="MOUSE_MPRC" id="_1tcL" modifiers="16"/>
        <CatchSequence exception="DisabledComponentException" id="_1tcM"
                       maxerror="0" name="ignore">
          <ReturnStep id="_1tcN"/>
        </CatchSequence>
      </TryStep>
      <ComponentWaiter client="$(client)"
                       component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                       id="_1tcO" local="true" timeout="180000">
        <comment>wait for connection to complete</comment>
      </ComponentWaiter>
    </Procedure>
    <Procedure id="_1nRk" name="conDisFirst">
      <TryStep id="_1nRu" name="selectConnection">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems&amp;/0" event="MOUSE_MPRC"
                        id="_1vpK" modifiers="16" postdelay="1000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                        event="MOUSE_MPRC" id="_1vpL" modifiers="16"
                        postdelay="1000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1nRw"
                       maxerror="0" name="ignore"/>
        <CatchSequence exception="TestException" id="_1vpM" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vqE" name="conDisName">
      <variable name="conName">WRISS_MPC8265</variable>
      <TryStep id="_1vqF" name="selectConnection">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems%$(conName).*"
                        event="MOUSE_MPRC" id="_1vqG" modifiers="16"
                        postdelay="1000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                        event="MOUSE_MPRC" id="_1vqH" modifiers="16"
                        postdelay="1000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1vqI"
                       maxerror="0" name="ignore"/>
        <CatchSequence exception="TestException" id="_1vqJ" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1nT5" name="rseExpandProcess">
      <ProcedureCall id="_1nT6" procedure="qfs.swt.tree.selectNode">
        <variable name="id">Remote_Systems</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <TryStep id="_1nTt" name="expandNode">
        <ProcedureCall id="_1nT7" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nT8" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Remote_Systems&amp;/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nTu" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems&amp;/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nTv" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Remote_Systems&amp;/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nTw" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems&amp;/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nTx" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Remote_Systems&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nTy" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nTz" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Remote_Systems&amp;/0/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nT+" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems&amp;/0/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1nUE" procedure="qfs.swt.tree.expandNodes">
          <variable name="id">Remote_Systems&amp;/0/0/0/0</variable>
          <variable name="callbackProc"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1nT-" maxerror="0"
                       name="ignore">
          <ReturnStep id="_1nU0"/>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1nUL" name="rseSelectProcess">
      <variable name="vxName">$(conName)</variable>
      <ProcedureCall id="_1vTg" procedure="uiClickRse"/>
      <TryStep id="_1ufB" name="select connection in RSE">
        <ProcedureCall id="_1ufC" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Remote_Systems</variable>
          <variable name="node">$(vxName).*</variable>
          <variable name="separator">%</variable>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1ufD"
                       maxerror="0">
          <ReturnStep id="_1ufg" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1ufF" maxerror="0"/>
      </TryStep>
      <TryStep id="_1ufK" name="rse2">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*"
                         id="_1ufL" local="true" timeout="60000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1ufM" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1ufN"
                       maxerror="2">
          <ReturnStep id="_1ufO" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1ufW" name="rse3">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/Linux Wind River.*"
                         id="_1ufX" local="true" timeout="120000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1ufY" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*/Linux.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1ufZ"
                       maxerror="2">
          <ReturnStep id="_1ufa" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1ufb" name="processes">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/Linux.*/Processes"
                         id="_1ufc" local="true" timeout="120000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1ufd" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*/Linux.*/Processes</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1ufe"
                       maxerror="2">
          <ReturnStep id="_1uff" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1ufh" retval="true"/>
    </Procedure>
    <Procedure id="_1oWt" name="rseSelectMain">
      <SelectionEventStep client="$(client)"
                          component="tabfolder-Remote_Systems@Remote Systems"
                          event="SELECTION" id="_1oWu"/>
      <ProcedureCall id="_1oWv" procedure="qfs.swt.tree.selectNode">
        <variable name="id">Remote_Systems</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <WhileSequence id="_1oWw" test="1">
        <TryStep id="_1oWx" name="expandNode">
          <ProcedureCall id="_1oWy" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oWz" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems&amp;/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oW+" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems&amp;/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oW-" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems&amp;/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oX0" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems&amp;/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oX1" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems&amp;/0/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oX2" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems&amp;/0/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oX3" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems&amp;/0/0/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oX4" postdelay="2000"
                         procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems&amp;/0/0/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oX8" postdelay="2000"
                         procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems%/.*Wind.*/Wind.*/Linux.*/Processes.*/yzhang0.*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <ProcedureCall id="_1oX9" postdelay="2000"
                         procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems%/.*Wind.*/Wind.*/Linux.*/Processes.*/yzhang0.*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <BreakStep id="_1oX6"/>
          <CatchSequence exception="TestException" id="_1oX7" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1sV7" name="rseSelectPenguin">
      <SelectionEventStep client="$(client)"
                          component="tabfolder-Remote_Systems@Remote Systems"
                          event="SELECTION" id="_1sV8"/>
      <ProcedureCall id="_1sV9" procedure="qfs.swt.tree.selectNode">
        <variable name="id">Remote_Systems</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <RepeatSequence count="100" id="_1sV+" var="idx">
        <TryStep id="_1sV-" name="expandNode">
          <ProcedureCall id="_1sW3" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems%/$(conName).*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <ProcedureCall id="_1sW4" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems%/$(conName).*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <ProcedureCall id="_1vT-" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems%/$(conName).*/Wind River Target.*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <ProcedureCall id="_1sW8" postdelay="2000"
                         procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*/Processes"
                          event="MOUSE_MPRC" id="_1saA" modifiers="16"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="toolItemTipResync_and_Refresh_Processes_(F5)"
                          event="MOUSE_MPRC" id="_1saB" modifiers="16"/>
          <ProcedureCall id="_1sW9" postdelay="2000"
                         procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*/Processes.*/penguin.*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <ProcedureCall id="_1sWA" postdelay="2000"
                         procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*/Processes.*/penguin.*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <BreakStep id="_1sWB"/>
          <CatchSequence exception="TestException" id="_1sWC" maxerror="0"
                         name="ignore"/>
        </TryStep>
        <IfSequence id="_1sWD" test="$(idx) &gt; 98">
          <ReturnStep id="_1sWE" retval="false"/>
        </IfSequence>
      </RepeatSequence>
      <ReturnStep id="_1sWF" retval="true"/>
      <WhileSequence disabled="true" id="_1sVA" test="1">
        <TryStep id="_1sVB" name="expandNode">
          <ProcedureCall id="_1sVC" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVD" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems&amp;/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVE" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems&amp;/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVF" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems&amp;/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVG" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems&amp;/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVH" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems&amp;/0/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVI" procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems&amp;/0/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVJ" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems&amp;/0/0/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVK" postdelay="2000"
                         procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems&amp;/0/0/0/0</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sVL" postdelay="2000"
                         procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems%/.*Wind.*/Wind.*/Linux.*/Processes.*/penguin.*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <ProcedureCall id="_1sVM" postdelay="2000"
                         procedure="qfs.swt.tree.expandNode">
            <variable name="id">Remote_Systems%/.*Wind.*/Wind.*/Linux.*/Processes.*/penguin.*</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <BreakStep id="_1sVN"/>
          <CatchSequence exception="TestException" id="_1sVO" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1oXB" name="rseRefreshProcess">
      <SelectionEventStep client="$(client)"
                          component="tabfolder-Remote_Systems@Remote Systems"
                          event="SELECTION" id="_1oXC"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*/Processes"
                      event="MOUSE_MPRC" id="_1oXV" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipResync_and_Refresh_Processes_(F5)"
                      event="MOUSE_MPRC" id="_1oXT" modifiers="16"/>
    </Procedure>
    <Procedure id="_1oZ2" name="rseAttachMain">
      <ProcedureCall id="_1oZ3" procedure="rseRefreshProcess"/>
      <ProcedureCall id="_1oZ4" procedure="rseSelectMain"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*/Processes/yzhang0.*"
                      event="MOUSE_MPRC" id="_1oZ5" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*/Processes/yzhang0.*"
                      event="MOUSE_MPRC" id="_1oZ6" modifiers="4"
                      popup="true"/>
      <SelectionEventStep client="$(client)"
                          component="menu-com.windriver.ide.launch.ui.rse.WRDebugSubMenuAction"
                          event="SELECTION" id="_1oZ7"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemAttach_to_yzhang0_main_and_Threads"
                          event="SELECTION" id="_1oZ8"/>
    </Procedure>
    <Procedure id="_1sVP" name="rseAttachPenguin">
      <ProcedureCall id="_1sVQ" procedure="rseRefreshProcess"/>
      <ProcedureCall id="_1sVR" procedure="rseSelectPenguin"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/.*Wind.*/Wind River Target.*/Linux Wind River.*/Processes/penguin.*"
                      event="MOUSE_MPRC" id="_1sVS" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/.*Wind.*/Wind River Target.*/Linux Wind River.*/Processes/penguin.*"
                      event="MOUSE_MPRC" id="_1sVT" modifiers="4"
                      popup="true"/>
      <SelectionEventStep client="$(client)"
                          component="menu-com.windriver.ide.launch.ui.rse.WRDebugSubMenuAction"
                          event="SELECTION" id="_1sVU"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemAttach_to_penguin_and_Threads"
                          event="SELECTION" id="_1sVW"/>
    </Procedure>
    <Procedure id="_1viB" name="rseAttachRtpAllTask">
      <variable name="dbgName">$(dbgName)</variable>
      <TryStep id="_1viH" name="attachRtpAndTasks">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems%/$(conName).*/Wind River Target Debugger.*/VxWorks.*/Real Time Processes"
                        event="MOUSE_MPRC" id="_1viC" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems%/$(conName).*/Wind River Target Debugger.*/VxWorks.*/Real Time Processes/$(dbgName).*"
                        event="MOUSE_MPRC" id="_1viD" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems%/$(conName).*/Wind River Target Debugger.*/VxWorks.*/Real Time Processes/$(dbgName).*"
                        event="MOUSE_MPRC" id="_1viE" modifiers="4"
                        popup="true" postdelay="1000"/>
        <SelectionEventStep client="$(client)"
                            component="menu-com.windriver.ide.launch.ui.rse.WRAttachAction"
                            event="SELECTION" id="_1viF" postdelay="2000"/>
        <CatchSequence exception="TestException" id="_1viI" maxerror="0">
          <ReturnStep id="_1viZ" retval="False"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1viJ" name="wait in debug view">
        <ComponentWaiter client="$(client)"
                         component="Debug.tree%/.*Attach Target Context.*"
                         id="_1viP" timeout="1000"/>
        <ProcedureCall id="_1viU" postdelay="1000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree%/.*Attach Target Context.*</variable>
          <variable name="node"/>
          <variable name="separator">%</variable>
        </ProcedureCall>
        <ProcedureCall id="_1viV" postdelay="1000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree%/.*Attach Target Context.*/.*</variable>
          <variable name="node"/>
          <variable name="separator">%</variable>
        </ProcedureCall>
        <ProcedureCall id="_1viW" postdelay="1000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree%/.*Attach Target Context.*/.*/.*</variable>
          <variable name="node"/>
          <variable name="separator">%</variable>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1viQ"
                       maxerror="0">
          <ReturnStep id="_1viS" retval="False"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1viR" maxerror="0"/>
      </TryStep>
      <ReturnStep id="_1viT" retval="True"/>
    </Procedure>
    <Procedure id="_1nVJ" name="rseSelectInit">
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/$(conName).*/Wind River Target Debugger.*/Wind River Linux.*/Processes/init.*"
                      event="MOUSE_MPRC" id="_1nVK" modifiers="16"/>
    </Procedure>
    <Procedure id="_1nVu" name="rseKillTgt">
      <TryStep id="_1nXl" name="killTgt">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems&amp;/0" event="MOUSE_MPRC"
                        id="_1nVv" modifiers="16" postdelay="1000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems&amp;/0" event="MOUSE_MPRC"
                        id="_1nVw" modifiers="4" popup="true"
                        postdelay="1000"/>
        <SelectionEventStep client="$(client)"
                            component="menu-com.windriver.ide.target.ui.rse.actions.TSKillAction"
                            event="SELECTION" id="_1nVx" postdelay="1000"/>
        <CatchSequence exception="TestException" id="_1nXm" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1nYl" name="rseConWait" postdelay="2000">
      <WhileSequence id="_1nYm" test="1">
        <TryStep id="_1nYn">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-Remote_Systems@Remote Systems"
                              event="SELECTION" id="_1nsY"/>
          <CheckStringStep client="$(client)"
                           component="WorkbenchWindow.label" id="_1nYo"
                           local="true" regexp="true" resvarname="res">
            <text>Connected.*</text>
          </CheckStringStep>
          <IfSequence id="_1nYp" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1nYq"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1nYr" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <ReturnStep id="_1nsa" retval="conSuccess"/>
    </Procedure>
    <Procedure id="_1nv+" name="rseLConWait" postdelay="2000">
      <TryStep id="_1oh2">
        <TimeConstrainedSequence id="_1oh1" name="rseLConWait" timeerror="3"
                                 timelimit="120000">
          <WhileSequence id="_1nv-" test="1">
            <TryStep id="_1nw0">
              <CheckStringStep client="$(client)"
                               component="labelPC:0x000094B0" id="_1nw7"
                               local="true" regexp="true" resvarname="res">
                <text>PC:0x[0-9A-E]+</text>
              </CheckStringStep>
              <IfSequence id="_1nw3"
                          test="&#34;$(res)&#34; == &#34;true&#34;">
                <BreakStep id="_1nw4"/>
              </IfSequence>
              <CatchSequence exception="TestException" id="_1nw5" maxerror="0"
                             name="ignore"/>
            </TryStep>
          </WhileSequence>
        </TimeConstrainedSequence>
        <CatchSequence exception="CheckFailedException" id="_1oh3"
                       maxerror="0">
          <ProcedureCall id="_1oh4" procedure="wdmExit"/>
          <ProcedureCall id="_1ohG" procedure="qfs.run-log.logError">
            <variable name="message">wdm launch script failed </variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1ohH"
                         procedure="qfs.utils.testrun.skip.skipTestCase"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1nw6" retval="conSuccess"/>
    </Procedure>
    <Procedure id="_1s9v" name="rseWait" postdelay="2000">
      <ProcedureCall id="_1s9u" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Remote_Systems&amp;/0</variable>
        <variable name="node"/>
        <variable name="separator"/>
      </ProcedureCall>
      <ProcedureCall id="_1sA2" procedure="conFirst"/>
      <TryStep id="_1s9X" name="rse1">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(conName).*" id="_1s9W"
                         local="true" timeout="1000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1s9p"
                       maxerror="2">
          <ReturnStep id="_1sA3" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1s9h" name="rse2">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(conName).*/Wind River Target.*"
                         id="_1s9i" local="true" timeout="2000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1s9q"
                       maxerror="2">
          <ReturnStep id="_1sA4" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1s9j" name="rse3">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*"
                         id="_1s9k" local="true">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1s9r"
                       maxerror="2">
          <ReturnStep id="_1sA5" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1s9l" name="process">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*/Processes"
                         id="_1s9m" local="true" timeout="60000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1s9s"
                       maxerror="2">
          <ReturnStep id="_1sA6" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sA9" name="expandProcess">
        <ProcedureCall id="_1s9t" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Systems&amp;/0/0/0/0 Remote_Systems%/$(conName).*/Wind River Target.*/Linux Wind River.*/Processes</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1sAA" maxerror="0"/>
      </TryStep>
      <TryStep id="_1s9n">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems&amp;/0/0/0/0/0" id="_1s9o"
                         local="true" timeout="30000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1sA7"
                       maxerror="2">
          <ReturnStep id="_1sA8" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1sA1" retval="true"/>
    </Procedure>
    <Procedure id="_1nXw" name="rseDelFirst">
      <TryStep id="_1o9J">
        <SelectionEventStep client="$(client)"
                            component="tabfolder-Remote_Systems@Remote Systems"
                            event="SELECTION" id="_1nb6"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems&amp;/0" event="MOUSE_MPRC"
                        id="_1nXx" modifiers="4" popup="true"/>
        <SelectionEventStep client="$(client)" component="menu-delete"
                            event="SELECTION" id="_1nXy"/>
        <ComponentWaiter client="$(client)" component="SystemDeleteDialog"
                         id="_1nXz" timeout="10000"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk3"
                        event="MOUSE_MPRC" id="_1nX+" modifiers="16"/>
        <ComponentWaiter client="$(client)"
                         component="WROptionalMessageDialog" id="_1nX-"
                         timeout="10000"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                        event="MOUSE_MPRC" id="_1nY0" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1o9K" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1tcQ" name="rseDelName">
      <variable name="vxName">$(conName)</variable>
      <WhileSequence id="_1tsF" name="not delete" test="1">
        <TryStep id="_1tcR">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-Remote_Systems@Remote Systems"
                              event="SELECTION" id="_1tcS"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Remote_Systems%/$(vxName).*"
                          event="MOUSE_MPRC" id="_1tcT" modifiers="4"
                          postdelay="1000"/>
          <CheckBooleanStep checktype="enabled" client="$(client)"
                            component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                            id="_1vqP" local="true" resvarname="disabled"
                            state="false"/>
          <IfSequence id="_1vqQ" test="not $(disabled)">
            <MouseEventStep clicks="1" client="$(client)"
                            component="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                            event="MOUSE_MPRC" id="_1vqM" modifiers="16"
                            postdelay="1000"/>
          </IfSequence>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Remote_Systems%/$(vxName).*"
                          event="MOUSE_MPRC" id="_1vqC" modifiers="4"
                          popup="true" postdelay="1000"/>
          <SelectionEventStep client="$(client)" component="menu-delete"
                              event="SELECTION" id="_1tcU" postdelay="1000"/>
          <ComponentWaiter client="$(client)" component="SystemDeleteDialog"
                           id="_1tcV" timeout="10000"/>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk3"
                          event="MOUSE_MPRC" id="_1tcW" modifiers="16"/>
          <ComponentWaiter client="$(client)"
                           component="WROptionalMessageDialog" id="_1tcX"
                           timeout="10000"/>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1tcY" modifiers="16"/>
          <CatchSequence exception="DisabledComponentException" id="_1tcZ"
                         maxerror="0" name="kill target server">
            <TryStep id="_1td1" name="killTargetServer">
              <SelectionEventStep client="$(client)"
                                  component="menu-com.windriver.ide.target.ui.rse.actions.TSKillAction"
                                  event="SELECTION" id="_1td0"
                                  postdelay="1000"/>
              <CatchSequence exception="TestException" id="_1td2"
                             maxerror="0"/>
            </TryStep>
          </CatchSequence>
          <CatchSequence exception="IndexNotFoundException" id="_1tsG"
                         maxerror="0" name="success">
            <BreakStep id="_1tsK"/>
          </CatchSequence>
          <CatchSequence exception="TestException" id="_1tc-" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1nA2" name="rseClean">
      <variable name="rseCleanFinish">False</variable>
      <ProcedureCall id="_1o66" procedure="uiClickRse"/>
      <SetGlobalStep id="_1vqe" varname="rseCleanFinish">
        <default>False</default>
      </SetGlobalStep>
      <TryStep id="_1vqZ" name="select connection in RSE">
        <ProcedureCall id="_1vqa" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Remote_Systems</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1vqb"
                       maxerror="0">
          <SetGlobalStep id="_1vqc" varname="rseCleanFinish">
            <default>True</default>
          </SetGlobalStep>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1vqd" maxerror="0"/>
      </TryStep>
      <WhileSequence id="_1vpS" test="not $(rseCleanFinish)">
        <TryStep id="_1vpN" name="select connection in RSE">
          <ProcedureCall id="_1vpO" procedure="qfs.swt.tree.selectNode">
            <variable name="id">Remote_Systems</variable>
            <variable name="node">0</variable>
            <variable name="separator">&amp;</variable>
          </ProcedureCall>
          <CatchSequence exception="IndexNotFoundException" id="_1vpP"
                         maxerror="0">
            <SetGlobalStep id="_1vpQ" varname="rseCleanFinish">
              <default>True</default>
            </SetGlobalStep>
          </CatchSequence>
          <CatchSequence exception="TestException" id="_1vpR" maxerror="0"/>
        </TryStep>
        <ProcedureCall id="_1pZ1" procedure="conDisFirst"/>
        <TryStep id="_1vpT" name="delete ">
          <MouseEventStep clicks="1" client="$(client)"
                          component="Remote_Systems&amp;/0" event="MOUSE_MPRC"
                          id="_1vpV" modifiers="4" popup="true"
                          postdelay="1000"/>
          <SelectionEventStep client="$(client)" component="menu-delete"
                              event="SELECTION" id="_1vpW"/>
          <ComponentWaiter client="$(client)" component="SystemDeleteDialog"
                           id="_1vpX" timeout="10000"/>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk3"
                          event="MOUSE_MPRC" id="_1vpY" modifiers="16"/>
          <ComponentWaiter client="$(client)"
                           component="WROptionalMessageDialog" id="_1vpZ"
                           timeout="10000"/>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1vpa" modifiers="16"/>
          <CatchSequence exception="DisabledComponentException" id="_1vpb"
                         maxerror="0" name="kill target server">
            <TryStep id="_1vpc" name="killTargetServer">
              <SelectionEventStep client="$(client)"
                                  component="menu-com.windriver.ide.target.ui.rse.actions.TSKillAction"
                                  event="SELECTION" id="_1vpd"
                                  postdelay="1000"/>
              <CatchSequence exception="TestException" id="_1vpe"
                             maxerror="0"/>
            </TryStep>
          </CatchSequence>
          <CatchSequence exception="IndexNotFoundException" id="_1vpf"
                         maxerror="0" name="success"/>
          <CatchSequence exception="TestException" id="_1vph" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1nvw" name="rseGetConName">
      <ProcedureCall id="_1nvv" procedure="qfs.swt.tree.getValueOfNode"
                     retvarname="tmpName">
        <variable name="id">Remote_Systems&amp;/0</variable>
        <variable name="node">0</variable>
        <variable name="nodeSeparator">&amp;</variable>
      </ProcedureCall>
      <ServerScriptStep id="_1nvx">
        <code>import os

name = '$(tmpName)'

index = name.find('(')
if index &gt; 0:
    conName = name[0:index]
else:
    conName = name
</code>
      </ServerScriptStep>
    </Procedure>
    <Procedure id="_1qcp" name="rseConName">
      <ProcedureCall id="_1qcq" procedure="qfs.swt.tree.getValueOfNode"
                     retvarname="tmpName">
        <variable name="id">Remote_Systems&amp;/0</variable>
        <variable name="node">0</variable>
        <variable name="nodeSeparator">&amp;</variable>
      </ProcedureCall>
      <ServerScriptStep id="_1qcr">
        <code>import os

name = '$(tmpName)'
name = name.split(' ')[0]

index = name.find('(')
if index &gt; 0:
    oldName = name[0:index]
else:
    oldName = name

oldName.rstrip(' ')
rc.setLocal('oldName',oldName)</code>
      </ServerScriptStep>
      <ReturnStep id="_1qcs" retval="$(oldName)"/>
    </Procedure>
    <Procedure id="_1qeL" name="rseConnected">
      <ProcedureCall id="_1qeP" procedure="uiClickRse"/>
      <ProcedureCall id="_1qeQ" procedure="qfs.swt.tree.selectNode">
        <variable name="id">Remote_Systems</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <ClientScriptStep client="$(client)" engine="swt" id="_1qeM">
        <code>import re

# get component
con = rc.getComponent("tool-com.windriver.ide.target.ui.rse.ConnectAction")
discon = rc.getComponent("tool-com.windriver.ide.target.ui.rse.DisconnectAction")
# 

if con.isEnabled() == False and discon.isEnabled() == True:
    rseConnected = "True"
elif con.isEnabled() == True and discon.isEnabled() == False:
    rseConnected = "False"
else:
    rseConnected = "unknown"
    
rc.setLocal('rseConnected',rseConnected)</code>
      </ClientScriptStep>
      <ReturnStep id="_1qeO" retval="$(rseConnected)"/>
    </Procedure>
    <Procedure id="_1tbt" name="rseVxWait" postdelay="2000">
      <variable name="vxName">$(vxName)</variable>
      <TryStep id="_1tcg" name="expandTask">
        <ProcedureCall id="_1tbv" postdelay="2000" procedure="conVxSelect">
          <variable name="vxName">$(vxName)</variable>
        </ProcedureCall>
        <CatchSequence exception="ComponentNotFoundException" id="_1tco"
                       maxerror="0" name="error">
          <ReturnStep id="_1tcp" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1tcq" maxerror="0"
                       name="error"/>
      </TryStep>
      <TryStep id="_1tbw" name="rse1">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*" id="_1tbx"
                         local="true" timeout="1000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1tby"
                       maxerror="2">
          <ReturnStep id="_1tbz" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1tb+" name="rse2">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*"
                         id="_1tb-" local="true" timeout="60000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1tcw" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1tc0"
                       maxerror="2">
          <ReturnStep id="_1tc1" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1uBA" name="checkFail">
        <ComponentWaiter client="$(client)"
                         component="WROptionalMessageDialog" id="_1uBB"
                         local="true" resvarname="exist" timeout="10000"/>
        <IfSequence id="_1uBC" name="fail?" test="$(exist)">
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1uBD" modifiers="16"/>
          <ReturnStep id="_1uBG" retval="false"/>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1uBE"
                       maxerror="0" name="right"/>
        <CatchSequence exception="TestException" id="_1uBF" maxerror="0"/>
      </TryStep>
      <TryStep id="_1tc2" name="rse3">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/VxWorks.*"
                         id="_1tct" local="true" timeout="120000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1tcx" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*/VxWorks.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1tc4"
                       maxerror="2">
          <ReturnStep id="_1tc5" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1tc6" name="kernelTasks">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/VxWorks.*/Kernel Tasks"
                         id="_1tcv" local="true" timeout="120000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1tcy" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*/VxWorks.*/Kernel Tasks</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1tc8"
                       maxerror="2">
          <ReturnStep id="_1tc9" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1tcA" name="RTP">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/VxWorks.*/Real.*"
                         id="_1tcz" local="true" timeout="120000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1tcB" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">RemotRemote_Systems%/$(vxName).*/Wind River Target.*/VxWorks.*/Real.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1tcC" maxerror="0"/>
      </TryStep>
      <TryStep id="_1tcD">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/VxWorks.*/Kernel Tasks/tWdb.*"
                         id="_1tc+" local="true" timeout="12000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1tcF"
                       maxerror="2">
          <ReturnStep id="_1tcG" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1tcH" retval="true"/>
    </Procedure>
    <Procedure id="_1ueU" name="rseLxWait" postdelay="2000">
      <variable name="vxName">$(vxName)</variable>
      <TryStep id="_1ueV" name="expandTask">
        <ProcedureCall id="_1ueW" postdelay="2000" procedure="conVxSelect">
          <variable name="vxName">$(vxName)</variable>
        </ProcedureCall>
        <CatchSequence exception="ComponentNotFoundException" id="_1ueX"
                       maxerror="0" name="error">
          <ReturnStep id="_1ueY" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1ueZ" maxerror="0"
                       name="error"/>
      </TryStep>
      <TryStep id="_1uea" name="rse1">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*" id="_1ueb"
                         local="true" timeout="1000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1uec"
                       maxerror="2">
          <ReturnStep id="_1ued" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1uee" name="rse2">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*"
                         id="_1uef" local="true" timeout="60000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1ueg" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1ueh"
                       maxerror="2">
          <ReturnStep id="_1uei" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1uej" name="checkFail">
        <ComponentWaiter client="$(client)"
                         component="WROptionalMessageDialog" id="_1uek"
                         local="true" resvarname="exist" timeout="10000"/>
        <IfSequence id="_1uel" name="fail?" test="$(exist)">
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1uem" modifiers="16"/>
          <ReturnStep id="_1uen" retval="false"/>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1ueo"
                       maxerror="0" name="right"/>
        <CatchSequence exception="TestException" id="_1uep" maxerror="0"/>
      </TryStep>
      <TryStep id="_1ueq" name="rse3">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/Linux Wind River.*"
                         id="_1uer" local="true" timeout="120000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1ues" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*/Linux.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1uet"
                       maxerror="2">
          <ReturnStep id="_1ueu" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1uev" name="processes">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/Linux.*/Processes"
                         id="_1uew" local="true" timeout="120000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <ProcedureCall id="_1uex" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Remote_Systems%/$(vxName).*/Wind River Target.*/Linux.*/Processes</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1uey"
                       maxerror="2">
          <ReturnStep id="_1uez" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1uf2">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(vxName).*/Wind River Target.*/Linux.*/Processes/init.*"
                         id="_1uf3" local="true" timeout="12000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1uf4"
                       maxerror="2">
          <ReturnStep id="_1uf5" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1uf6" retval="true"/>
    </Procedure>
    <Procedure id="_1u9P" name="rseCollopse">
      <TryStep id="_1u9Q" name="collopseRse">
        <ComponentWaiter client="$(client)" component="Remote_Systems@/Local"
                         id="_1u9R" local="true" resvarname="exist"
                         timeout="2000"/>
        <IfSequence id="_1u9S" test="$(exist)">
          <ProcedureCall id="_1u9T" procedure="qfs.swt.tree.collapseNode">
            <variable name="id">Remote_Systems@/Local</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1u9U"
                       maxerror="0" name="ignore"/>
        <CatchSequence exception="TestException" id="_1u9V" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vn8" name="rseIssWait">
      <variable name="conName"/>
      <TryStep id="_1vnB" name="connect from rse">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Remote_Systems%/$(issConName).*"
                        event="MOUSE_MPRC" id="_1vn9" modifiers="16"
                        postdelay="1000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.target.ui.rse.ConnectAction"
                        event="MOUSE_MPRC" id="_1vnA" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1vnC" maxerror="0"/>
      </TryStep>
      <TryStep id="_1vnD" name="wait in rse">
        <ComponentWaiter client="$(client)"
                         component="Remote_Systems%/$(issConName).*/.*Stopped.*"
                         id="_1vnE" local="true" timeout="12000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1vnF"
                       maxerror="2">
          <ReturnStep id="_1vnG" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1vnH" name="wait in debug view">
        <ComponentWaiter client="$(client)"
                         component="Debug.tree%/.*$(issConName).*/.*/.*Stopped.*"
                         id="_1vnI" local="true" timeout="12000">
          <comment>wait for connection to complete</comment>
        </ComponentWaiter>
        <CatchSequence exception="IndexNotFoundException" id="_1vnJ"
                       maxerror="2">
          <ReturnStep id="_1vnK" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1vqL" retval="True"/>
    </Procedure>
    <Procedure id="_1nBy" name="winAbout">
      <SelectionEventStep client="$(client)" component="menu-help"
                          event="SELECTION" id="_1nBz"/>
      <SelectionEventStep client="$(client)" component="menu-help-about"
                          event="SELECTION" id="_1nB+"/>
      <ComponentWaiter client="$(client)" component="WRAboutDialog" id="_1nB-"
                       timeout="30000"/>
      <CheckStringStep client="$(client)" component="menu-help-about"
                       id="_1nC0" local="true" regexp="true">
        <text>.*[Dd]ebug.*[Mm]ode.*</text>
      </CheckStringStep>
      <CheckStringStep client="$(client)" component="WRAboutDialog.text&amp;5"
                       id="_1nC1" local="true" regexp="true">
        <text>License Package:.*[A-Z]+</text>
        <comment>check licence Package</comment>
      </CheckStringStep>
      <CheckStringStep client="$(client)" component="WRAboutDialog.text&amp;2"
                       id="_1nCJ" regexp="true">
        <text>Version:.*[0-9]+</text>
      </CheckStringStep>
      <CheckStringStep client="$(client)" component="WRAboutDialog.text&amp;9"
                       id="_1nCK" regexp="true">
        <text>Version:.*[0-9]+</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk39"
                      event="MOUSE_MPRC" id="_1nC2" modifiers="16"/>
    </Procedure>
    <Procedure id="_1vsG" name="fileCloseGetStarted">
      <TryStep id="_1vsQ" name="textPaneClose">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-Editor@Getting Started"
                         id="_1vsH" local="true" resvarname="res"
                         timeout="5000"/>
        <CatchSequence exception="TestException" id="_1vsR" maxerror="0"/>
      </TryStep>
      <IfSequence id="_1vsM" test="$(res)">
        <SelectionEventStep client="$(client)"
                            component="tabfolder-Editor@Getting Started"
                            detail="close" event="SELECTION" id="_1vsI"/>
        <TryStep id="_1vsN" name="clsoeOptionDialog">
          <ComponentWaiter client="$(client)"
                           component="WROptionalMessageDialog" id="_1vsJ"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonDo_not_show_again"
                          event="MOUSE_MPRC" id="_1vsK" modifiers="16"/>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1vsL" modifiers="16"/>
          <CatchSequence exception="TestException" id="_1vsO" maxerror="0"/>
        </TryStep>
      </IfSequence>
    </Procedure>
    <Procedure id="_1n8o" name="fileCloseAllOpt">
      <TryStep id="_1vs8" name="closeAll">
        <SelectionEventStep client="$(client)" component="menu-help"
                            event="SELECTION" id="_1n9X"/>
        <SelectionEventStep client="$(client)"
                            component="menu-help-com.windriver.ide.devcenter.internal.WROpenDevCenterCommand"
                            event="SELECTION" id="_1n9Y"/>
        <SelectionEventStep client="$(client)" component="menu-file"
                            event="SELECTION" id="_1n9y"/>
        <SelectionEventStep client="$(client)" component="menu-file-closeAll"
                            event="SELECTION" id="_1n9r"/>
        <CatchSequence exception="TestException" id="_1vs9" maxerror="0"/>
      </TryStep>
      <TryStep id="_4nc" name="Check for modal dialog">
        <ComponentWaiter client="$(client)"
                         component="WROptionalMessageDialog" id="_4p3"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonDo_not_show_again" event="MOUSE_MPRC"
                        id="_1nA0" modifiers="16" predelay="1000"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                        event="MOUSE_MPRC" id="_1nA1" modifiers="16"
                        postdelay="1000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_4p5"
                       maxerror="0" name="Finished"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1n9b" name="fileCloseAll">
      <TryStep id="_1n9f" name="closeAllFile">
        <SelectionEventStep client="$(client)" component="menu-file"
                            event="SELECTION" id="_1n9+" postdelay="1000"/>
        <SelectionEventStep client="$(client)" component="menu-file-closeAll"
                            event="SELECTION" id="_1n9v" postdelay="1000"/>
        <CatchSequence exception="DisabledComponentException" id="_1n9h"
                       maxerror="0">
          <ReturnStep id="_1n9i"/>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1n8l" name="winFullScreen">
      <ComponentEventStep client="$(client)" component="WorkbenchWindow"
                          event="COMPONENT_RESIZED" id="_1n8n"
                          param1="${qftest:screen.width}"
                          param2="${qftest:screen.height}"/>
    </Procedure>
    <Procedure id="_1vQF" name="win1600x1000">
      <ComponentEventStep client="$(client)" component="WorkbenchWindow"
                          event="COMPONENT_RESIZED" id="_1vQG" param1="1600"
                          param2="1000"/>
    </Procedure>
    <Procedure id="_1vrX" name="wbStartWs">
      <SetGlobalStep disabled="true" id="_1vrY" local="true" varname="client">
        <default>wdm_start_with_ws</default>
      </SetGlobalStep>
      <TryStep id="_1vu-" name="instrumentSUT">
        <ProcedureCall id="_1vrZ"
                       procedure="qfs.qft#qfs.swt.instrument.setup">
          <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1vv0" maxerror="0"/>
      </TryStep>
      <SUTClientStarter client="$(client)" executable="$(wb_exec)" id="_1vra">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-vmargs</parameter>
        <parameter>-Xmx512m</parameter>
        <parameter>-DDFE.Debug=true</parameter>
      </SUTClientStarter>
      <WhileSequence id="_1vrb" name="waitWbSut" test="1">
        <TryStep id="_1vrc" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1vrd"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="300000"/>
          <IfSequence id="_1vre" test="$(resWdmStartSuccess)">
            <BreakStep id="_1vrf"/>
          </IfSequence>
          <CatchSequence exception="ClientNotConnectedException" id="_1vrg"
                         maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
            <ProcedureCall id="_1vrh" procedure="qfs.run-log.logError">
              <variable name="message">qftest failed to start SUT</variable>
              <variable name="withScreenshots">true</variable>
            </ProcedureCall>
            <ProcedureCall id="_1vri"
                           procedure="qfs.utils.testrun.skip.skipTestCase"/>
            <BreakStep id="_1vrj"/>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1vrk" name="waitWbWindow" test="1">
        <TryStep id="_1vrl" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1vrm" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1vrn" test="$(resWdmStartSuccess)">
            <BreakStep id="_1vro"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1vrp" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <TryStep id="_1vrq" name="licenseDialog">
        <ComponentWaiter client="$(client)" component="LicenseExpireDialog"
                         id="_1vrr" local="true"
                         resvarname="LicenseExpireDialogPrompt"
                         timeout="5000"/>
        <IfSequence id="_1vrs" test="$(LicenseExpireDialogPrompt)">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonDo_not_show_this_dialog_again"
                          event="MOUSE_MPRC" id="_1vrt" modifiers="16"
                          postdelay="1000"/>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOK"
                          event="MOUSE_MPRC" id="_1vru" modifiers="16"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1vrv" maxerror="0"/>
      </TryStep>
      <ProcedureCall id="_1vrw" postdelay="5000" procedure="wdmStartFinish"/>
    </Procedure>
    <Procedure id="_1vrx" name="wbExit">
      <TryStep id="_1vry" name="gentlyExit">
        <SelectionEventStep client="$(client)" component="menu-file"
                            event="SELECTION" id="_1vrz" postdelay="1000"/>
        <SelectionEventStep client="$(client)" component="menu-file-quit"
                            event="SELECTION" id="_1vr+" postdelay="1000"/>
        <CatchSequence exception="TestException" id="_1vr-" maxerror="0"/>
      </TryStep>
      <TryStep id="_1vs0" name="forceExit" predelay="5000">
        <ProcessWaiter client="$(client)" id="_1vs1" timeout="30000"/>
        <CatchSequence exception="ClientNotTerminatedException" id="_1vs2"
                       maxerror="0">
          <ClientStopper client="$(client)" id="_1vs3" postdelay="5000"/>
          <ShellClientStarter client="1"
                              command="pkill -9 -u `whoami` wrwb-x86-linux2.gtk"
                              id="_1vs4"/>
          <ShellClientStarter client="2"
                              command="pkill -9 -u `whoami` dfwserver.ex"
                              id="_1vs5"/>
          <ShellClientStarter client="3"
                              command="pkill -9 -u `whoami` tgtsvr.ex"
                              id="_1vs6"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1vs7" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_3b" name="wdmStartWs">
      <TryStep id="_1vuz" name="instrumentSUT">
        <ProcedureCall id="_3d" procedure="qfs.qft#qfs.swt.instrument.setup">
          <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1vu+" maxerror="0"/>
      </TryStep>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)" id="_3e">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-vmargs</parameter>
        <parameter>-Xmx512m</parameter>
        <parameter>-DDFE.Debug=true</parameter>
      </SUTClientStarter>
      <WhileSequence id="_1npc" name="waitWdmSut" test="1">
        <TryStep id="_1nU9" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1npf"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="300000"/>
          <IfSequence id="_1npd" test="$(resWdmStartSuccess)">
            <BreakStep id="_1npe"/>
          </IfSequence>
          <CatchSequence exception="ClientNotConnectedException" id="_1nUA"
                         maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
            <ProcedureCall id="_1oh7" procedure="qfs.run-log.logError">
              <variable name="message">qftest failed to start SUT</variable>
              <variable name="withScreenshots">true</variable>
            </ProcedureCall>
            <ProcedureCall id="_1oh6"
                           procedure="qfs.utils.testrun.skip.skipTestCase"/>
            <BreakStep id="_1oh5"/>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1npg" name="waitWdmWindow" test="1">
        <TryStep id="_1nph" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1npj" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1npk" test="$(resWdmStartSuccess)">
            <BreakStep id="_1npl"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1npm" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <TryStep id="_1tiI" name="licenseDialog">
        <ComponentWaiter client="$(client)" component="LicenseExpireDialog"
                         id="_1tiH" local="true"
                         resvarname="LicenseExpireDialogPrompt"
                         timeout="5000"/>
        <IfSequence id="_1tiK" test="$(LicenseExpireDialogPrompt)">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonDo_not_show_this_dialog_again"
                          event="MOUSE_MPRC" id="_1tiL" modifiers="16"
                          postdelay="1000"/>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOK"
                          event="MOUSE_MPRC" id="_1tiP" modifiers="16"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1tiJ" maxerror="0"/>
      </TryStep>
      <ProcedureCall id="_1o9A" postdelay="5000" procedure="wdmStartFinish"/>
    </Procedure>
    <Procedure id="_1pWZ" name="wdmStart">
      <SetGlobalStep id="_1pWa" varname="client">
        <default>wdm_start</default>
      </SetGlobalStep>
      <ProcedureCall id="_1pWb" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1pWc"/>
      <WhileSequence id="_1pWd" name="waitWdmSut" test="1">
        <TryStep id="_1pWe" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1pWf"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="150000"/>
          <IfSequence id="_1pWg" test="$(resWdmStartSuccess)">
            <BreakStep id="_1pWh"/>
          </IfSequence>
          <CatchSequence exception="ClientNotConnectedException" id="_1pWi"
                         maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
            <ProcedureCall id="_1pWj" procedure="qfs.run-log.logError">
              <variable name="message">qftest failed to start SUT</variable>
              <variable name="withScreenshots">true</variable>
            </ProcedureCall>
            <ProcedureCall id="_1pWk"
                           procedure="qfs.utils.testrun.skip.skipTestCase"/>
            <BreakStep id="_1pWl"/>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1pWm" name="waitWdmWindow" test="1">
        <TryStep id="_1pWn" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1pWo" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1pWp" test="$(resWdmStartSuccess)">
            <BreakStep id="_1pWq"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1pWr" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <ProcedureCall id="_1pWs" procedure="wdmStartFinish"/>
    </Procedure>
    <Procedure id="_1nrh" name="wdmLStart" postdelay="4000">
      <TimeConstrainedSequence id="_1oh0" name="wdmLStart" timelimit="300000">
        <ProcedureCall id="_1nrj"
                       procedure="qfs.qft#qfs.swt.instrument.setup">
          <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
        </ProcedureCall>
        <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                          id="_1nrk">
          <parameter>-launch</parameter>
          <parameter>-t</parameter>
          <parameter>$(conName)</parameter>
          <parameter>-ot</parameter>
          <parameter>Process</parameter>
          <parameter>-f</parameter>
          <parameter>$(hostDebuggee)</parameter>
          <parameter>-e</parameter>
          <parameter>main</parameter>
          <parameter>-tp</parameter>
          <parameter>$(tgtDebuggee)</parameter>
        </SUTClientStarter>
        <WhileSequence id="_1nrl" name="waitWdmSut" test="1">
          <TryStep id="_1nrm" name="waitSut">
            <ClientWaiter client="$(client)" engine="swt" id="_1nrn"
                          local="true" resvarname="resWdmStartSuccess"
                          timeout="150000"/>
            <IfSequence id="_1nro" test="$(resWdmStartSuccess)">
              <BreakStep id="_1nrp"/>
            </IfSequence>
            <CatchSequence exception="ClientNotConnectedException" id="_1nrq"
                           maxerror="0">
              <catchmessage>can NOT start WDM</catchmessage>
              <ProcedureCall id="_1oh8" procedure="qfs.run-log.logError">
                <variable name="message">qftest failed to start SUT</variable>
                <variable name="withScreenshots">true</variable>
              </ProcedureCall>
              <ProcedureCall id="_1oh9"
                             procedure="qfs.utils.testrun.skip.skipTestCase"/>
              <BreakStep id="_1ohE"/>
            </CatchSequence>
          </TryStep>
        </WhileSequence>
        <WhileSequence id="_1nrr" name="waitWdmWindow" postdelay="2000"
                       test="1">
          <TryStep id="_1nrs" name="waitWdmWindow">
            <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                             id="_1nrt" local="true" postdelay="2000"
                             resvarname="resWdmStartSuccess"
                             timeout="150000"/>
            <IfSequence id="_1nru" test="$(resWdmStartSuccess)">
              <BreakStep id="_1nrv"/>
            </IfSequence>
            <CatchSequence exception="TestException" id="_1nrw" maxerror="0">
              <catchmessage>can NOT start WDM</catchmessage>
            </CatchSequence>
          </TryStep>
        </WhileSequence>
        <SetGlobalStep id="_1nvz" local="true" varname="conSuccess">
          <default>false</default>
        </SetGlobalStep>
        <ProcedureCall id="_1nw8" procedure="rseLConWait"
                       retvarname="conSuccess"/>
        <ProcedureCall id="_1ns1" local="true" procedure="dbgStopAtMain"
                       retvarname="stopAtMain"/>
        <IfSequence disabled="true" id="_1nsb" postdelay="2000"
                    test="$(conSuccess)">
          <WhileSequence id="_1nrx" name="waitWdmStopAtMain" test="1">
            <IfSequence id="_1ns2" test="$(stopAtMain)">
              <BreakStep id="_1ns3"/>
            </IfSequence>
          </WhileSequence>
        </IfSequence>
      </TimeConstrainedSequence>
    </Procedure>
    <Procedure id="_1o01" name="wdmLSHStart" postdelay="4000">
      <ProcedureCall id="_1o02" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1o03">
        <parameter>-launch</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-f</parameter>
        <parameter>$(hostDebuggee)</parameter>
        <parameter>-e</parameter>
        <parameter>main</parameter>
        <parameter>-tp</parameter>
        <parameter>$(tgtDebuggee)</parameter>
        <parameter>-sh</parameter>
        <parameter>true</parameter>
      </SUTClientStarter>
      <WhileSequence id="_1o04" name="waitWdmSut" test="1">
        <TryStep id="_1o05" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1o06"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="150000"/>
          <IfSequence id="_1o07" test="$(resWdmStartSuccess)">
            <BreakStep id="_1o08"/>
          </IfSequence>
          <CatchSequence exception="ClientNotConnectedException" id="_1o09"
                         maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
            <ProcedureCall id="_1ohA" procedure="qfs.run-log.logError">
              <variable name="message">qftest failed to start SUT</variable>
              <variable name="withScreenshots">true</variable>
            </ProcedureCall>
            <ProcedureCall id="_1ohB"
                           procedure="qfs.utils.testrun.skip.skipTestCase"/>
            <BreakStep id="_1ohF"/>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1o0A" name="waitWdmWindow" postdelay="2000"
                     test="1">
        <TryStep id="_1o0B" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1o0C" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1o0D" test="$(resWdmStartSuccess)">
            <BreakStep id="_1o0E"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1o0F" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <SetGlobalStep id="_1o0G" local="true" varname="conSuccess">
        <default>false</default>
      </SetGlobalStep>
      <ProcedureCall id="_1o0H" procedure="rseLConWait"
                     retvarname="conSuccess"/>
      <IfSequence id="_1o0I" postdelay="2000" test="$(conSuccess)">
        <WhileSequence id="_1o0J" name="waitWdmStopAtMain" test="1">
          <ProcedureCall id="_1o0K" local="true" procedure="dbgStopAtMain"
                         retvarname="stopAtMain"/>
          <IfSequence id="_1o0L" test="$(stopAtMain)">
            <BreakStep id="_1o0M"/>
          </IfSequence>
        </WhileSequence>
      </IfSequence>
      <WhileSequence id="_1o0N" test="1">
        <TryStep id="_1o0O" name="dbgCmdShell">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-Console@Debug Command Shell"
                              event="SELECTION" id="_1oRe"/>
          <ProcedureCall id="_1oRH" local="true" procedure="dbgCmdFinish"
                         retvarname="dbgFinish"/>
          <IfSequence id="_1o1j" test="$(dbgFinish)">
            <BreakStep id="_1o0R"/>
          </IfSequence>
          <CatchSequence exception="ClientNotConnectedException" id="_1o0S"
                         maxerror="0" name="ignore">
            <BreakStep id="_1ohD"/>
          </CatchSequence>
          <CatchSequence exception="TestException" id="_1ohC" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1oaK" name="wdmAStart" postdelay="4000">
      <ProcedureCall id="_1oaL" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1oaM">
        <parameter>-attach</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-o</parameter>
        <parameter>yzhang0 main</parameter>
      </SUTClientStarter>
      <WhileSequence id="_1oaN" name="waitWdmSut" test="1">
        <TryStep id="_1oaO" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1oaP"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="150000"/>
          <IfSequence id="_1oaQ" test="$(resWdmStartSuccess)">
            <BreakStep id="_1oaR"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1oaS" maxerror="0"
                         name="ignore">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1oaT" name="waitWdmWindow" postdelay="2000"
                     test="1">
        <TryStep id="_1oaU" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1oaV" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1oaW" test="$(resWdmStartSuccess)">
            <BreakStep id="_1oaX"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1oaY" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1oac" name="waitWdmAttachThreads" test="1">
        <ProcedureCall id="_1oaq" local="true"
                       procedure="dbgAttachMainAndThreads"
                       retvarname="attachSuccess"/>
        <ProcedureCall id="_1oi1" procedure="dbgAttachMain"/>
        <IfSequence id="_1oae" test="$(attachSuccess)">
          <BreakStep id="_1oaf"/>
        </IfSequence>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1ohU" name="wdmASHStart" postdelay="4000">
      <ProcedureCall id="_1ohV" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1ohW">
        <parameter>-attach</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-o</parameter>
        <parameter>yzhang0 main</parameter>
        <parameter>-sh</parameter>
        <parameter>true</parameter>
      </SUTClientStarter>
      <WhileSequence id="_1ohX" name="waitWdmSut" test="1">
        <TryStep id="_1ohY" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1ohZ"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="150000"/>
          <IfSequence id="_1oha" test="$(resWdmStartSuccess)">
            <BreakStep id="_1ohb"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1ohc" maxerror="0"
                         name="ignore">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1ohd" name="waitWdmWindow" postdelay="2000"
                     test="1">
        <TryStep id="_1ohe" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1ohf" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1ohg" test="$(resWdmStartSuccess)">
            <BreakStep id="_1ohh"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1ohi" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1ohj" name="waitWdmAttachThreads" test="1">
        <ProcedureCall id="_1ohk" local="true"
                       procedure="dbgAttachMainAndThreads"
                       retvarname="attachSuccess"/>
        <ProcedureCall id="_1oyp" procedure="dbgAttachMain"/>
        <IfSequence id="_1ohm" test="$(attachSuccess)">
          <BreakStep id="_1ohn"/>
        </IfSequence>
      </WhileSequence>
    </Procedure>
    <Procedure id="_3g" name="wdmExit">
      <TryStep id="_1obC" name="gentlyExit">
        <SelectionEventStep client="$(client)" component="menu-file"
                            event="SELECTION" id="_3h" postdelay="1000"/>
        <SelectionEventStep client="$(client)" component="menu-file-quit"
                            event="SELECTION" id="_3i" postdelay="1000"/>
        <CatchSequence exception="TestException" id="_1obD" maxerror="0"/>
      </TryStep>
      <TryStep id="_1pa-" name="forceExit" predelay="5000">
        <ProcessWaiter client="$(client)" id="_1n4o" timeout="30000"/>
        <CatchSequence exception="ClientNotTerminatedException" id="_1pbL"
                       maxerror="0">
          <ClientStopper client="$(client)" id="_1n4r" postdelay="5000"/>
          <ShellClientStarter client="1"
                              command="pkill -9 -u `whoami` wrwb-x86-linux2.gtk"
                              id="_1oa+"/>
          <ShellClientStarter client="2"
                              command="pkill -9 -u `whoami` dfwserver.ex"
                              id="_1ois"/>
          <ShellClientStarter client="3"
                              command="pkill -9 -u `whoami` tgtsvr.ex"
                              id="_1oit"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1pbM" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r+3" name="lxWsLStart" postdelay="4000">
      <variable name="conName"/>
      <variable name="hostDebuggee"/>
      <variable name="tgtDebugee"/>
      <ProcedureCall id="_1r+5" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <TryStep id="_1sk4" name="startWdm">
        <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                          id="_1r+6">
          <parameter>-clean</parameter>
          <parameter>-configuration</parameter>
          <parameter>$(cfgFile)</parameter>
          <parameter>-data</parameter>
          <parameter>$(wdmWorkspace)</parameter>
          <parameter>-launch</parameter>
          <parameter>-t</parameter>
          <parameter>$(conName)</parameter>
          <parameter>-ot</parameter>
          <parameter>Process</parameter>
          <parameter>-f</parameter>
          <parameter>$(hostDebuggee)</parameter>
          <parameter>-e</parameter>
          <parameter>main</parameter>
          <parameter>-tp</parameter>
          <parameter>$(tgtDebuggee)</parameter>
        </SUTClientStarter>
      </TryStep>
      <TryStep id="_1s0g" name="waitSut">
        <ClientWaiter client="$(client)" engine="swt" id="_1s0h" local="true"
                      timeout="150000"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1s0k"
                       maxerror="2">
          <catchmessage>can NOT start WDM</catchmessage>
          <ProcedureCall id="_1s0l" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1s0m"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sOL" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1s0o" maxerror="2">
          <ProcedureCall id="_1s0p" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1s0q"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sOM" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sAk" name="waitWdmWindow">
        <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                         id="_1sAl" local="true"
                         resvarname="resWdmStartSuccess" timeout="150000"/>
        <IfSequence id="_1sAm" test="not $(resWdmStartSuccess)">
          <ProcedureCall id="_1sAz" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sA+"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sAr" retval="false"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1sAo" maxerror="0">
          <catchmessage>can NOT start WDM</catchmessage>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sAu" name="waitForPc">
        <ComponentWaiter client="$(client)" component="labelPC:0x000094B0"
                         id="_1sA-" timeout="90000"/>
        <CheckStringStep client="$(client)" component="labelPC:0x000094B0"
                         id="_1sAv" local="true" regexp="true"
                         resvarname="res">
          <text>PC:0x[0-9A-E]+</text>
        </CheckStringStep>
        <CatchSequence exception="ComponentNotFoundException" id="_1sB0"
                       maxerror="2">
          <ProcedureCall id="_1sB4" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sB5" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sAy" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <TryStep id="_1sB1" name="debuggeeStop">
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1sB2" timeout="90000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1sB3"
                       maxerror="2">
          <ProcedureCall id="_1sB6" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sB7" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1sXS"
                       maxerror="2">
          <ProcedureCall id="_1sXT" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sXU" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sB8" name="expandStackframe">
        <ProcedureCall id="_1sBD" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1sBA" maxerror="2">
          <ProcedureCall id="_1sBB" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sBC" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sBH" name="stopAtMain">
        <ComponentWaiter client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1sBI"
                         timeout="90000"/>
        <CheckStringStep client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1sBM"
                         local="true" regexp="true" resvarname="stopAtMain">
          <text>main().*</text>
        </CheckStringStep>
        <CatchSequence exception="ComponentNotFoundException" id="_1sBJ"
                       maxerror="2">
          <ProcedureCall id="_1sBK" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sBL" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1sQ5" retval="true"/>
    </Procedure>
    <Procedure id="_1sQw" name="lxWsLShStart" postdelay="4000">
      <variable name="conName"/>
      <variable name="hostDebuggee"/>
      <variable name="tgtDebugee"/>
      <ProcedureCall id="_1sQx" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1sQy">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-launch</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-f</parameter>
        <parameter>$(hostDebuggee)</parameter>
        <parameter>-e</parameter>
        <parameter>main</parameter>
        <parameter>-tp</parameter>
        <parameter>$(tgtDebuggee)</parameter>
        <parameter>-sh</parameter>
        <parameter>true</parameter>
      </SUTClientStarter>
      <TryStep id="_1sQz" name="waitSut">
        <ClientWaiter client="$(client)" engine="swt" id="_1sQ+" local="true"
                      timeout="150000"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1sQ-"
                       maxerror="2">
          <catchmessage>can NOT start WDM</catchmessage>
          <ProcedureCall id="_1sR0" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sR1"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sR2" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sR3" maxerror="2">
          <ProcedureCall id="_1sR4" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sR5"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sR6" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sR7" name="waitWdmWindow">
        <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                         id="_1sR8" local="true"
                         resvarname="resWdmStartSuccess" timeout="150000"/>
        <IfSequence id="_1sR9" test="not $(resWdmStartSuccess)">
          <ProcedureCall id="_1sRA" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sRB"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sRC" retval="false"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1sRD" maxerror="0">
          <catchmessage>can NOT start WDM</catchmessage>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sRE" name="waitForPc">
        <ComponentWaiter client="$(client)" component="labelPC:0x000094B0"
                         id="_1sRF" timeout="90000"/>
        <CheckStringStep client="$(client)" component="labelPC:0x000094B0"
                         id="_1sRG" local="true" regexp="true"
                         resvarname="res">
          <text>PC:0x[0-9A-E]+</text>
        </CheckStringStep>
        <CatchSequence exception="ComponentNotFoundException" id="_1sRH"
                       maxerror="2">
          <ProcedureCall id="_1sRI" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sRJ" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sRK" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <TryStep id="_1sRL" name="debuggeeStop">
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1sRM" timeout="90000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1sRN"
                       maxerror="2">
          <ProcedureCall id="_1sRO" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sRP" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1sXV"
                       maxerror="2">
          <ProcedureCall id="_1sXW" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sXX" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sRQ" name="expandStackframe">
        <ProcedureCall id="_1sRR" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1sRS" maxerror="2">
          <ProcedureCall id="_1sRT" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sRU" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sRV" name="stopAtMain">
        <ComponentWaiter client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1sRW"
                         timeout="90000"/>
        <CheckStringStep client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1sRX"
                         local="true" regexp="true" resvarname="stopAtMain">
          <text>main().*</text>
        </CheckStringStep>
        <CatchSequence exception="ComponentNotFoundException" id="_1sRY"
                       maxerror="2">
          <ProcedureCall id="_1sRZ" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sRa" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sRc" name="cmdShellSucess">
        <WhileSequence id="_1sRi" name="waitCmdShell" test="1">
          <TryStep id="_1sRj" name="dbgCmdShell">
            <ProcedureCall id="_1sSD" procedure="uiClickDbgCmdShell"/>
            <ProcedureCall id="_1sRk" local="true" procedure="dbgCmdFinish"
                           retvarname="res"/>
            <IfSequence id="_1sRl" test="$(res)">
              <BreakStep id="_1sRm"/>
            </IfSequence>
            <CatchSequence exception="TestException" id="_1sRn" maxerror="0"
                           name="ignore"/>
          </TryStep>
        </WhileSequence>
        <ProcedureCall id="_1sRo" procedure="dbgCmdErrorCheck"/>
      </TryStep>
      <ReturnStep id="_1sRb" retval="true"/>
    </Procedure>
    <Procedure id="_1sSb" name="lxWsAStart" postdelay="4000">
      <variable name="conName"/>
      <variable name="object"/>
      <ProcedureCall id="_1sSc" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1sSd">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-attach</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-o</parameter>
        <parameter>$(object)</parameter>
      </SUTClientStarter>
      <TryStep id="_1sSe" name="waitSut">
        <ClientWaiter client="$(client)" engine="swt" id="_1sSf" local="true"
                      timeout="150000"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1sSg"
                       maxerror="2">
          <catchmessage>can NOT start WDM</catchmessage>
          <ProcedureCall id="_1sSh" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sSi"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sSj" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sSk" maxerror="2">
          <ProcedureCall id="_1sSl" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sSm"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sSn" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sSo" name="waitWdmWindow">
        <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                         id="_1sSp" local="true"
                         resvarname="resWdmStartSuccess" timeout="150000"/>
        <IfSequence id="_1sSq" test="not $(resWdmStartSuccess)">
          <ProcedureCall id="_1sSr" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sSs"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sSt" retval="false"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1sSu" maxerror="0">
          <catchmessage>can NOT start WDM</catchmessage>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sUM" name="ifErrorDialogPrompt">
        <ComponentWaiter client="$(client)"
                         component="WROptionalMessageDialog" id="_1sUN"
                         local="true" resvarname="exist" timeout="90000"/>
        <IfSequence id="_1sYI" test="$(exist)">
          <ProcedureCall id="_1sYJ" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to attach debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1sYK" modifiers="16"/>
          <ReturnStep id="_1sYL" retval="false"/>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1sUU"
                       maxerror="2" name="ignore"/>
      </TryStep>
      <TryStep id="_1sVe" name="Check for modal dialog">
        <ComponentWaiter client="$(client)" component="genericSWTDialog"
                         id="_1sVf" timeout="30000"/>
        <CatchSequence exception="ComponentFoundException" id="_1sVh"
                       maxerror="2">
          <SelectionEventStep client="$(client)" component="genericSWTDialog"
                              detail="CANCEL" event="SELECTION" id="_4p4">
            <comment>The SELECTION -4 is equivalent to closing the dialog through the
window manager. We can't press a generic OK button, since the results could
be disastrous. Cancelling a dialog should always have the least consequences.</comment>
          </SelectionEventStep>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1sVg"
                       maxerror="0" name="Finished"/>
      </TryStep>
      <TryStep id="_1sT0" name="debuggeeAttach">
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1sT1" timeout="90000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1sT2"
                       maxerror="2">
          <ReturnStep id="_1sT4" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1sXY"
                       maxerror="2">
          <ReturnStep id="_1sXa" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sT5" name="expandStackframe">
        <ProcedureCall id="_1sT6" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1sT7" maxerror="2">
          <ReturnStep id="_1sT9" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1sTG" retval="true"/>
    </Procedure>
    <Procedure id="_1sTt" name="lxWsAShStart" postdelay="4000">
      <variable name="conName"/>
      <variable name="object"/>
      <ProcedureCall id="_1sTu" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1sTv">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-attach</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-o</parameter>
        <parameter>$(object)</parameter>
        <parameter>-sh</parameter>
        <parameter>true</parameter>
      </SUTClientStarter>
      <TryStep id="_1sTw" name="waitSut">
        <ClientWaiter client="$(client)" engine="swt" id="_1sTx" local="true"
                      timeout="150000"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1sTy"
                       maxerror="2">
          <catchmessage>can NOT start WDM</catchmessage>
          <ProcedureCall id="_1sTz" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sT+"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sT-" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sU0" maxerror="2">
          <ProcedureCall id="_1sU1" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sU2"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sU3" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sU4" name="waitWdmWindow">
        <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                         id="_1sU5" local="true"
                         resvarname="resWdmStartSuccess" timeout="150000"/>
        <IfSequence id="_1sU6" test="not $(resWdmStartSuccess)">
          <ProcedureCall id="_1sU7" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sU8"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1sU9" retval="false"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1sUA" maxerror="0">
          <catchmessage>can NOT start WDM</catchmessage>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sWT" name="ifErrorDialogPrompt">
        <ComponentWaiter client="$(client)"
                         component="WROptionalMessageDialog" id="_1sWU"
                         local="true" resvarname="exist" timeout="90000"/>
        <IfSequence id="_1sYH" test="$(exist)">
          <ProcedureCall id="_1sWW" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to attach debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1sWX" modifiers="16"/>
          <ReturnStep id="_1sWY" retval="false"/>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1sWZ"
                       maxerror="2" name="ignore"/>
      </TryStep>
      <TryStep id="_1sWa" name="Check for modal dialog">
        <ComponentWaiter client="$(client)" component="genericSWTDialog"
                         id="_1sWb" timeout="30000"/>
        <CatchSequence exception="ComponentFoundException" id="_1sWc"
                       maxerror="2">
          <SelectionEventStep client="$(client)" component="genericSWTDialog"
                              detail="CANCEL" event="SELECTION" id="_1sWd">
            <comment>The SELECTION -4 is equivalent to closing the dialog through the
window manager. We can't press a generic OK button, since the results could
be disastrous. Cancelling a dialog should always have the least consequences.</comment>
          </SelectionEventStep>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1sWe"
                       maxerror="0" name="Finished"/>
      </TryStep>
      <TryStep id="_1sUB" name="debuggeeAttach">
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1sUC" timeout="90000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1sUD"
                       maxerror="2">
          <ReturnStep id="_1sUF" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1sXb"
                       maxerror="2">
          <ReturnStep id="_1sXd" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sUG" name="expandStackframe">
        <ProcedureCall id="_1sUH" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1sUI" maxerror="2">
          <ReturnStep id="_1sUK" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1sUL" retval="true"/>
    </Procedure>
    <Procedure id="_1skk" name="lxWsLStartSingle" postdelay="4000">
      <variable name="conName"/>
      <variable name="hostDebuggee"/>
      <variable name="tgtDebugee"/>
      <ProcedureCall id="_1skl" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="singleLaunch" executable="$(wdm_exec)"
                        id="_1skn">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-launch</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-f</parameter>
        <parameter>$(hostDebuggee)</parameter>
        <parameter>-e</parameter>
        <parameter>main</parameter>
        <parameter>-tp</parameter>
        <parameter>$(tgtDebuggee)</parameter>
      </SUTClientStarter>
      <SetGlobalStep disabled="true" id="_1spN" varname="client">
        <default>wdmWsStart</default>
      </SetGlobalStep>
      <ProcedureCall disabled="true" id="_1spv"
                     procedure="qfs.utils.printVariable">
        <variable name="variableName">client</variable>
      </ProcedureCall>
      <ProcedureCall disabled="true" id="_1spw"
                     procedure="qfs.utils.printVariable">
        <variable name="variableName">client</variable>
      </ProcedureCall>
      <TryStep id="_1spO" name="waitSut">
        <ClientWaiter client="$(client)" engine="swt" id="_1spP" local="true"
                      timeout="150000"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1spQ"
                       maxerror="2">
          <catchmessage>can NOT start WDM</catchmessage>
          <ProcedureCall id="_1spR" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1spS"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1spT" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1spU" maxerror="2">
          <ProcedureCall id="_1spV" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1spW"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1spX" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sl3" name="waitForPc">
        <ComponentWaiter client="$(client)" component="labelPC" id="_1sl4"
                         timeout="90000"/>
        <CheckStringStep client="$(client)" component="labelPC:0x000094B0"
                         id="_1sl5" local="true" regexp="true"
                         resvarname="res">
          <text>PC:0x[0-9A-E]+</text>
        </CheckStringStep>
        <CatchSequence exception="ComponentNotFoundException" id="_1sl6"
                       maxerror="2">
          <ProcedureCall id="_1sl7" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sl8" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sl9" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <TryStep id="_1slA" name="debuggeeStop">
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1slB" timeout="90000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1slC"
                       maxerror="2">
          <ProcedureCall id="_1slD" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1slE" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1slF"
                       maxerror="2">
          <ProcedureCall id="_1slG" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1slH" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1slI" name="expandStackframe">
        <ProcedureCall id="_1slJ" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1slK" maxerror="2">
          <ProcedureCall id="_1slL" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1slM" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1slN" name="stopAtMain">
        <ComponentWaiter client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1slO"
                         timeout="90000"/>
        <CheckStringStep client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1slP"
                         local="true" regexp="true" resvarname="stopAtMain">
          <text>main().*</text>
        </CheckStringStep>
        <CatchSequence exception="ComponentNotFoundException" id="_1slQ"
                       maxerror="2">
          <ProcedureCall id="_1slR" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1slS" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1slT" retval="true"/>
    </Procedure>
    <Procedure id="_1slU" name="lxWsLShStartSingle" postdelay="4000">
      <variable name="conName"/>
      <variable name="hostDebuggee"/>
      <variable name="tgtDebugee"/>
      <ProcedureCall id="_1slV" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="singleLaunchShell" executable="$(wdm_exec)"
                        id="_1slW">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-launch</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-f</parameter>
        <parameter>$(hostDebuggee)</parameter>
        <parameter>-e</parameter>
        <parameter>main</parameter>
        <parameter>-tp</parameter>
        <parameter>$(tgtDebuggee)</parameter>
        <parameter>-sh</parameter>
        <parameter>true</parameter>
      </SUTClientStarter>
      <SetGlobalStep disabled="true" id="_1soI" varname="client">
        <default>singleLaunchShell</default>
      </SetGlobalStep>
      <TryStep id="_1spD" name="waitSut">
        <ClientWaiter client="$(client)" engine="swt" id="_1spE" local="true"
                      timeout="150000"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1spF"
                       maxerror="2">
          <catchmessage>can NOT start WDM</catchmessage>
          <ProcedureCall id="_1spG" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1spH"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1spI" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1spJ" maxerror="2">
          <ProcedureCall id="_1spK" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1spL"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1spM" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1slo" name="waitForPc">
        <ComponentWaiter client="$(client)" component="labelPC" id="_1slp"
                         timeout="90000"/>
        <CheckStringStep client="$(client)" component="labelPC" id="_1slq"
                         local="true" regexp="true" resvarname="res">
          <text>PC:0x[0-9A-E]+</text>
        </CheckStringStep>
        <CatchSequence exception="ComponentNotFoundException" id="_1slr"
                       maxerror="2">
          <ProcedureCall id="_1sls" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1slt" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1slu" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <TryStep id="_1slv" name="debuggeeStop">
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1slw" timeout="90000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1slx"
                       maxerror="2">
          <ProcedureCall id="_1sly" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1slz" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1sl+"
                       maxerror="2">
          <ProcedureCall id="_1sl-" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sm0" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sm1" name="expandStackframe">
        <ProcedureCall id="_1sm2" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1sm3" maxerror="2">
          <ProcedureCall id="_1sm4" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1sm5" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1sm6" name="stopAtMain">
        <ComponentWaiter client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1sm7"
                         timeout="90000"/>
        <CheckStringStep client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1sm8"
                         local="true" regexp="true" resvarname="stopAtMain">
          <text>main().*</text>
        </CheckStringStep>
        <CatchSequence exception="ComponentNotFoundException" id="_1sm9"
                       maxerror="2">
          <ProcedureCall id="_1smA" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to launch debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1smB" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1smC" name="cmdShellSucess">
        <WhileSequence id="_1smD" name="waitCmdShell" test="1">
          <TryStep id="_1smE" name="dbgCmdShell">
            <ProcedureCall id="_1smF" procedure="uiClickDbgCmdShell"/>
            <ProcedureCall id="_1smG" local="true" procedure="dbgCmdFinish"
                           retvarname="res"/>
            <IfSequence id="_1smH" test="$(res)">
              <BreakStep id="_1smI"/>
            </IfSequence>
            <CatchSequence exception="TestException" id="_1smJ" maxerror="0"
                           name="ignore"/>
          </TryStep>
        </WhileSequence>
        <ProcedureCall id="_1smK" procedure="dbgCmdErrorCheck"/>
      </TryStep>
      <ReturnStep id="_1smL" retval="true"/>
    </Procedure>
    <Procedure id="_1smM" name="lxWsAStartSingle" postdelay="4000">
      <variable name="conName"/>
      <variable name="object"/>
      <ProcedureCall id="_1smN" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="singleAttach" executable="$(wdm_exec)"
                        id="_1smO">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-attach</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-o</parameter>
        <parameter>$(object)</parameter>
      </SUTClientStarter>
      <SetGlobalStep id="_1spY" varname="client">
        <default>singleAttach</default>
      </SetGlobalStep>
      <TryStep id="_1spZ" name="waitSut">
        <ClientWaiter client="$(client)" engine="swt" id="_1spa" local="true"
                      timeout="150000"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1spb"
                       maxerror="2">
          <catchmessage>can NOT start WDM</catchmessage>
          <ProcedureCall id="_1spc" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1spd"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1spe" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1spf" maxerror="2">
          <ProcedureCall id="_1spg" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sph"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1spi" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1smg" name="ifErrorDialogPrompt">
        <ComponentWaiter client="$(client)"
                         component="WROptionalMessageDialog" id="_1smh"
                         local="true" resvarname="exist" timeout="90000"/>
        <IfSequence id="_1smi" test="$(exist)">
          <ProcedureCall id="_1smj" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to attach debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1smk" modifiers="16"/>
          <ReturnStep id="_1sml" retval="false"/>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1smm"
                       maxerror="2" name="ignore"/>
      </TryStep>
      <TryStep id="_1smn" name="Check for modal dialog">
        <ComponentWaiter client="$(client)" component="genericSWTDialog"
                         id="_1smo" timeout="30000"/>
        <CatchSequence exception="ComponentFoundException" id="_1smp"
                       maxerror="2">
          <SelectionEventStep client="$(client)" component="genericSWTDialog"
                              detail="CANCEL" event="SELECTION" id="_1smq">
            <comment>The SELECTION -4 is equivalent to closing the dialog through the
window manager. We can't press a generic OK button, since the results could
be disastrous. Cancelling a dialog should always have the least consequences.</comment>
          </SelectionEventStep>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1smr"
                       maxerror="0" name="Finished"/>
      </TryStep>
      <TryStep id="_1sms" name="debuggeeAttach">
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1smt" timeout="90000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1smu"
                       maxerror="2">
          <ReturnStep id="_1smv" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1smw"
                       maxerror="2">
          <ReturnStep id="_1smx" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1smy" name="expandStackframe">
        <ProcedureCall id="_1smz" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1sm+" maxerror="2">
          <ReturnStep id="_1sm-" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1sn0" retval="true"/>
    </Procedure>
    <Procedure id="_1sn1" name="lxWsAShStartSingle" postdelay="4000">
      <variable name="conName"/>
      <variable name="object"/>
      <ProcedureCall id="_1sn2" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="singleAttachShell" executable="$(wdm_exec)"
                        id="_1sn3">
        <parameter>-clean</parameter>
        <parameter>-configuration</parameter>
        <parameter>$(cfgFile)</parameter>
        <parameter>-data</parameter>
        <parameter>$(wdmWorkspace)</parameter>
        <parameter>-attach</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-o</parameter>
        <parameter>$(object)</parameter>
        <parameter>-sh</parameter>
        <parameter>true</parameter>
      </SUTClientStarter>
      <SetGlobalStep id="_1spj" varname="client">
        <default>singleAttachShell</default>
      </SetGlobalStep>
      <TryStep id="_1spk" name="waitSut">
        <ClientWaiter client="$(client)" engine="swt" id="_1spl" local="true"
                      timeout="150000"/>
        <CatchSequence exception="ClientNotConnectedException" id="_1spm"
                       maxerror="2">
          <catchmessage>can NOT start WDM</catchmessage>
          <ProcedureCall id="_1spn" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1spo"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1spp" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1spq" maxerror="2">
          <ProcedureCall id="_1spr" procedure="qfs.run-log.logError">
            <variable name="message">qftest failed to start SUT</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1sps"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <ReturnStep id="_1spt" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1snL" name="ifErrorDialogPrompt">
        <ComponentWaiter client="$(client)"
                         component="WROptionalMessageDialog" id="_1snM"
                         local="true" resvarname="exist" timeout="90000"/>
        <IfSequence id="_1snN" test="$(exist)">
          <ProcedureCall id="_1snO" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to attach debuggee</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                          event="MOUSE_MPRC" id="_1snP" modifiers="16"/>
          <ReturnStep id="_1snQ" retval="false"/>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1snR"
                       maxerror="2" name="ignore"/>
      </TryStep>
      <TryStep id="_1snS" name="Check for modal dialog">
        <ComponentWaiter client="$(client)" component="genericSWTDialog"
                         id="_1snT" timeout="30000"/>
        <CatchSequence exception="ComponentFoundException" id="_1snU"
                       maxerror="2">
          <SelectionEventStep client="$(client)" component="genericSWTDialog"
                              detail="CANCEL" event="SELECTION" id="_1snV">
            <comment>The SELECTION -4 is equivalent to closing the dialog through the
window manager. We can't press a generic OK button, since the results could
be disastrous. Cancelling a dialog should always have the least consequences.</comment>
          </SelectionEventStep>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1snW"
                       maxerror="0" name="Finished"/>
      </TryStep>
      <TryStep id="_1snX" name="debuggeeAttach">
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1snY" timeout="90000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1snZ"
                       maxerror="2">
          <ReturnStep id="_1sna" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1snb"
                       maxerror="2">
          <ReturnStep id="_1snc" retval="false"/>
        </CatchSequence>
      </TryStep>
      <TryStep id="_1snd" name="expandStackframe">
        <ProcedureCall id="_1sne" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1snf" maxerror="2">
          <ReturnStep id="_1sng" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1snh" retval="true"/>
    </Procedure>
    <Procedure id="_1r+T" name="wdmWsLSHStart" postdelay="4000">
      <ProcedureCall id="_1r+U" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1r+V">
        <parameter>-launch</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-f</parameter>
        <parameter>$(hostDebuggee)</parameter>
        <parameter>-e</parameter>
        <parameter>main</parameter>
        <parameter>-tp</parameter>
        <parameter>$(tgtDebuggee)</parameter>
        <parameter>-sh</parameter>
        <parameter>true</parameter>
      </SUTClientStarter>
      <WhileSequence id="_1r+W" name="waitWdmSut" test="1">
        <TryStep id="_1r+X" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1r+Y"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="150000"/>
          <IfSequence id="_1r+Z" test="$(resWdmStartSuccess)">
            <BreakStep id="_1r+a"/>
          </IfSequence>
          <CatchSequence exception="ClientNotConnectedException" id="_1r+b"
                         maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
            <ProcedureCall id="_1r+c" procedure="qfs.run-log.logError">
              <variable name="message">qftest failed to start SUT</variable>
              <variable name="withScreenshots">true</variable>
            </ProcedureCall>
            <ProcedureCall id="_1r+d"
                           procedure="qfs.utils.testrun.skip.skipTestCase"/>
            <BreakStep id="_1r+e"/>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1r+f" name="waitWdmWindow" postdelay="2000"
                     test="1">
        <TryStep id="_1r+g" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1r+h" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1r+i" test="$(resWdmStartSuccess)">
            <BreakStep id="_1r+j"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1r+k" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <SetGlobalStep id="_1r+l" local="true" varname="conSuccess">
        <default>false</default>
      </SetGlobalStep>
      <ProcedureCall id="_1r+m" procedure="rseLConWait"
                     retvarname="conSuccess"/>
      <IfSequence id="_1r+n" postdelay="2000" test="$(conSuccess)">
        <WhileSequence id="_1r+o" name="waitWdmStopAtMain" test="1">
          <ProcedureCall id="_1r+p" local="true" procedure="dbgStopAtMain"
                         retvarname="stopAtMain"/>
          <IfSequence id="_1r+q" test="$(stopAtMain)">
            <BreakStep id="_1r+r"/>
          </IfSequence>
        </WhileSequence>
      </IfSequence>
      <WhileSequence id="_1r+s" test="1">
        <TryStep id="_1r+t" name="dbgCmdShell">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-Console@Debug Command Shell"
                              event="SELECTION" id="_1r+u"/>
          <ProcedureCall id="_1r+v" local="true" procedure="dbgCmdFinish"
                         retvarname="dbgFinish"/>
          <IfSequence id="_1r+w" test="$(dbgFinish)">
            <BreakStep id="_1r+x"/>
          </IfSequence>
          <CatchSequence exception="ClientNotConnectedException" id="_1r+y"
                         maxerror="0" name="ignore">
            <BreakStep id="_1r+z"/>
          </CatchSequence>
          <CatchSequence exception="TestException" id="_1r++" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1r+-" name="wdmWsAStart" postdelay="4000">
      <ProcedureCall id="_1r-0" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1r-1">
        <parameter>-attach</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-o</parameter>
        <parameter>yzhang0 main</parameter>
      </SUTClientStarter>
      <WhileSequence id="_1r-2" name="waitWdmSut" test="1">
        <TryStep id="_1r-3" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1r-4"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="150000"/>
          <IfSequence id="_1r-5" test="$(resWdmStartSuccess)">
            <BreakStep id="_1r-6"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1r-7" maxerror="0"
                         name="ignore">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1r-8" name="waitWdmWindow" postdelay="2000"
                     test="1">
        <TryStep id="_1r-9" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1r-A" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1r-B" test="$(resWdmStartSuccess)">
            <BreakStep id="_1r-C"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1r-D" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1r-E" name="waitWdmAttachThreads" test="1">
        <ProcedureCall id="_1r-F" local="true"
                       procedure="dbgAttachMainAndThreads"
                       retvarname="attachSuccess"/>
        <ProcedureCall id="_1r-G" procedure="dbgAttachMain"/>
        <IfSequence id="_1r-H" test="$(attachSuccess)">
          <BreakStep id="_1r-I"/>
        </IfSequence>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1r-J" name="wdmWsASHStart" postdelay="4000">
      <ProcedureCall id="_1r-K" procedure="qfs.qft#qfs.swt.instrument.setup">
        <variable name="sutdir">$(WIND_WRWB_PATH)</variable>
      </ProcedureCall>
      <SUTClientStarter client="$(client)" executable="$(wdm_exec)"
                        id="_1r-L">
        <parameter>-attach</parameter>
        <parameter>-t</parameter>
        <parameter>$(conName)</parameter>
        <parameter>-ot</parameter>
        <parameter>Process</parameter>
        <parameter>-o</parameter>
        <parameter>yzhang0 main</parameter>
        <parameter>-sh</parameter>
        <parameter>true</parameter>
      </SUTClientStarter>
      <WhileSequence id="_1r-M" name="waitWdmSut" test="1">
        <TryStep id="_1r-N" name="waitSut">
          <ClientWaiter client="$(client)" engine="swt" id="_1r-O"
                        local="true" resvarname="resWdmStartSuccess"
                        timeout="150000"/>
          <IfSequence id="_1r-P" test="$(resWdmStartSuccess)">
            <BreakStep id="_1r-Q"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1r-R" maxerror="0"
                         name="ignore">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1r-S" name="waitWdmWindow" postdelay="2000"
                     test="1">
        <TryStep id="_1r-T" name="waitWdmWindow">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow"
                           id="_1r-U" local="true" postdelay="2000"
                           resvarname="resWdmStartSuccess" timeout="150000"/>
          <IfSequence id="_1r-V" test="$(resWdmStartSuccess)">
            <BreakStep id="_1r-W"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1r-X" maxerror="0">
            <catchmessage>can NOT start WDM</catchmessage>
          </CatchSequence>
        </TryStep>
      </WhileSequence>
      <WhileSequence id="_1r-Y" name="waitWdmAttachThreads" test="1">
        <ProcedureCall id="_1r-Z" local="true"
                       procedure="dbgAttachMainAndThreads"
                       retvarname="attachSuccess"/>
        <ProcedureCall id="_1r-a" procedure="dbgAttachMain"/>
        <IfSequence id="_1r-b" test="$(attachSuccess)">
          <BreakStep id="_1r-c"/>
        </IfSequence>
      </WhileSequence>
    </Procedure>
    <Procedure id="_3N+" name="wdmStartFinish">
      <ProcedureCall id="_1o99" procedure="uiShowProgressBar"/>
      <TryStep disabled="true" id="_1tsC" name="rseSavingFinished">
        <ComponentWaiter client="$(client)" component="WorkbenchWindow.text"
                         id="_1tsD"/>
        <CatchSequence exception="ComponentFoundException" id="_1ts8"
                       maxerror="2">
          <ReturnStep id="_1tsE" retval="false"/>
        </CatchSequence>
      </TryStep>
      <WhileSequence id="_1tr+" name="not finished yet" test="1">
        <TryStep id="_3O0" name="Try operations finished">
          <ComponentWaiter client="$(client)" component="WorkbenchWindow.text"
                           id="_1sNu" timeout="30000"/>
          <CheckStringStep client="$(client)" component="WorkbenchWindow.text"
                           errorlevel="0" id="_3O1" local="true" raise="true"
                           resvarname="finished">
            <text>No operations to display at this time.</text>
          </CheckStringStep>
          <IfSequence id="_1tr-" test="$(finished)">
            <ProcedureCall id="_3EU" procedure="qfs.swt.ctabfolder.closeTab">
              <variable name="tabname">Progress</variable>
            </ProcedureCall>
            <BreakStep id="_1ts0"/>
          </IfSequence>
          <CatchSequence exception="ComponentNotFoundException" id="_3O2"
                         maxerror="0">
            <ProcedureCall id="_1sNv"
                           procedure="qfs.utils.testrun.skip.skipTestSet"/>
            <ReturnStep id="_1sNw" retval="false"/>
          </CatchSequence>
          <CatchSequence exception="TestException" id="_1ts9" maxerror="0"/>
        </TryStep>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1qoJ" name="rseWaitFinish">
      <ProcedureCall id="_1qoK" procedure="uiShowProgressBar"/>
      <RepeatSequence count="20" id="_1qoT" name="limit" var="idx">
        <TryStep id="_1qoU" name="Try operations finished">
          <CheckStringStep client="$(client)" component="Progress.text"
                           errorlevel="0" id="_1qoV" local="true" raise="true"
                           resvarname="resNoOperationsLeft">
            <text>No operations to display at this time.</text>
          </CheckStringStep>
          <CatchSequence exception="TestException" id="_1qoW" maxerror="0">
            <SetGlobalStep id="_1qoX" local="true"
                           varname="resNoOperationsLeft">
              <default>false</default>
            </SetGlobalStep>
          </CatchSequence>
        </TryStep>
        <IfSequence id="_1qoY"
                    test="&#34;$(resNoOperationsLeft)&#34; == &#34;true&#34;">
          <ProcedureCall id="_1qoZ" procedure="qfs.swt.ctabfolder.closeTab">
            <variable name="tabname">Progress</variable>
          </ProcedureCall>
          <BreakStep id="_1qoa"/>
        </IfSequence>
        <IfSequence id="_1qob" test="$(idx) &gt; 18">
          <ProcedureCall id="_1qod" procedure="qfs.swt.ctabfolder.closeTab">
            <variable name="tabname">Progress</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qoe"
                         procedure="qfs.utils.testrun.skip.skipTestSet"/>
          <BreakStep id="_1qoc"/>
        </IfSequence>
      </RepeatSequence>
    </Procedure>
    <Procedure id="_1nWu" name="uiLaunchApp">
      <variable name="app">$(app)</variable>
      <variable name="lxName">$(conName)</variable>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1nXH"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenDebugConfigurations"
                          event="SELECTION" id="_1nXI"/>
      <ComponentWaiter client="$(client)"
                       component="LaunchConfigurationsDialog" id="_1nXJ"/>
      <TryStep id="_1vSH" name="select Linux App">
        <MouseEventStep clicks="1" client="$(client)"
                        component="LaunchConfigurationsDialog.tree@/Linux Application Process"
                        event="MOUSE_MPRC" id="_1nXK" modifiers="16"/>
        <CatchSequence exception="IndexNotFoundException" id="_1vSI"
                       maxerror="0">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonClose2" event="MOUSE_MPRC"
                          id="_1vT3" modifiers="16"/>
          <ProcedureCall id="_1vS-" procedure="uiEnableLxDev"/>
          <SelectionEventStep client="$(client)"
                              component="menu-org.eclipse.ui.run"
                              event="SELECTION" id="_1vT4"/>
          <SelectionEventStep client="$(client)"
                              component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenDebugConfigurations"
                              event="SELECTION" id="_1vT5"/>
          <ComponentWaiter client="$(client)"
                           component="LaunchConfigurationsDialog" id="_1vT6"/>
          <TryStep id="_1vT7" name="select Linux App">
            <MouseEventStep clicks="1" client="$(client)"
                            component="LaunchConfigurationsDialog.tree@/Linux Application Process"
                            event="MOUSE_MPRC" id="_1vT8" modifiers="16"/>
            <CatchSequence exception="IndexNotFoundException" id="_1vT9"
                           maxerror="0">
              <ProcedureCall id="_1vTF" procedure="qfs.run-log.logMessage">
                <variable name="message">can NOT create a linux app debug session</variable>
                <variable name="dontcompactify">false</variable>
                <variable name="report">true</variable>
              </ProcedureCall>
              <ProcedureCall id="_1vTG"
                             procedure="qfs.utils.testrun.skip.skipTestSet"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonClose2" event="MOUSE_MPRC"
                              id="_1vTI" modifiers="16"/>
            </CatchSequence>
            <CatchSequence exception="TestException" id="_1vTH" maxerror="0"/>
          </TryStep>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1vSJ" maxerror="0"/>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipNew_launch_configuration"
                      event="MOUSE_MPRC" id="_1nWz" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="formLinux_Application_Options.tree%/.*/$(lxName).*"
                      event="MOUSE_MPRC" id="_1ufm" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonExec_Path_on_Host:" event="MOUSE_MPRC"
                      id="_1nW-" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonExec_Path_on_Target:2"
                      event="MOUSE_MPRC" id="_1nX0" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="sectionGeneral8.text" event="MOUSE_MPRC"
                      id="_1nX1" modifiers="16" x="56" y="8"/>
      <TextInputStep clear="true" client="$(client)"
                     component="sectionGeneral8.text" id="_1nX2"
                     postdelay="1000" single="false">
        <text>$(app)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonDebug"
                      event="MOUSE_MPRC" id="_1nX3" modifiers="16"
                      postdelay="10000"/>
    </Procedure>
    <Procedure id="_1td3" name="uiLaunchTask">
      <variable name="vxName">$(conName)</variable>
      <variable name="entry">$(entry)</variable>
      <variable name="arg">$(arg)</variable>
      <variable name="name">$(name)</variable>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1td4"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenDebugConfigurations"
                          event="SELECTION" id="_1td5"/>
      <ComponentWaiter client="$(client)"
                       component="LaunchConfigurationsDialog" id="_1td6"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="LaunchConfigurationsDialog.tree@/VxWorks Kernel Task"
                      event="MOUSE_MPRC" id="_1tdP" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipNew_launch_configuration"
                      event="MOUSE_MPRC" id="_1tdQ" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="formVxWorks_Kernel_Task_Options.tree%/.*/$(vxName).*"
                      event="MOUSE_MPRC" id="_1tdR" modifiers="16"
                      postdelay="2000"/>
      <TextInputStep clear="true" client="$(client)"
                     component="sectionGeneral.text" id="_1tf7"
                     postdelay="1000">
        <text>$(entry)</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="sectionGeneral.text2" id="_1tf9"
                     postdelay="1000">
        <text>$(arg)</text>
      </TextInputStep>
      <TryStep id="_1th5" name="openAdvOpt" postdelay="2000">
        <ComponentWaiter client="$(client)" component="sectionAdvanced.text"
                         id="_1th6" timeout="2000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1th7"
                       maxerror="0">
          <MouseEventStep clicks="1" client="$(client)"
                          component="sectionAdvanced.toggle"
                          event="MOUSE_MPRC" id="_1th8" modifiers="16" x="4"
                          y="4"/>
        </CatchSequence>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="sectionAdvanced.text" event="MOUSE_MPRC"
                      id="_1tfI" modifiers="16" x="413" y="10"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="button_Edit..._" event="MOUSE_MPRC"
                      id="_1tfJ" modifiers="16" postdelay="1000"/>
      <ComponentWaiter client="$(client)" component="TOSObjectActionDialog"
                       id="_1tfK"/>
      <TextInputStep clear="true" client="$(client)"
                     component="textTipTask_Name" id="_1tfS" postdelay="1000">
        <text>$(name)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk8"
                      event="MOUSE_MPRC" id="_1tfT" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonAutomatically_attach_spawned_Kernel_Tasks"
                      event="MOUSE_MPRC" id="_1tfX" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonDebug"
                      event="MOUSE_MPRC" id="_1tdE" modifiers="16"
                      postdelay="1000"/>
    </Procedure>
    <Procedure id="_1tiT" name="uiLaunchRtpHost">
      <variable name="vxName">$(conName)</variable>
      <variable name="vxeFile">$(vxeFile)</variable>
      <variable name="arg">$(arg)</variable>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1tiU"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenDebugConfigurations"
                          event="SELECTION" id="_1tiV"/>
      <ComponentWaiter client="$(client)"
                       component="LaunchConfigurationsDialog" id="_1tiW"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="LaunchConfigurationsDialog.tree@/VxWorks Real Time Process"
                      event="MOUSE_MPRC" id="_1tiX" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipNew_launch_configuration"
                      event="MOUSE_MPRC" id="_1tiY" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="formVxWorks_Real_Time_Process_Options.tree%/.*/$(vxName).*"
                      event="MOUSE_MPRC" id="_1tiZ" modifiers="16"
                      postdelay="2000"/>
      <TextInputStep clear="true" client="$(client)"
                     component="sectionGeneral2.text3" id="_1tia"
                     postdelay="1000" single="false">
        <text>$(vxeFile)</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="sectionGeneral2.text2" id="_1tjY"
                     postdelay="1000">
        <text>$(arg)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonDebug"
                      event="MOUSE_MPRC" id="_1tim" modifiers="16"
                      postdelay="1000"/>
    </Procedure>
    <Procedure id="_1vqq" name="uiLaunchRtpTgt">
      <variable name="vxName">$(conName)</variable>
      <variable name="vxeFile">$(vxeFile)</variable>
      <variable name="arg">$(arg)</variable>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1vqr" postdelay="1000"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenDebugConfigurations"
                          event="SELECTION" id="_1vqs" postdelay="1000"/>
      <ComponentWaiter client="$(client)"
                       component="LaunchConfigurationsDialog" id="_1vqt"
                       local="true" resvarname="res"/>
      <IfSequence id="_1vuv" name="success" test="$(res)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="LaunchConfigurationsDialog.tree@/VxWorks Real Time Process"
                        event="MOUSE_MPRC" id="_1vqu" modifiers="16"
                        postdelay="2000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipNew_launch_configuration"
                        event="MOUSE_MPRC" id="_1vqv" modifiers="16"
                        postdelay="2000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="formVxWorks_Real_Time_Process_Options.tree%/.*/$(vxName).*"
                        event="MOUSE_MPRC" id="_1vqw" modifiers="16"
                        postdelay="2000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonExec_Path_on_Host:"
                        event="MOUSE_MPRC" id="_1vq+" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonExec_Path_on_Target:2"
                        event="MOUSE_MPRC" id="_1vq-" modifiers="16"
                        postdelay="1000"/>
        <TextInputStep clear="true" client="$(client)"
                       component="sectionGeneral2.text" id="_1vqx"
                       postdelay="1000" single="false">
          <text>$(vxeFile)</text>
        </TextInputStep>
        <TextInputStep clear="true" client="$(client)"
                       component="sectionGeneral2.text2" id="_1vqy"
                       postdelay="1000">
          <text>$(arg)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="buttonDebug"
                        event="MOUSE_MPRC" id="_1vqz" modifiers="16"
                        postdelay="1000"/>
        <ElseSequence id="_1vux" name="fail">
          <ReturnStep id="_1vuy" retval="false"/>
        </ElseSequence>
      </IfSequence>
    </Procedure>
    <Procedure id="_1vgz" name="uiRunRtp">
      <variable name="vxName">$(conName)</variable>
      <variable name="vxeFile">$(vxeFile)</variable>
      <variable name="arg">$(arg)</variable>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1vg+"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenRunConfigurations"
                          event="SELECTION" id="_1vhH"/>
      <ComponentWaiter client="$(client)"
                       component="LaunchConfigurationsDialog" id="_1vhd"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="LaunchConfigurationsDialog.tree@/VxWorks Real Time Process"
                      event="MOUSE_MPRC" id="_1vh1" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="toolItemTipNew_launch_configuration"
                      event="MOUSE_MPRC" id="_1vh2" modifiers="16"
                      postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="formVxWorks_Real_Time_Process_Options.tree%/.*/$(vxName).*"
                      event="MOUSE_MPRC" id="_1vh3" modifiers="16"
                      postdelay="2000"/>
      <TextInputStep clear="true" client="$(client)"
                     component="sectionGeneral2.text3" id="_1vh4"
                     postdelay="1000" single="false">
        <text>$(vxeFile)</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="sectionGeneral2.text2" id="_1vh5"
                     postdelay="1000">
        <text>$(arg)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonRun"
                      event="MOUSE_MPRC" id="_1vhK" modifiers="16"
                      postdelay="1000"/>
    </Procedure>
    <Procedure id="_1o5+" name="uiShowRse">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1o5-"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1o60"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1o61"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1o62"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1o63"
                     postdelay="1000" single="false">
        <text>remote</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Remote Systems/Remote Systems"
                      event="MOUSE_MPRC" id="_1o64" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1o65" modifiers="16"/>
    </Procedure>
    <Procedure id="_1rap" name="uiShowDebugSymbolBrowser">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1raq"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1rar"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1ras"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1rat"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1rau"
                     postdelay="1000" single="false">
        <text>debug symbol</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Wind River Workbench/Debug Symbol Browser"
                      event="MOUSE_MPRC" id="_1ra+" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1raw" modifiers="16"/>
    </Procedure>
    <Procedure id="_1qC6" name="uiClickRse">
      <TryStep id="_1qCF">
        <SelectionEventStep client="$(client)"
                            component="tabfolder-Remote_Systems@Remote Systems"
                            event="SELECTION" id="_1tgn"/>
        <CatchSequence exception="IndexNotFoundException" id="_1qCH"
                       maxerror="0">
          <ProcedureCall id="_1qeB" procedure="uiShowRse"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1r8S" maxerror="0"
                       name="ignore">
          <ProcedureCall id="_1r8T" procedure="uiShowRse"/>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1raf" name="uiClickDebugSymbolBrowser">
      <TryStep id="_1rag">
        <SelectionEventStep client="$(client)"
                            component="tabfolder-Remote_Systems@Debug Symbol Browser"
                            event="SELECTION" id="_1rao"/>
        <CatchSequence exception="IndexNotFoundException" id="_1rai"
                       maxerror="0">
          <ProcedureCall id="_1rb1" procedure="uiShowDebugSymbolBrowser"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rak" maxerror="0"
                       name="ignore">
          <ProcedureCall id="_1rb2" procedure="uiShowDebugSymbolBrowser"/>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1qCa" name="uiClickBreakpointView">
      <TryStep id="_1qCb">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)@Breakpoints"
                         id="_1sTq" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1sfA" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)@Breakpoints"
                              event="SELECTION" id="_1sfB"/>
          <ElseSequence id="_1sfC">
            <SelectionEventStep client="$(client)"
                                component="tabfolder-Registers@Breakpoints"
                                event="SELECTION" id="_1sfD"/>
          </ElseSequence>
        </IfSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1qCd"
                       maxerror="0" name="showBpView">
          <ProcedureCall id="_1qCf" procedure="uiShowBreakpointView"/>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1qFh"
                       maxerror="0" name="showBpView">
          <ProcedureCall id="_1qFi" procedure="uiShowBreakpointView"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1qCg" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rsN" name="uiClickVariableView">
      <TryStep id="_1se-">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)@Variables"
                         id="_1sf0" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1sf1" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)@Variables"
                              event="SELECTION" id="_1sf2"/>
          <ElseSequence id="_1sf3">
            <SelectionEventStep client="$(client)"
                                component="tabfolder-Registers@Variables"
                                event="SELECTION" id="_1sf4"/>
          </ElseSequence>
        </IfSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1rsQ"
                       maxerror="0" name="showVarView">
          <ProcedureCall id="_1rsR" procedure="uiShowVariableView"/>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1rsS"
                       maxerror="0" name="showVarView">
          <ProcedureCall id="_1rsT" procedure="uiShowVariableView"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rsU" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rr-" name="uiClickRegisterView">
      <TryStep id="_1rs8">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)@Registers"
                         id="_1sey" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1sez" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)@Registers"
                              event="SELECTION" id="_1sex"/>
          <ElseSequence id="_1se+">
            <SelectionEventStep client="$(client)"
                                component="tabfolder-Registers@Registers"
                                event="SELECTION" id="_1sSZ"/>
          </ElseSequence>
        </IfSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1rsA"
                       maxerror="0" name="showRegView">
          <ProcedureCall id="_1rsf" procedure="uiShowRegisterView"/>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1rsC"
                       maxerror="0" name="showRegView">
          <ProcedureCall id="_1rsg" procedure="uiShowRegisterView"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rsE" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rsV" name="uiClickExpressionView">
      <TryStep id="_1rsW">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)@Expressions"
                         id="_1sfJ" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1sfK" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)@Expressions"
                              event="SELECTION" id="_1sfL"/>
          <ElseSequence id="_1sfM">
            <SelectionEventStep client="$(client)"
                                component="tabfolder-Registers@Expressions"
                                event="SELECTION" id="_1sfN"/>
          </ElseSequence>
        </IfSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1rsY"
                       maxerror="0" name="showExpView">
          <ProcedureCall id="_1rsZ" procedure="uiShowExpressionView"/>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1rsa"
                       maxerror="0" name="showExpView">
          <ProcedureCall id="_1rsb" procedure="uiShowExpressionView"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rsc" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1sS2" name="uiClickDbgCmdShell">
      <TryStep id="_1sS3">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)@Debug Command Shell"
                         id="_1sfT" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1sfU" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)@Debug Command Shell"
                              event="SELECTION" id="_1sfV"/>
          <ReturnStep id="_1sfW" retval="true"/>
        </IfSequence>
        <ComponentWaiter client="$(client)"
                         component="tabfolder-Console@Debug Command Shell"
                         id="_1sSA" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1sfX" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-Console@Debug Command Shell"
                              event="SELECTION" id="_1sfY"/>
          <ReturnStep id="_1sfZ" retval="true"/>
        </IfSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1sS5"
                       maxerror="2" name="showCmdShellView">
          <ProcedureCall id="_1sSB" procedure="uiShowDebugCmdShellView"/>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1sS7"
                       maxerror="0" name="showCmdShellView">
          <ProcedureCall id="_1sSC" procedure="uiShowDebugCmdShellView"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sS9" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1sfa" name="uiClickConsole">
      <TryStep id="_1sfb">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)@Console"
                         id="_1sfc" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1sfd" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)@Console"
                              event="SELECTION" id="_1sfe"/>
          <ReturnStep id="_1sff" retval="true"/>
        </IfSequence>
        <ComponentWaiter client="$(client)"
                         component="tabfolder-Console@Console" id="_1sfg"
                         local="true" resvarname="exist" timeout="1000"/>
        <IfSequence id="_1sfh" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-Console@Console"
                              event="SELECTION" id="_1sfi"/>
          <ReturnStep id="_1sfj" retval="true"/>
        </IfSequence>
        <CatchSequence exception="IndexNotFoundException" id="_1sfk"
                       maxerror="2" name="showCmdShellView">
          <ProcedureCall id="_1uXk" procedure="uiShowConsole"/>
        </CatchSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1sfm"
                       maxerror="0" name="showCmdShellView">
          <ProcedureCall id="_1uXl" procedure="uiShowConsole"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sfo" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1uXX" name="uiShowConsole">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1uXY"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1uXZ"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1uXa"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1uXb"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1uXc" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1uXd"
                     predelay="2000">
        <text>console</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/General/Console"
                      event="MOUSE_MPRC" id="_1uXj" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1uXf" modifiers="16"/>
    </Procedure>
    <Procedure id="_1uBq" name="uiClickEditorView">
      <TryStep id="_1uBr">
        <MouseEventStep clicks="1" client="$(client)"
                        component="canvas-Editor.text" event="MOUSE_MPRC"
                        id="_1uC1" modifiers="16" x="502" y="3148"/>
        <CatchSequence exception="TestException" id="_1uC0" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1nnN" name="uiShowVariableView">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1nnO"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1nnP"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1nnQ"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1nnR"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1nnS" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1nnW"
                     predelay="2000">
        <text>varia</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Debug/Variables"
                      event="MOUSE_MPRC" id="_1nnX" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1nnY" modifiers="16"/>
    </Procedure>
    <Procedure id="_1o8N" name="uiShowProgressBar">
      <WhileSequence id="_1thP" test="true">
        <TryStep id="_1thL">
          <SelectionEventStep client="$(client)" component="menu-window"
                              event="SELECTION" id="_1o8O"/>
          <SelectionEventStep client="$(client)"
                              component="menu-window-showView"
                              event="SELECTION" id="_1o8P"/>
          <SelectionEventStep client="$(client)" component="menuitemOther..."
                              event="SELECTION" id="_1o8Q"/>
          <ComponentWaiter client="$(client)" component="ShowViewDialog"
                           id="_1o8R"/>
          <TextInputStep clear="true" client="$(client)"
                         component="ShowViewDialog.text" id="_1o8S"
                         predelay="2000">
            <text>*progress</text>
          </TextInputStep>
          <MouseEventStep clicks="1" client="$(client)"
                          component="ShowViewDialog.tree@/General/Progress"
                          event="MOUSE_MPRC" id="_1o8W" modifiers="16"
                          postdelay="1000" predelay="1000"/>
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                          event="MOUSE_MPRC" id="_1o8U" modifiers="16"/>
          <BreakStep id="_1thQ"/>
          <CatchSequence exception="ModalDialogException" id="_1thM"
                         maxerror="0">
            <ProcedureCall id="_1thO"
                           procedure="qfs.swt.cleanup.closeAllDialogsAndModalShells">
              <variable name="maxDialogs">5</variable>
            </ProcedureCall>
          </CatchSequence>
          <CatchSequence exception="TestException" id="_1thN" maxerror="0"/>
        </TryStep>
      </WhileSequence>
    </Procedure>
    <Procedure id="_1ncL" name="uiShowBreakpointView">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1ncM"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1ncN"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1ncO"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1ncP"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1ncQ" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1ncR"
                     predelay="2000">
        <text>break</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Debug/Breakpoints"
                      event="MOUSE_MPRC" id="_1ncT" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1ncU" modifiers="16"/>
    </Procedure>
    <Procedure id="_1npT" name="uiShowExpressionView">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1npU"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1npV"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1npW"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1npX"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1npY" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1npZ"
                     predelay="2000">
        <text>expression</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Debug/Expressions"
                      event="MOUSE_MPRC" id="_1npa" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1npb" modifiers="16"/>
    </Procedure>
    <Procedure id="_1oQI" name="uiCloseExpressionView">
      <TryStep id="_1sz-" name="closeExpressionView">
        <ProcedureCall id="_1oQ7" procedure="qfs.swt.ctabfolder.closeTab">
          <variable name="tabname">Expressions</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1s+0" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1nsm" name="uiShowRegisterView">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1nsn"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1nso"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1nsp"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1nsq"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1nsr" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1nss"
                     predelay="2000">
        <text>register</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Debug/Registers"
                      event="MOUSE_MPRC" id="_1nst" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1nsu" modifiers="16"/>
    </Procedure>
    <Procedure id="_1nsv" name="uiShowMemoryBrowserView">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1nsw"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1nsx"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1nsy"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1nsz"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1ns+" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1ns-"
                     predelay="2000">
        <text>memory</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Debug/Memory Browser"
                      event="MOUSE_MPRC" id="_1nt0" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1nt1" modifiers="16"/>
    </Procedure>
    <Procedure id="_1oQ8" name="uiCloseMemoryBrowserView">
      <ProcedureCall id="_1oQH" procedure="qfs.swt.ctabfolder.closeTab">
        <variable name="tabname">Memory Browser</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1o25" name="uiShowDebugCmdShellView">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1o26"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1o27"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1o28"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1o29"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1o2A" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1o2B"
                     predelay="2000">
        <text>debug command</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Device Debug/Debug Command Shell"
                      event="MOUSE_MPRC" id="_1o2R" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1o2D" modifiers="16"/>
    </Procedure>
    <Procedure id="_1syq" name="uiClickTerminalView">
      <TryStep id="_1syr">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)@Terminal"
                         id="_1uUe" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1syt" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)@Terminal"
                              event="SELECTION" id="_1syu"/>
          <ReturnStep id="_1syv" retval="true"/>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1sz0"
                       maxerror="0" name="showTerminalView">
          <ProcedureCall id="_1sz1" procedure="uiShowTerminalView"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1sz2" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1syb" name="uiShowTerminalView">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1syc"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1syd"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1sye"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1syf"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1syg" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1syh"
                     predelay="2000">
        <text>terminal</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Terminal"
                      event="MOUSE_MPRC" id="_1syk" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Terminal/Terminal"
                      event="MOUSE_MPRC" id="_1syl" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1syj" modifiers="16"/>
    </Procedure>
    <Procedure id="_1szr" name="uiCloseTerminalView">
      <TryStep id="_1s+2">
        <ProcedureCall id="_1s+1" procedure="qfs.swt.ctabfolder.closeTab">
          <variable name="tabname">Terminal</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1s+3" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1uWR" name="uiClickTgtConsole">
      <TryStep id="_1uWS">
        <ComponentWaiter client="$(client)"
                         component="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)@Target Consoles"
                         id="_1uWT" local="true" resvarname="exist"
                         timeout="1000"/>
        <IfSequence id="_1uWU" test="$(exist)">
          <SelectionEventStep client="$(client)"
                              component="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)@Target Consoles"
                              event="SELECTION" id="_1uWV"/>
          <ReturnStep id="_1uWt" retval="true"/>
          <ElseSequence id="_1uWu">
            <SelectionEventStep client="$(client)"
                                component="tabfolder-Console@Console"
                                event="SELECTION" id="_1uWZ"/>
          </ElseSequence>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1uWb"
                       maxerror="0" name="showTargetConsole">
          <ProcedureCall id="_1uWc" procedure="uiShowTgtConsole"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1uWd" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1uWe" name="uiShowTgtConsole">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1uWf"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1uWg"/>
      <SelectionEventStep client="$(client)" component="menuitemOther..."
                          event="SELECTION" id="_1uWh"/>
      <ComponentWaiter client="$(client)" component="ShowViewDialog"
                       id="_1uWi"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.text" event="MOUSE_MPRC"
                      id="_1uWj" modifiers="16" x="35" y="14"/>
      <TextInputStep clear="true" client="$(client)"
                     component="ShowViewDialog.text" id="_1uWk"
                     predelay="2000">
        <text>console</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="ShowViewDialog.tree@/Wind River Workbench/Target Consoles"
                      event="MOUSE_MPRC" id="_1uWr" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk41"
                      event="MOUSE_MPRC" id="_1uWn" modifiers="16"/>
    </Procedure>
    <Procedure id="_1s+4" name="uiTgtConnect">
      <variable name="bc">$(bc)</variable>
      <ProcedureCall id="_1s+6" procedure="uiClickTerminalView"/>
      <ProcedureCall id="_1s-8" procedure="uiTgtDisconnect"/>
      <ProcedureCall id="_1s+7" procedure="utils.vlmIpPort">
        <variable name="barcode">$(bc)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1s+8" procedure="uiTgtCfg">
        <variable name="tsIP">$(tsIP)</variable>
        <variable name="tsPort">$(tsPort)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1s-2" name="uiTgtDisconnect">
      <TryStep id="_1s-5" name="disconnect">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.tm.internal.terminal.actions.TerminalActionDisconnect"
                        event="MOUSE_MPRC" id="_1s-4" modifiers="16"/>
        <CatchSequence exception="DisabledComponentException" id="_1s-6"
                       maxerror="0" name="right"/>
        <CatchSequence exception="TestException" id="_1s-7" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1szc" name="uiTgtCfg">
      <variable name="tsIP">$(tsIP)</variable>
      <variable name="tsPort">$(tsPort)</variable>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.tm.internal.terminal.actions.TerminalActionSettings"
                      event="MOUSE_MPRC" id="_1szd" modifiers="16"/>
      <TryStep id="_1sze" name="openTerminalConfigDialog">
        <ComponentWaiter client="$(client)" component="TerminalSettingsDlg"
                         id="_1szf"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1szg"
                       maxerror="0">
          <ReturnStep id="_1s+D" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1s+C" maxerror="0"/>
      </TryStep>
      <SelectionEventStep client="$(client)"
                          component="groupConnection_Type:.combo@Telnet"
                          event="SELECTION" id="_1szh" postdelay="1000"/>
      <ProcedureCall id="_1s-9" postdelay="1000"
                     procedure="qfs.swt.text.clearArea">
        <variable name="id">groupSettings:.text</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="groupSettings:.text" id="_1szi"
                     postdelay="1000">
        <text>$(tsIP)</text>
      </TextInputStep>
      <ProcedureCall id="_1s-A" postdelay="1000"
                     procedure="qfs.swt.text.clearArea">
        <variable name="id">groupSettings:.combo</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="groupSettings:.combo" id="_1szj"
                     postdelay="1000">
        <text>$(tsPort)</text>
      </TextInputStep>
      <ProcedureCall id="_1s-B" postdelay="1000"
                     procedure="qfs.swt.text.clearArea">
        <variable name="id">groupSettings:.text2</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="groupSettings:.text2" id="_1szk"
                     postdelay="1000">
        <text>10</text>
      </TextInputStep>
      <TryStep id="_1s-C" name="finish">
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk6"
                        event="MOUSE_MPRC" id="_1szl" modifiers="16"
                        postdelay="1000"/>
        <CatchSequence exception="TestException" id="_1s-D" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vR1" name="uiLxUmaRestart">
      <variable name="bc">$(bc)</variable>
      <ProcedureCall id="_1vR2" procedure="uiClickTerminalView"/>
      <ProcedureCall id="_1vR7" postdelay="2000" procedure="terminalClear"/>
      <ProcedureCall id="_1vR6" postdelay="1000" procedure="terminalInput">
        <variable name="cmd"/>
      </ProcedureCall>
      <ProcedureCall id="_1vRC" postdelay="2000" procedure="terminalInput">
        <variable name="cmd">ps x | grep -v grep | grep -c usermode-agent</variable>
      </ProcedureCall>
      <ClientScriptStep client="$(client)" engine="swt" id="_1vRB"
                        name="getExistUma">
        <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

uma_num = 0
checkStr = re.compile('^(\d+)',re.M)
m = checkStr.search(content)

if m != None:
    uma_num = m.group(0)
    
rc.setLocal('uma_num',uma_num)






</code>
      </ClientScriptStep>
      <WhileSequence id="_1vRI" test="$(uma_num) &gt; 0">
        <ProcedureCall id="_1vRF" postdelay="2000" procedure="terminalClear"/>
        <ProcedureCall id="_1vRH" postdelay="1000" procedure="terminalInput">
          <variable name="cmd"/>
        </ProcedureCall>
        <ProcedureCall id="_1vRE" postdelay="2000" procedure="terminalInput">
          <variable name="cmd">ps x | grep [u]sermode-agent</variable>
        </ProcedureCall>
        <ClientScriptStep client="$(client)" engine="swt" id="_1vRG"
                          name="getExistUma Process ID">
          <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

uma_pid = 0
checkStr = re.compile('^\s+(\d+)\s+',re.M)
m = checkStr.search(content)

if m != None:
    uma_pid = m.group(0)

rc.setLocal('uma_pid',uma_pid)

</code>
        </ClientScriptStep>
        <IfSequence id="_1vRD" test="$(uma_pid)">
          <ProcedureCall id="_1vRK" postdelay="2000"
                         procedure="terminalClear"/>
          <ProcedureCall id="_1vRL" postdelay="1000"
                         procedure="terminalInput">
            <variable name="cmd"/>
          </ProcedureCall>
          <ProcedureCall id="_1vRM" procedure="terminalInput">
            <variable name="cmd">kill -9 $(uma_pid)</variable>
          </ProcedureCall>
        </IfSequence>
        <ProcedureCall id="_1vRO" postdelay="2000" procedure="terminalClear"/>
        <ProcedureCall id="_1vRP" postdelay="1000" procedure="terminalInput">
          <variable name="cmd"/>
        </ProcedureCall>
        <ProcedureCall id="_1vRQ" procedure="terminalInput">
          <variable name="cmd">ps x | grep -v grep | grep -c usermode-agent</variable>
        </ProcedureCall>
        <ClientScriptStep client="$(client)" engine="swt" id="_1vRR"
                          name="getExistUma">
          <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

uma_num = 0
checkStr = re.compile('^(\d+)',re.M)
m = checkStr.search(content)

if m != None:
    uma_num = m.group(0)
    
rc.setLocal('uma_num',uma_num)





</code>
        </ClientScriptStep>
      </WhileSequence>
      <ProcedureCall id="_1vRS" postdelay="2000" procedure="terminalClear"/>
      <ProcedureCall id="_1vRT" postdelay="1000" procedure="terminalInput">
        <variable name="cmd"/>
      </ProcedureCall>
      <ProcedureCall id="_1vRU" postdelay="2000" procedure="terminalInput">
        <variable name="cmd"> usermode-agent -V -daemon</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vRv" postdelay="2000" procedure="terminalClear"/>
      <ProcedureCall id="_1vRw" postdelay="1000" procedure="terminalInput">
        <variable name="cmd"/>
      </ProcedureCall>
      <ProcedureCall id="_1vRt" postdelay="2000" procedure="terminalInput">
        <variable name="cmd">ps x | grep -v grep | grep -c usermode-agent</variable>
      </ProcedureCall>
      <ClientScriptStep client="$(client)" engine="swt" id="_1vRu"
                        name="only one uma">
        <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

uma_num = 0
checkStr = re.compile('^(\d+)',re.M)
m = checkStr.search(content)

if m != None:
    uma_num = m.group(0)

if uma_num &gt; 0 :
    rc.setLocal('login',True)
else:
    rc.setLocal('login',False)
    






</code>
      </ClientScriptStep>
      <TryStep id="_1vSB" name="click to un-select">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1vSA" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="TestException" id="_1vSC" maxerror="0"/>
      </TryStep>
      <ReturnStep id="_1vRx" retval="$(login)"/>
    </Procedure>
    <Procedure id="_1vRV" name="uiLxDebuggeeRestart">
      <variable name="tgtDebuggee">$(tgtDebuggee)</variable>
      <variable name="debuggee">$(debuggee)</variable>
      <ProcedureCall id="_1vRW" procedure="uiClickTerminalView"/>
      <ProcedureCall id="_1vRX" postdelay="2000" procedure="terminalClear"/>
      <ProcedureCall id="_1vRY" postdelay="1000" procedure="terminalInput">
        <variable name="cmd"/>
      </ProcedureCall>
      <ProcedureCall id="_1vRZ" postdelay="2000" procedure="terminalInput">
        <variable name="cmd">ps x | grep -v grep | grep -c $(debuggee)</variable>
      </ProcedureCall>
      <ClientScriptStep client="$(client)" engine="swt" id="_1vRa"
                        name="getExistDebuggee">
        <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

debuggee_num = 0
checkStr = re.compile('^(\d+)',re.M)
m = checkStr.search(content)

if m != None:
    debuggee_num = m.group(0)
    
rc.setLocal('debuggee_num',debuggee_num)






</code>
      </ClientScriptStep>
      <WhileSequence id="_1vRb" test="$(debuggee_num) &gt; 0">
        <ProcedureCall id="_1vRc" postdelay="2000" procedure="terminalClear"/>
        <ProcedureCall id="_1vRd" postdelay="1000" procedure="terminalInput">
          <variable name="cmd"/>
        </ProcedureCall>
        <ProcedureCall id="_1vRe" postdelay="2000" procedure="terminalInput">
          <variable name="cmd">ps x | grep -v grep | grep $(debuggee)</variable>
        </ProcedureCall>
        <ClientScriptStep client="$(client)" engine="swt" id="_1vRf"
                          name="getExistDebuggee Process ID">
          <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

debuggee_pid = 0
checkStr = re.compile('^\s+(\d+)\s+',re.M)
m = checkStr.search(content)

if m != None:
    debuggee_pid = m.group(0)

rc.setLocal('debuggee_pid',debuggee_pid)

</code>
        </ClientScriptStep>
        <IfSequence id="_1vRg" test="$(debuggee_pid)">
          <ProcedureCall id="_1vRh" postdelay="2000"
                         procedure="terminalClear"/>
          <ProcedureCall id="_1vRi" postdelay="1000"
                         procedure="terminalInput">
            <variable name="cmd"/>
          </ProcedureCall>
          <ProcedureCall id="_1vRj" procedure="terminalInput">
            <variable name="cmd">kill -9 $(debuggee_pid)</variable>
          </ProcedureCall>
        </IfSequence>
        <ProcedureCall id="_1vRk" postdelay="2000" procedure="terminalClear"/>
        <ProcedureCall id="_1vRl" postdelay="1000" procedure="terminalInput">
          <variable name="cmd"/>
        </ProcedureCall>
        <ProcedureCall id="_1vRr" postdelay="2000" procedure="terminalInput">
          <variable name="cmd">ps x | grep -v grep | grep -c $(debuggee)</variable>
        </ProcedureCall>
        <ClientScriptStep client="$(client)" engine="swt" id="_1vRn"
                          name="getExistDebuggee">
          <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

debuggee_num = 0
checkStr = re.compile('^(\d+)',re.M)
m = checkStr.search(content)

if m != None:
    debuggee_num = m.group(0)
    
rc.setLocal('debuggee_num',debuggee_num)





</code>
        </ClientScriptStep>
      </WhileSequence>
      <ProcedureCall id="_1vRo" postdelay="2000" procedure="terminalClear"/>
      <ProcedureCall id="_1vRp" postdelay="1000" procedure="terminalInput">
        <variable name="cmd"/>
      </ProcedureCall>
      <ProcedureCall id="_1vRq" postdelay="2000" procedure="terminalInput">
        <variable name="cmd">$(tgtDebuggee)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vU9" postdelay="2000" procedure="terminalClear"/>
      <ProcedureCall id="_1vUA" postdelay="1000" procedure="terminalInput">
        <variable name="cmd"/>
      </ProcedureCall>
      <ProcedureCall id="_1vUB" postdelay="2000" procedure="terminalInput">
        <variable name="cmd">ps x | grep -v grep | grep -c $(debuggee)</variable>
      </ProcedureCall>
      <ClientScriptStep client="$(client)" engine="swt" id="_1vUC"
                        name="only one debuggee">
        <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

uma_num = 0
checkStr = re.compile('^(\d+)',re.M)
m = checkStr.search(content)

if m != None:
    uma_num = m.group(0)

if uma_num &gt; 0 :
    rc.setLocal('login',True)
else:
    rc.setLocal('login',False)
    






</code>
      </ClientScriptStep>
      <TryStep id="_1vUD" name="click to un-select">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1vUE" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="TestException" id="_1vUF" maxerror="0"/>
      </TryStep>
      <ReturnStep id="_1vU8" retval="$(login)"/>
    </Procedure>
    <Procedure id="_1ndi" name="uiDelAllBp">
      <TryStep id="_1qCi">
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run"
                            event="SELECTION" id="_1ngN"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.RemoveAllBreakpoints"
                            event="SELECTION" id="_1ngO"/>
        <ComponentWaiter client="$(client)"
                         component="MessageDialogWithToggle" id="_1ngP"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk2"
                        event="MOUSE_MPRC" id="_1ngQ" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1qCj" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1nf0" name="uiCheckFrame1">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1nfK" modifiers="16"
                      postdelay="2000"/>
      <ProcedureCall id="_1nf1" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <WhileSequence id="_1njh" test="1">
        <TryStep id="_1nji">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0/0" id="_1njj"
                           local="true" regexp="true" resvarname="res">
            <text>mid_stack.*</text>
          </CheckStringStep>
          <IfSequence id="_1njk" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1njl"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1njm" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1nf2">
        <text>mid_stack1() - mid_stack.c:52</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nf3" name="uiCheckFrame2">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1nfL" modifiers="16"
                      postdelay="2000"/>
      <ProcedureCall id="_1nf4" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <WhileSequence id="_1njb" test="1">
        <TryStep id="_1njc">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0/0" id="_1njd"
                           local="true" regexp="true" resvarname="res">
            <text>mid_stack.*</text>
          </CheckStringStep>
          <IfSequence id="_1nje" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1njf"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1njg" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1nf5" regexp="true">
        <text>mid_stack2().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nf6" name="uiCheckFrame3">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1nfM" modifiers="16"
                      postdelay="2000"/>
      <ProcedureCall id="_1nf7" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <WhileSequence id="_1njV" test="1">
        <TryStep id="_1njW">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0/0" id="_1njX"
                           local="true" regexp="true" resvarname="res">
            <text>mid_stack.*</text>
          </CheckStringStep>
          <IfSequence id="_1njY" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1njZ"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1nja" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1nf8" regexp="true">
        <text>mid_stack3().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nf9" name="uiCheckFrame4">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1nfN" modifiers="16"
                      postdelay="2000"/>
      <ProcedureCall id="_1nfA" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <WhileSequence id="_1njP" test="1">
        <TryStep id="_1njQ">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0/0" id="_1njR"
                           local="true" regexp="true" resvarname="res">
            <text>mid_stack.*</text>
          </CheckStringStep>
          <IfSequence id="_1njS" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1njT"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1njU" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1nfB" regexp="true">
        <text>mid_stack4().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nfC" name="uiCheckFrame5">
      <TryStep id="_1qI6">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0" event="MOUSE_MPRC"
                        id="_1qI5" modifiers="16" postdelay="2000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                        event="MOUSE_MPRC" id="_1nfO" modifiers="16"
                        postdelay="2000"/>
        <ProcedureCall id="_1nfD" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1qI7" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <WhileSequence id="_1njJ" postdelay="2000" test="1">
        <TryStep id="_1njK">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0/0" id="_1njL"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1njM" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1njN"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1njO" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1nfE" predelay="2000" regexp="true">
        <text>mid_stack5().*</text>
      </CheckStringStep>
      <ProcedureCall id="_1oPy" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1omZ" name="uiCheckFrame1Attach">
      <ProcedureCall id="_1omb" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <ProcedureCall id="_1omj" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1oma" modifiers="16"
                      postdelay="2000"/>
      <WhileSequence id="_1omc" test="1">
        <TryStep id="_1omd">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0" id="_1ome"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1omf" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1omg"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1omh" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <ProcedureCall id="_1onf" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0"
                       id="_1omi" regexp="true">
        <text>mid_stack1().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1omk" name="uiCheckFrame2Attach">
      <ProcedureCall id="_1oml" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <ProcedureCall id="_1omm" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1omn" modifiers="16"
                      postdelay="2000"/>
      <WhileSequence id="_1omo" test="1">
        <TryStep id="_1omp">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0" id="_1omq"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1omr" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1oms"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1omt" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <ProcedureCall id="_1ona" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1omu" regexp="true">
        <text>mid_stack2().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1omv" name="uiCheckFrame3Attach">
      <ProcedureCall id="_1omw" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <ProcedureCall id="_1omx" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1omy" modifiers="16"
                      postdelay="2000"/>
      <WhileSequence id="_1omz" test="1">
        <TryStep id="_1om+">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0" id="_1om-"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1on0" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1on1"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1on2" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <ProcedureCall id="_1one" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1on3" regexp="true">
        <text>mid_stack3().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1on4" name="uiCheckFrame4Attach">
      <ProcedureCall id="_1on5" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <ProcedureCall id="_1on6" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1on7" modifiers="16"
                      postdelay="2000"/>
      <WhileSequence id="_1on8" test="1">
        <TryStep id="_1on9">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0" id="_1onA"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1onB" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1onC"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1onD" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <ProcedureCall id="_1onc" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1onE" regexp="true">
        <text>mid_stack4().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1onF" name="uiCheckFrame5Attach">
      <ProcedureCall id="_1onG" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <ProcedureCall id="_1onH" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                      event="MOUSE_MPRC" id="_1onr" modifiers="16"
                      postdelay="2000"/>
      <WhileSequence id="_1onJ" test="1">
        <TryStep id="_1onK">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0" id="_1onL"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1onM" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1onN"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1onO" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <ProcedureCall id="_1ond" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1onP" regexp="true">
        <text>mid_stack5().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1ong" name="uiCheckFrame5AttachBp">
      <ProcedureCall id="_1onh" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <ProcedureCall id="_1oni" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <WhileSequence id="_1onj" test="1">
        <TryStep id="_1onk">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/0" id="_1onl"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1onm" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1onn"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1ono" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <ProcedureCall id="_1onp" postdelay="1000"
                     procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1onq" regexp="true">
        <text>mid_stack5().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1qGg" name="uiCheckSharedCodeFrame">
      <TryStep id="_1qI8">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0" event="MOUSE_MPRC"
                        id="_1qGh" modifiers="16" postdelay="2000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                        event="MOUSE_MPRC" id="_1qI3" modifiers="16"
                        postdelay="2000"/>
        <ProcedureCall id="_1qGi" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1qI9" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <WhileSequence id="_1qGj" postdelay="1000" test="1">
        <TryStep id="_1qGk">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/1/0" id="_1qGl"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1qGm" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1qGn"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1qGo" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/1/0"
                       id="_1qGp" regexp="true">
        <text>sharedCode().*</text>
      </CheckStringStep>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/1/1"
                       id="_1qGr" regexp="true">
        <text>printThreadInfo().*</text>
      </CheckStringStep>
      <WhileSequence id="_1qGs" postdelay="1000" test="2">
        <TryStep id="_1qGt">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/0/2/0" id="_1qGu"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1qGv" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1qGw"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1qGx" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/2/0"
                       id="_1qGy" regexp="true">
        <text>sharedCode().*</text>
      </CheckStringStep>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/2/1"
                       id="_1qGz" regexp="true">
        <text>printThreadInfo().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1qKH" name="uiCheckSubProcessFrame">
      <TryStep id="_1qKI">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0" event="MOUSE_MPRC"
                        id="_1qKJ" modifiers="16" postdelay="2000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                        event="MOUSE_MPRC" id="_1qKK" modifiers="16"
                        postdelay="2000"/>
        <ProcedureCall id="_1qKL" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1qKM" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <WhileSequence id="_1qKN" postdelay="1000" test="1">
        <TryStep id="_1qKO">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/1/0/0" id="_1qKP"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1qKQ" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1qKR"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1qKS" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/1/0/0"
                       id="_1qKT" regexp="true">
        <text>sharedCode().*</text>
      </CheckStringStep>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/1/0/1"
                       id="_1qKU" regexp="true">
        <text>printProcessInfo().*</text>
      </CheckStringStep>
      <WhileSequence id="_1qKV" postdelay="1000" test="2">
        <TryStep id="_1qKW">
          <CheckStringStep client="$(client)"
                           component="Debug.tree&amp;/0/2/0/0" id="_1qKX"
                           local="true" notcheck="true" resvarname="res"/>
          <IfSequence id="_1qKY" test="&#34;$(res)&#34; == &#34;true&#34;">
            <BreakStep id="_1qKZ"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1qKa" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/2/0/0"
                       id="_1qKb" regexp="true">
        <text>sharedCode().*</text>
      </CheckStringStep>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/2/0/1"
                       id="_1qKc" regexp="true">
        <text>printProcessInfo().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nme" name="uiOpenDbgCmdShell">
      <variable name="level">4</variable>
      <IfSequence id="_1sVi" test="&#34;$(level)&#34; == &#34;4&#34;">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0/0" event="MOUSE_MPRC"
                        id="_1sVk" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0/0" event="MOUSE_MPRC"
                        id="_1sVl" modifiers="4" popup="true"/>
        <ElseSequence id="_1sVj">
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0" event="MOUSE_MPRC"
                          id="_1sVm" modifiers="16"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0/0/0" event="MOUSE_MPRC"
                          id="_1sVn" modifiers="4" popup="true"/>
        </ElseSequence>
      </IfSequence>
      <SelectionEventStep client="$(client)"
                          component="menu-com.windriver.ide.debug.ui.actions.popup.targetModePopupAction"
                          event="SELECTION" id="_1sVx"/>
      <SelectionEventStep client="$(client)"
                          component="menu-com.windriver.ide.debug.ui.console.attachHostShellAction"
                          event="SELECTION" id="_1nmi"/>
      <WhileSequence id="_1nmj" test="1">
        <TryStep id="_1nmk" name="dbgCmdShell">
          <CheckBooleanStep checktype="visible" client="$(client)"
                            component="Debug_Command_Shell.canvas" id="_1nml"
                            local="true" resvarname="resDbgCmdShell"/>
          <IfSequence id="_1nmm"
                      test="&#34;$(resDbgCmdShell)&#34; == &#34;true&#34;">
            <BreakStep id="_1nmn"/>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1nmo" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </WhileSequence>
      <TryStep id="_1ohL" name="closeModalDialogs">
        <ProcedureCall id="_1ohM"
                       procedure="qfs.cleanup.closeAllModalDialogs">
          <variable name="maxDialogs">5</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1ohN" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1pb2" name="uiOpenDbgShell">
      <variable name="level">4</variable>
      <TryStep id="_1pbH">
        <TimeConstrainedSequence id="_1pbG" timeerror="3" timelimit="60000">
          <IfSequence id="_1sWL" test="&#34;$(level)&#34; == &#34;4&#34;">
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0/0"
                            event="MOUSE_MPRC" id="_1sWM" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)"
                            component="Debug.tree&amp;/0/0/0/0"
                            event="MOUSE_MPRC" id="_1sWN" modifiers="4"
                            popup="true"/>
            <ElseSequence id="_1sWO">
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/0"
                              event="MOUSE_MPRC" id="_1sWP" modifiers="16"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="Debug.tree&amp;/0/0/0"
                              event="MOUSE_MPRC" id="_1sWQ" modifiers="4"
                              popup="true"/>
            </ElseSequence>
          </IfSequence>
          <SelectionEventStep client="$(client)"
                              component="menu-com.windriver.ide.debug.ui.actions.popup.targetModePopupAction"
                              event="SELECTION" id="_1sWR"/>
          <SelectionEventStep client="$(client)"
                              component="menu-com.windriver.ide.debug.ui.console.attachHostShellAction"
                              event="SELECTION" id="_1pb6"/>
          <WhileSequence id="_1pb7" test="1">
            <TryStep id="_1pb8" name="dbgCmdShell">
              <TryStep id="_1sZY" name="clickDebugCmdShellCanvas">
                <MouseEventStep clicks="1" client="$(client)"
                                component="Debug_Command_Shell.canvas"
                                event="MOUSE_MPRC" id="_1sZZ" modifiers="16"
                                x="173" y="85"/>
                <CatchSequence exception="ComponentNotFoundException"
                               id="_1sZa" maxerror="0">
                  <ProcedureCall id="_1sY3" procedure="uiClickDbgCmdShell"/>
                </CatchSequence>
              </TryStep>
              <ProcedureCall id="_1pbI" local="true" procedure="dbgCmdFinish"
                             retvarname="res"/>
              <IfSequence id="_1pbA" test="$(res)">
                <BreakStep id="_1pbB" postdelay="1000"/>
              </IfSequence>
              <CatchSequence exception="TestException" id="_1pbC" maxerror="0"
                             name="ignore"/>
            </TryStep>
          </WhileSequence>
        </TimeConstrainedSequence>
        <CatchSequence exception="CheckFailedException" id="_1pbJ"
                       maxerror="0"/>
      </TryStep>
      <TryStep id="_1pbD" name="closeModalDialogs">
        <ProcedureCall id="_1pbE"
                       procedure="qfs.cleanup.closeAllModalDialogs">
          <variable name="maxDialogs">5</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1pbF" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1qBn" name="uiCloseDbgShell">
      <TryStep id="_1qBo" name="close Debug Command Shell">
        <ProcedureCall id="_1qC2" procedure="qfs.swt.ctabfolder.closeTab">
          <variable name="tabname">Debug Command Shell</variable>
        </ProcedureCall>
        <CatchSequence exception="ComponentNotFoundException" id="_1vFq"
                       maxerror="0"/>
        <CatchSequence exception="TestException" id="_1vFr" maxerror="0"/>
      </TryStep>
      <TryStep id="_1qB-" name="closeModalDialogs">
        <ProcedureCall id="_1qC0"
                       procedure="qfs.cleanup.closeAllModalDialogs">
          <variable name="maxDialogs">5</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1qC1" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1sqW" name="uiShowLineNum">
      <TryStep id="_1via" name="show line number">
        <SelectionEventStep client="$(client)"
                            component="tabfolder-Editor&amp;0"
                            event="SELECTION" id="_1sr4"/>
        <FetchGeometryStep client="$(client)"
                           component="canvas-Editor.canvas2" id="_1n6p"
                           widthvarname="w"/>
        <IfSequence id="_1n6q" test="$(w) &lt; 10">
          <MouseEventStep clicks="1" client="$(client)"
                          component="canvas-Editor.canvas" event="MOUSE_MPRC"
                          id="_1kI8" modifiers="4" popup="true" x="3"
                          y="233"/>
          <SelectionEventStep client="$(client)"
                              component="menu-Linenumbers.Toggle"
                              event="SELECTION" id="_1kI9"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1vib" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1tg4" name="uiCheckModelDialog">
      <TryStep id="_1tgE" name="clickWindow">
        <MouseEventStep clicks="1" client="$(client)"
                        component="WorkbenchWindow" event="MOUSE_MPRC"
                        id="_1tgF" modifiers="1" x="1" y="1"/>
        <CatchSequence exception="ModalDialogException" id="_1tgG"
                       maxerror="0">
          <ProcedureCall id="_1tgJ" procedure="qfs.run-log.logError">
            <variable name="message">unexpected dialog prompt</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1tgH"
                         procedure="qfs.swt.cleanup.closeAllDialogsAndModalShells">
            <variable name="maxDialogs">5</variable>
          </ProcedureCall>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1tgI" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1thE" name="uiCleanModelDialog">
      <TryStep id="_1thF">
        <MouseEventStep clicks="1" client="$(client)"
                        component="WorkbenchWindow" event="MOUSE_MPRC"
                        id="_1thG" modifiers="1" x="1" y="1"/>
        <CatchSequence exception="ModalDialogException" id="_1thH"
                       maxerror="0">
          <ProcedureCall id="_1thI"
                         procedure="qfs.swt.cleanup.closeAllDialogsAndModalShells">
            <variable name="maxDialogs">5</variable>
          </ProcedureCall>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1thJ" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vQf" name="uiSetSash3Width">
      <FetchGeometryStep client="$(client)" component="WorkbenchWindow.sash3"
                         id="_1vQg" xvarname="sash3Width"/>
      <ProcedureCall id="_1vQh" procedure="qfs.swt.sash.moveSash">
        <variable name="id">WorkbenchWindow.sash3</variable>
        <variable name="distance">450-$(sash3Width)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1u8B" name="uiSetSash4Width">
      <FetchGeometryStep client="$(client)" component="WorkbenchWindow.sash4"
                         id="_1u8C" xvarname="sash4Width"/>
      <ProcedureCall id="_1u8D" procedure="qfs.swt.sash.moveSash">
        <variable name="id">WorkbenchWindow.sash4</variable>
        <variable name="distance">1110-$(sash4Width)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1uAF" name="uiSetSash2Height">
      <FetchGeometryStep client="$(client)" component="WorkbenchWindow.sash2"
                         id="_1uAG" yvarname="sash2Height"/>
      <ProcedureCall id="_1uAH" procedure="qfs.swt.sash.moveSash">
        <variable name="id">WorkbenchWindow.sash2</variable>
        <variable name="distance">550-$(sash2Height)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1v6c" name="uiSetSash2HeightDbgCmdShell">
      <FetchGeometryStep client="$(client)" component="WorkbenchWindow.sash2"
                         id="_1v6d" yvarname="sash2Height"/>
      <ProcedureCall id="_1v6e" procedure="qfs.swt.sash.moveSash">
        <variable name="id">WorkbenchWindow.sash2</variable>
        <variable name="distance">260-$(sash2Height)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1vtt" name="uiClosePrjExp">
      <TryStep id="_1vtv" name="close">
        <SelectionEventStep client="$(client)"
                            component="tabfolder-left@Project Explorer"
                            detail="close" event="SELECTION" id="_1vtu"/>
        <CatchSequence exception="TestException" id="_1vtw" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vt+" name="uiOpenOcdPespective">
      <TryStep id="_1vt-" name="select ocd">
        <SelectionEventStep client="$(client)" component="menu-window"
                            event="SELECTION" id="_1vu0"/>
        <SelectionEventStep client="$(client)"
                            component="menu-window-openPerspective"
                            event="SELECTION" id="_1vu1" postdelay="1000"/>
        <SelectionEventStep client="$(client)" component="menuitemOther...3"
                            event="SELECTION" id="_1vu2" postdelay="1000"/>
        <ComponentWaiter client="$(client)"
                         component="SelectPerspectiveDialog" id="_1vu3"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonShow_all" event="MOUSE_MPRC"
                        id="_1vu4" modifiers="16" postdelay="1000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="SelectPerspectiveDialog.table&amp;0&amp;9"
                        event="MOUSE_MPRC" id="_1vu5" modifiers="16"
                        postdelay="1000"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk10"
                        event="MOUSE_MPRC" id="_1vu6" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1vu7" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vSs" name="uiEnableLxDev">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1vSt"/>
      <SelectionEventStep client="$(client)"
                          component="menu-window-preferences"
                          event="SELECTION" id="_1vSu"/>
      <ComponentWaiter client="$(client)"
                       component="WorkbenchPreferenceDialog" id="_1vSv"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WorkbenchPreferenceDialog.tree@/Wind River"
                      event="MOUSE_MPRC" id="_1vSw" modifiers="0"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WorkbenchPreferenceDialog.tree@/Wind River/Capabilities"
                      event="MOUSE_MPRC" id="_1vSx" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WorkbenchPreferenceDialog.tree2@/Development/Develop Linux Applications"
                      event="MOUSE_MPRC" id="_1vSy" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonEnable_All" event="MOUSE_MPRC"
                      id="_1vSz" modifiers="16" postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk30"
                      event="MOUSE_MPRC" id="_1vS+" modifiers="16"/>
    </Procedure>
    <Procedure id="_1nbe" name="bpExp1">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1nfq"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1nfr"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1nfs"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1nft"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1nfu"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1nfv" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1ncd" postdelay="1000">
        <text>mid_stack1</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1nce" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qFa" procedure="uiClickBreakpointView"/>
      <CheckStringStep client="$(client)" component="Breakpoints.tree&amp;/0"
                       id="_1ndS" regexp="true">
        <text>mid_stack1.*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nco" name="bpExp2">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1nfw"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1nfx"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1nfy"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1nfz"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1nf+"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1nf-" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1ncw" postdelay="1000">
        <text>mid_stack2</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1ncx" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qFb" procedure="uiClickBreakpointView"/>
      <CheckStringStep client="$(client)" component="Breakpoints.tree&amp;/1"
                       id="_1ndT" regexp="true">
        <text>mid_stack2.*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1ncy" name="bpExp3">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1ng0"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1ng1"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1ng2"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1ng3"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1ng4"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1ng5" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1nd4" postdelay="1000">
        <text>mid_stack3</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1nd5" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qFc" procedure="uiClickBreakpointView"/>
      <CheckStringStep client="$(client)" component="Breakpoints.tree&amp;/2"
                       id="_1ndU" regexp="true">
        <text>mid_stack3.*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nd6" name="bpExp4">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1ng6"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1ng7"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1ng8"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1ng9"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1ngA"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1ngB" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1ndE" postdelay="1000">
        <text>mid_stack4</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1ndF" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qFd" procedure="uiClickBreakpointView"/>
      <CheckStringStep client="$(client)" component="Breakpoints.tree&amp;/3"
                       id="_1ndV" regexp="true">
        <text>mid_stack4.*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1ndG" name="bpExp5">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1ngC"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1ngD"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1ngE"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1ngF"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1ngG"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1ngH" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1ndO" postdelay="1000">
        <text>mid_stack5</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1ndP" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qFe" procedure="uiClickBreakpointView"/>
      <CheckStringStep client="$(client)" component="Breakpoints.tree&amp;/4"
                       id="_1ndW" regexp="true">
        <text>mid_stack5.*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1ngS" name="bpExpMid5">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1ngT"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1ngU"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1ngV"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1ngW"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1ngX"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1ngY" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1ngZ" postdelay="1000">
        <text>mid_stack5</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1nga" modifiers="16"/>
      <ProcedureCall id="_1qFf" procedure="uiClickBreakpointView"/>
      <CheckStringStep client="$(client)" component="Breakpoints.tree&amp;/0"
                       id="_1ngb" predelay="1000" regexp="true">
        <text>mid_stack5.*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nhU" name="bpExpMid4">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1nhV"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1nhW"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1nhX"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1nhY"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1nhZ"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1nha" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1nhb" postdelay="1000">
        <text>mid_stack4</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1nhc" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qFg" procedure="uiClickBreakpointView"/>
      <CheckStringStep client="$(client)" component="Breakpoints.tree&amp;/0"
                       id="_1nhd" regexp="true">
        <text>mid_stack4.*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1qGO" name="bpExpSharedCode">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1qGP"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1qGQ"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1qGR"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1qGS"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1qGT"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1qGU" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1qGV" postdelay="1000">
        <text>sharedCode</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1qGW" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qGX" postdelay="2000"
                     procedure="uiClickBreakpointView"/>
      <TryStep id="_1qKF">
        <CheckStringStep client="$(client)"
                         component="Breakpoints.tree&amp;/0" id="_1qGY"
                         regexp="true">
          <text>sharedCode.*</text>
        </CheckStringStep>
        <CatchSequence exception="TestException" id="_1qKG" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1qKj" name="bpExpSCode">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1qKk"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1qKl"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1qKm"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1qKn"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1qKo"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1qKp" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1qKq" postdelay="1000">
        <text>sharedCode</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1qKr" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qKs" procedure="uiClickBreakpointView"/>
      <TryStep id="_1qKt">
        <CheckStringStep client="$(client)"
                         component="Breakpoints.tree&amp;/5" id="_1qKu"
                         regexp="true">
          <text>sharedCode.*</text>
        </CheckStringStep>
        <CatchSequence exception="TestException" id="_1qKv" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1qn3" name="bpExpBallMove">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1qn4"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints"
                          event="SELECTION" id="_1qn5"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                          event="SELECTION" id="_1qn6"/>
      <ComponentWaiter client="$(client)"
                       component="ExpressionBreakpointDialog" id="_1qn7"/>
      <SelectionEventStep client="$(client)"
                          component="ExpressionBreakpointDialog.tabbed@General"
                          event="SELECTION" id="_1qn8"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabGeneral2.text" event="MOUSE_MPRC"
                      id="_1qn9" modifiers="16" x="19" y="5"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral2.text" id="_1qnA" postdelay="1000">
        <text>BALL::Move</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                      event="MOUSE_MPRC" id="_1qnB" modifiers="16"
                      postdelay="1000" predelay="1000"/>
      <ProcedureCall id="_1qnC" procedure="uiClickBreakpointView"/>
      <TryStep id="_1qnD">
        <CheckStringStep client="$(client)"
                         component="Breakpoints.tree&amp;/5" id="_1qnE"
                         regexp="true">
          <text>sharedCode.*</text>
        </CheckStringStep>
        <CatchSequence exception="TestException" id="_1qnF" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rbL" name="bpLineAdd">
      <variable name="debuggeeFile"/>
      <variable name="debuggeeLineNum"/>
      <TryStep id="_1rbM">
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run"
                            event="SELECTION" id="_1rbN"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints"
                            event="SELECTION" id="_1rbO"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addLineBreakpointAction"
                            event="SELECTION" id="_1rbP"/>
        <ComponentWaiter client="$(client)" component="LineBreakpointDialog"
                         id="_1rbQ"/>
        <SelectionEventStep client="$(client)"
                            component="LineBreakpointDialog.tabbed@General"
                            event="SELECTION" id="_1rbR"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonFile_System" event="MOUSE_MPRC"
                        id="_1rbS" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tabGeneral.text" event="MOUSE_MPRC"
                        id="_1rbT" modifiers="16" x="21" y="1"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text" id="_1rbU"
                       postdelay="1000">
          <text>$(debuggeeFile)</text>
        </TextInputStep>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text2" id="_1rbV"
                       postdelay="1000">
          <text>$(debuggeeLineNum)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk17"
                        event="MOUSE_MPRC" id="_1rbY" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1rbZ" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1qnm" name="bpLineContinueOnBreakAdd">
      <variable name="debuggeeFile"/>
      <variable name="debuggeeLineNum"/>
      <TryStep id="_1qn-">
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run"
                            event="SELECTION" id="_1qnn"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints"
                            event="SELECTION" id="_1qno"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addLineBreakpointAction"
                            event="SELECTION" id="_1qnp"/>
        <ComponentWaiter client="$(client)" component="LineBreakpointDialog"
                         id="_1qnq"/>
        <SelectionEventStep client="$(client)"
                            component="LineBreakpointDialog.tabbed@General"
                            event="SELECTION" id="_1qnr"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonFile_System" event="MOUSE_MPRC"
                        id="_1qns" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tabGeneral.text" event="MOUSE_MPRC"
                        id="_1qnt" modifiers="16" x="21" y="1"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text" id="_1qnu"
                       postdelay="2000">
          <text>$(debuggeeFile)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tabGeneral.text" event="MOUSE_MPRC"
                        id="_1sNW" modifiers="16" x="21" y="1"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text2" id="_1qnv"
                       postdelay="1000">
          <text>$(debuggeeLineNum)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonContinue_on_Break" event="MOUSE_MPRC"
                        id="_1qnw" modifiers="16" postdelay="1000"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text4" id="_1qnx"
                       postdelay="1000">
          <text>2000</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk17"
                        event="MOUSE_MPRC" id="_1qny" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1qo0" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1roX" name="bpLineTempory">
      <variable name="debuggeeFile"/>
      <variable name="debuggeeLineNum"/>
      <TryStep id="_1roY">
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run"
                            event="SELECTION" id="_1roZ"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints"
                            event="SELECTION" id="_1roa"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addLineBreakpointAction"
                            event="SELECTION" id="_1rob"/>
        <ComponentWaiter client="$(client)" component="LineBreakpointDialog"
                         id="_1roc"/>
        <SelectionEventStep client="$(client)"
                            component="LineBreakpointDialog.tabbed@General"
                            event="SELECTION" id="_1rod"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonFile_System" event="MOUSE_MPRC"
                        id="_1roe" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tabGeneral.text" event="MOUSE_MPRC"
                        id="_1rof" modifiers="16" x="21" y="1"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text" id="_1rog"
                       postdelay="1000">
          <text>$(debuggeeFile)</text>
        </TextInputStep>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text2" id="_1roh"
                       postdelay="1000">
          <text>$(debuggeeLineNum)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonTemporary" event="MOUSE_MPRC"
                        id="_1ror" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk17"
                        event="MOUSE_MPRC" id="_1rok" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1rol" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rp5" name="bpLineCondition">
      <variable name="debuggeeFile"/>
      <variable name="debuggeeLineNum"/>
      <TryStep id="_1rp6">
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run"
                            event="SELECTION" id="_1rp7"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints"
                            event="SELECTION" id="_1rp8"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addLineBreakpointAction"
                            event="SELECTION" id="_1rp9"/>
        <ComponentWaiter client="$(client)" component="LineBreakpointDialog"
                         id="_1rpA"/>
        <SelectionEventStep client="$(client)"
                            component="LineBreakpointDialog.tabbed@General"
                            event="SELECTION" id="_1rpB"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonFile_System" event="MOUSE_MPRC"
                        id="_1rpC" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tabGeneral.text" event="MOUSE_MPRC"
                        id="_1rpD" modifiers="16" x="21" y="1"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text" id="_1rpE"
                       postdelay="1000">
          <text>$(debuggeeFile)</text>
        </TextInputStep>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text2" id="_1rpF"
                       postdelay="1000">
          <text>$(debuggeeLineNum)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonCondition" event="MOUSE_MPRC"
                        id="_1rqS" modifiers="16" postdelay="1000"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text3" id="_1rqZ">
          <text>t==1</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk17"
                        event="MOUSE_MPRC" id="_1rpH" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1rpI" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rrC" name="bpLineSkip">
      <variable name="debuggeeFile"/>
      <variable name="debuggeeLineNum"/>
      <variable name="skipNum"/>
      <TryStep id="_1rrD">
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run"
                            event="SELECTION" id="_1rrE"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints"
                            event="SELECTION" id="_1rrF"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addLineBreakpointAction"
                            event="SELECTION" id="_1rrG"/>
        <ComponentWaiter client="$(client)" component="LineBreakpointDialog"
                         id="_1rrH"/>
        <SelectionEventStep client="$(client)"
                            component="LineBreakpointDialog.tabbed@General"
                            event="SELECTION" id="_1rrI"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonFile_System" event="MOUSE_MPRC"
                        id="_1rrJ" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tabGeneral.text" event="MOUSE_MPRC"
                        id="_1rrK" modifiers="16" x="21" y="1"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text" id="_1rrL"
                       postdelay="1000">
          <text>$(debuggeeFile)</text>
        </TextInputStep>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text2" id="_1rrM"
                       postdelay="1000">
          <text>$(debuggeeLineNum)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonSkip_Count" event="MOUSE_MPRC"
                        id="_1rrt" modifiers="16" postdelay="1000"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral.text5" id="_1rru">
          <text>$(skipNum)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk17"
                        event="MOUSE_MPRC" id="_1rrP" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1rrQ" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1nYf" name="bpGutter">
      <variable name="lineNum">-1</variable>
      <variable name="keyword">copy_process</variable>
      <variable name="characteristic">['','tidptr']</variable>
      <comment>@lineNum	-1/&lt;line number&gt;
	-1: Not specify the line number, use keyword to find the line.
    &lt;line number&gt;: the available line number, like 1, 2, 10..., if specified the next two parameters will be ignored

@keyword	&lt;keyword&gt;

@characteristic ['&lt;first keyword&gt;','&lt;second keyword&gt;']
	&lt;first keyword&gt;: suppose the &lt;keyword&gt; exists in line A, the &lt;first keyword&gt; is a keyword should exist in the line BEFORE line A
                          &lt;second keyword&gt;: suppose the &lt;keyword&gt; exists in line A, the &lt;second keyword&gt; is a keyword should exist in the line AFTER line A
	if it is a empty line, please use ''</comment>
      <IfSequence id="_1nea" name="Not specify the line number"
                  test="$(lineNum) == -1">
        <ClientScriptStep client="$(client)" id="_1neb"
                          name="Find the line number of the Keyword">
          <code>import re

#get org.eclipse.swt.custom.StyledText component
comp = rc.getComponent("canvas-Editor.text")

#get max line index
maxIdx = comp.getLineCount()-1

lines = []

#get all the lines from the text editor
idx = 0
while idx &lt;= maxIdx:
	line = comp.getLine(idx)
	lines.append(line)
	idx+=1

#travel to find the keyword and check the characteristic
keyword = rc.lookup("keyword")
characteristic = rc.lookup("characteristic")

#covert string to list
characteristic = eval(characteristic)

#find the line
idx = 0
found = -1
while idx &lt;= maxIdx:
	#if the keyword found, the current line is keyLine
	if re.search(keyword, lines[idx]) != None:
		#must have two characteristics
		if len(characteristic) == 2:
			# if the first characteristic found in the line before the keyLine and \
			#    the second characteristic found in the line after the keyLine, \
			# then the keyLine is the line which we are looking for.
			if re.search(characteristic[0], lines[idx-1]) == None or re.search(characteristic[1], lines[idx+1]) == None:
				idx+=1
				continue
		found = idx
		break
	idx+=1

rc.setLocal("lineIdx", found)
</code>
        </ClientScriptStep>
        <IfSequence id="_1nTm" name="Found the line" test="$(lineIdx) != -1">
          <MouseEventStep clicks="1" client="$(client)"
                          component="canvas-Editor.text&amp;$(lineIdx)"
                          event="MOUSE_MPRC" id="_1nTo" modifiers="16"/>
          <ClientScriptStep client="$(client)" id="_1ubf"
                            name="Get the caret offset from canvas">
            <code>#get component object
comp = rc.getComponent("canvas-Editor.text")

#get offset from canvas and set the value to local variable y_cvs
rc.setLocal("y_cvs",comp.getCaret().getLocation().y+1)
</code>
          </ClientScriptStep>
          <MouseEventStep clicks="2" client="$(client)"
                          component="canvas-Editor.canvas" event="MOUSE_MPRC"
                          id="_1neS" modifiers="16" x="4" y="$(y_cvs)"/>
          <ElseSequence id="_1nel" name="Not find the line">
            <ThrowStep id="_1nek" throwmessage="The keyword not found!"/>
          </ElseSequence>
        </IfSequence>
        <ElseSequence id="_1nem" name="Specified the line number">
          <ClientScriptStep client="$(client)" id="_1nei"
                            name="Get the max line number">
            <code>#get org.eclipse.swt.custom.StyledText component
comp = rc.getComponent("canvas-Editor.text")

#get max line number
maxLineNumber = comp.getLineCount()

rc.setGlobal("maxLineNumber",maxLineNumber)</code>
          </ClientScriptStep>
          <IfSequence id="_1neg" name="Check if the line number is available"
                      test="$(lineNum) &gt; $(maxLineNumber) or $(lineNum) &lt;= 0">
            <ThrowStep id="_1nej"
                       throwmessage="The line number is not available"/>
            <ElseSequence id="_1neh" name="The line number is available">
              <SetGlobalStep id="_1ned" local="true" varname="lineIdx">
                <default>$[$(lineNum)-1]</default>
              </SetGlobalStep>
              <MouseEventStep clicks="1" client="$(client)"
                              component="canvas-Editor.text&amp;$(lineIdx)"
                              event="MOUSE_MPRC" id="_1nec" modifiers="16"/>
              <ClientScriptStep client="$(client)" id="_1nen"
                                name="Get the caret offset from canvas">
                <code>#get component object
comp = rc.getComponent("canvas-Editor.text")

#get offset from canvas and set the value to local variable y_cvs
rc.setLocal("y_cvs",comp.getCaret().getLocation().y+1)
</code>
              </ClientScriptStep>
              <MouseEventStep clicks="2" client="$(client)"
                              component="canvas-Editor.canvas"
                              event="MOUSE_MPRC" id="_1nef" modifiers="16"
                              x="4" y="$(y_cvs)"/>
            </ElseSequence>
          </IfSequence>
        </ElseSequence>
      </IfSequence>
    </Procedure>
    <Procedure id="_1qo3" name="bpExpAdd">
      <variable name="expressionBp">$(expBp)</variable>
      <TryStep id="_1qyH">
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run"
                            event="SELECTION" id="_1qo4"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints"
                            event="SELECTION" id="_1qo5"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                            event="SELECTION" id="_1qo6"/>
        <ComponentWaiter client="$(client)"
                         component="ExpressionBreakpointDialog" id="_1qo7"/>
        <SelectionEventStep client="$(client)"
                            component="ExpressionBreakpointDialog.tabbed@General"
                            event="SELECTION" id="_1qo8"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tabGeneral2.text" event="MOUSE_MPRC"
                        id="_1qo9" modifiers="16" x="19" y="5"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral2.text" id="_1qoA"
                       postdelay="1000">
          <text>$(expressionBp)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                        event="MOUSE_MPRC" id="_1qoB" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1qyI" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rtM" name="bpExpProlog">
      <variable name="expressionBp"/>
      <TryStep id="_1rtN">
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run"
                            event="SELECTION" id="_1rtO"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints"
                            event="SELECTION" id="_1rtP"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                            event="SELECTION" id="_1rtQ"/>
        <TryStep id="_1u92">
          <ComponentWaiter client="$(client)"
                           component="ExpressionBreakpointDialog" id="_1rtR"
                           timeout="5000"/>
          <CatchSequence exception="ComponentNotFoundException" id="_1u93"
                         maxerror="2">
            <ProcedureCall id="_1u94"
                           procedure="qfs.utils.testrun.skip.skipTestCase"/>
          </CatchSequence>
        </TryStep>
        <SelectionEventStep client="$(client)"
                            component="ExpressionBreakpointDialog.tabbed@General"
                            event="SELECTION" id="_1rtS"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tabGeneral2.text" event="MOUSE_MPRC"
                        id="_1rtT" modifiers="16" x="19" y="5"/>
        <TextInputStep clear="true" client="$(client)"
                       component="tabGeneral2.text" id="_1rtU"
                       postdelay="1000">
          <text>$(expressionBp)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonBreak_at_function_prolog"
                        event="MOUSE_MPRC" id="_1rti" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk11"
                        event="MOUSE_MPRC" id="_1rtV" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1rtW" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1srH" name="dpLineAdd">
      <variable name="lineNum">$(lineNum)</variable>
      <variable name="variable">num_hard</variable>
      <variable name="dp_condition">false</variable>
      <variable name="dp_skip">false</variable>
      <KeyEventStep client="$(client)" component="canvas-Editor.text"
                    event="KEY_PTR" id="_1srN" keychar="4" keycode="68"
                    modifiers="3"/>
      <TryStep id="_1srb" name="dpDialog">
        <ComponentWaiter client="$(client)"
                         component="LineDynamicPrintfDialog" id="_1srP"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1src"
                       maxerror="2">
          <ReturnStep id="_1sre" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1srd" maxerror="0"/>
      </TryStep>
      <SelectionEventStep client="$(client)"
                          component="LineDynamicPrintfDialog.tabbed@General"
                          event="SELECTION" id="_1srQ" postdelay="2000"/>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral3.text2" id="_1srk"
                     postdelay="2000">
        <text>$(lineNum)</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="tabGeneral3.text" id="_1srR" postdelay="2000">
        <text>"$(variable)=%d\n",$(variable)</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonVerbose_Mode" event="MOUSE_MPRC"
                      id="_1srX" modifiers="16"/>
      <IfSequence id="_1sru" test="$(dp_condition)">
        <TryStep id="_1ss0" name="condition">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCondition2" event="MOUSE_MPRC"
                          id="_1srs" modifiers="16" postdelay="2000"/>
          <TextInputStep clear="true" client="$(client)"
                         component="tabGeneral3.text3" id="_1srz"
                         postdelay="2000">
            <text>$(condition_value)</text>
          </TextInputStep>
          <CatchSequence exception="TestException" id="_1ss6" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </IfSequence>
      <IfSequence id="_1ss1" test="$(dp_skip)">
        <TryStep id="_1ss2" name="skip">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonSkip_Count2" event="MOUSE_MPRC"
                          id="_1srt" modifiers="16" postdelay="2000"/>
          <TextInputStep clear="true" client="$(client)"
                         component="tabGeneral3.text4" id="_1ss4"
                         postdelay="2000">
            <text>$(skip_value)</text>
          </TextInputStep>
          <CatchSequence exception="TestException" id="_1ss7" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </IfSequence>
      <TryStep id="_1ss8" name="finish">
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk4"
                        event="MOUSE_MPRC" id="_1srY" modifiers="16"
                        postdelay="2000"/>
        <CatchSequence exception="DisabledComponentException" id="_1ss9"
                       maxerror="0">
          <ReturnStep id="_1ssA" retval="false"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1ssB" maxerror="0">
          <ReturnStep id="_1ssC" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1ssD" retval="true"/>
    </Procedure>
    <Procedure id="_1nWZ" name="dbgTerminateFirst">
      <TryStep id="_1o9H">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0" event="MOUSE_MPRC"
                        id="_1nWa" modifiers="16" postdelay="2000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.terminate"
                        event="MOUSE_MPRC" id="_1nWb" modifiers="16"
                        postdelay="2000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.removeAllTerminated"
                        event="MOUSE_MPRC" id="_1nWe" modifiers="16"
                        postdelay="2000"/>
        <CatchSequence exception="TestException" id="_1o9I" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1qL3" name="dbgViewClearTerminate">
      <ProcedureCall id="_1qL9" local="true"
                     procedure="qfs.swt.tree.getRowCount"
                     retvarname="nr_dbg_view">
        <variable name="id">Debug.tree</variable>
      </ProcedureCall>
      <RepeatSequence count="$(nr_dbg_view)" id="_1qLD">
        <TryStep id="_1qL4">
          <MouseEventStep clicks="1" client="$(client)"
                          component="Debug.tree&amp;/0" event="MOUSE_MPRC"
                          id="_1qL5" modifiers="16" postdelay="2000"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="tool-org.eclipse.debug.ui.debugview.toolbar.terminate"
                          event="MOUSE_MPRC" id="_1qL6" modifiers="16"
                          postdelay="2000"/>
          <MouseEventStep clicks="1" client="$(client)"
                          component="tool-org.eclipse.debug.ui.debugview.toolbar.removeAllTerminated"
                          event="MOUSE_MPRC" id="_1qLE" modifiers="16"
                          postdelay="2000"/>
          <CatchSequence exception="TestException" id="_1qL8" maxerror="0"
                         name="ignore"/>
        </TryStep>
      </RepeatSequence>
      <TryStep id="_1qLF">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.removeAllTerminated"
                        event="MOUSE_MPRC" id="_1qLI" modifiers="16"
                        postdelay="2000"/>
        <CatchSequence exception="TestException" id="_1qLJ" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1tfl" name="dbgVxKernelMthreadStop" postdelay="2000">
      <variable name="vxName">$(conName)</variable>
      <TryStep id="_1tf+" name="stopAtMain">
        <ProcedureCall id="_1tf-" local="true" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode"
                       retvarname="select1">
          <variable name="id">Debug.tree%/.*$(vxName).*/sys-000.*/.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ProcedureCall id="_1tgP" local="true" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode"
                       retvarname="select1">
          <variable name="id">Debug.tree%/.*$(vxName).*/sys-000.*/yzhang0 main.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ProcedureCall id="_1tg0" local="true" postdelay="1000"
                       procedure="qfs.swt.tree.selectNode"
                       retvarname="select2">
          <variable name="id">Debug.tree%/mthread.*$(vxName).*/sys-000.*/yzhang0 main.*/mthread.*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1tg2"
                       maxerror="0" name="ignore">
          <ProcedureCall id="_1vQ2" procedure="qfs.run-log.logError">
            <variable name="message">kernel Task Launch failed</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ReturnStep id="_1tgL" retval="false"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1tfz" retval="true"/>
    </Procedure>
    <Procedure id="_1trT" name="dbgVxRtpStop" postdelay="2000">
      <variable name="vxName">$(conName)</variable>
      <variable name="rtpVxe">$(mthreadVxe)</variable>
      <TryStep id="_1trU" name="stopAtMain">
        <ComponentWaiter client="$(client)"
                         component="Debug.tree%/$(rtpVxe).*$(vxName).*"
                         id="_1trk"/>
        <ProcedureCall id="_1trV" local="true"
                       procedure="qfs.swt.tree.expandNode"
                       retvarname="select1">
          <variable name="id">Debug.tree%/$(rtpVxe).*$(vxName).*</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0"
                         id="_1tro"/>
        <ProcedureCall id="_1trn" local="true"
                       procedure="qfs.swt.tree.expandNode"
                       retvarname="select1">
          <variable name="id">Debug.tree&amp;/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ComponentWaiter client="$(client)" component="Debug.tree&amp;/0/0/0"
                         id="_1trp"/>
        <ProcedureCall id="_1trq" local="true"
                       procedure="qfs.swt.tree.expandNode"
                       retvarname="select1">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ComponentWaiter client="$(client)"
                         component="Debug.tree&amp;/0/0/0/0" id="_1trr"/>
        <ProcedureCall id="_1trX" local="true" postdelay="4000"
                       procedure="qfs.swt.tree.selectNode"
                       retvarname="select2">
          <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        </ProcedureCall>
        <CatchSequence exception="IndexNotFoundException" id="_1trY"
                       maxerror="0" name="ignore">
          <ReturnStep id="_1trZ" retval="false"/>
        </CatchSequence>
      </TryStep>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1tra" local="true" regexp="true">
        <text>main.*</text>
      </CheckStringStep>
      <ReturnStep id="_1trb" retval="true"/>
    </Procedure>
    <Procedure id="_1vhe" name="dbgGetAppName" postdelay="2000">
      <variable name="idx">0</variable>
      <TryStep id="_1vhf" name="get index name">
        <ProcedureCall id="_1vhs" local="true"
                       procedure="qfs.swt.tree.getValueOfNode"
                       retvarname="nodeName">
          <variable name="id">Debug.tree</variable>
          <variable name="node">$(idx)</variable>
          <variable name="nodeSeparator">&amp;</variable>
        </ProcedureCall>
        <ServerScriptStep id="_1vhu">
          <code>import os

name = '$(nodeName)'
name = name.split(' ')[0]

index = name.find('.')
if index &gt; 0:
    oldName = name[0:index]
else:
    oldName = name

oldName.rstrip(' ')
rc.setLocal('dbgName',oldName)</code>
        </ServerScriptStep>
        <CatchSequence exception="IndexNotFoundException" id="_1vho"
                       maxerror="0" name="ignore">
          <ReturnStep id="_1vhp" retval="None"/>
        </CatchSequence>
      </TryStep>
      <ReturnStep id="_1vhr" retval="$(dbgName)"/>
    </Procedure>
    <Procedure id="_1nZu" name="dbgStopAtMain" postdelay="2000">
      <TryStep id="_1ohO">
        <TimeConstrainedSequence id="_1ohP" timelimit="180000">
          <WhileSequence id="_1nw9" test="1">
            <TryStep id="_1ns4" name="stopAtMain">
              <ProcedureCall id="_1nx-" local="true"
                             procedure="qfs.swt.tree.expandNode"
                             retvarname="select1">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <ProcedureCall id="_1nZy" local="true"
                             procedure="qfs.swt.tree.selectNode"
                             retvarname="select2">
                <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <BreakStep id="_1ns9"/>
              <CatchSequence exception="IndexNotFoundException" id="_1ns5"
                             maxerror="0" name="ignore"/>
            </TryStep>
          </WhileSequence>
        </TimeConstrainedSequence>
        <CatchSequence exception="CheckFailedException" id="_1ohQ"
                       maxerror="0">
          <ProcedureCall id="_1ohR" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to make the launched debuggee stopped at main</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1ohS"
                         procedure="qfs.utils.testrun.skip.skipTestCase"/>
          <BreakStep id="_1ohT"/>
        </CatchSequence>
      </TryStep>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1nZv" local="true" regexp="true"
                       resvarname="stopAtMain">
        <text>main().*</text>
      </CheckStringStep>
      <ReturnStep id="_1nsD" retval="$(stopAtMain)"/>
    </Procedure>
    <Procedure id="_1oho" name="dbgAttachMain" postdelay="2000">
      <TryStep id="_1ohp">
        <TimeConstrainedSequence id="_1ohq" timelimit="180000">
          <WhileSequence id="_1ohr" test="1">
            <TryStep id="_1ohs" name="stopAtMain">
              <ProcedureCall id="_1oht" local="true"
                             procedure="qfs.swt.tree.expandNode"
                             retvarname="select1">
                <variable name="id">Debug.tree&amp;/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <ProcedureCall id="_1ohu" local="true"
                             procedure="qfs.swt.tree.selectNode"
                             retvarname="select2">
                <variable name="id">Debug.tree&amp;/0/0/0</variable>
                <variable name="node">0</variable>
                <variable name="separator">&amp;</variable>
              </ProcedureCall>
              <BreakStep id="_1ohv"/>
              <CatchSequence exception="IndexNotFoundException" id="_1ohw"
                             maxerror="0" name="ignore"/>
            </TryStep>
          </WhileSequence>
        </TimeConstrainedSequence>
        <CatchSequence exception="CheckFailedException" id="_1ohx"
                       maxerror="0">
          <ProcedureCall id="_1ohy" procedure="qfs.run-log.logError">
            <variable name="message">wdm failed to make the launched debuggee stopped at main</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
          <ProcedureCall id="_1ohz"
                         procedure="qfs.utils.testrun.skip.skipTestCase"/>
          <BreakStep id="_1oh+"/>
        </CatchSequence>
      </TryStep>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0"
                       id="_1oh-" local="true" regexp="true"
                       resvarname="attachSuccess">
        <text>yzhang0.*</text>
      </CheckStringStep>
      <ReturnStep id="_1oi0" retval="$(attachSuccess)"/>
    </Procedure>
    <Procedure id="_1nZM" name="dbgSymbol">
      <ProcedureCall id="_1nZN" procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <ProcedureCall id="_1nZO" procedure="qfs.swt.tree.selectNode">
        <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug.tree&amp;/0/0/0/0" event="MOUSE_MPRC"
                      id="_1nZP" modifiers="16"/>
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1nZQ"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1nZR"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemDebug_Symbol_Browser"
                          event="SELECTION" id="_1nZS"/>
      <SelectionEventStep client="$(client)"
                          component="tabfolder-Remote_Systems@Debug Symbol Browser"
                          event="SELECTION" id="_1nZT"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.text" event="MOUSE_MPRC"
                      id="_1nZU" modifiers="16" x="26" y="11"/>
      <TextInputStep clear="true" client="$(client)"
                     component="Debug_Symbol_Browser.text" id="_1nZV"
                     postdelay="2000">
        <text>mid_stack</text>
      </TextInputStep>
      <ProcedureCall id="_1o6O"
                     procedure="qfs.swt.table.checks.checkNumberOfRows">
        <variable name="id">Debug_Symbol_Browser.table</variable>
        <variable name="compareValue">5</variable>
        <variable name="compareMode">=</variable>
        <variable name="errorLevel">ERROR</variable>
        <variable name="appearInReport">1</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;0"
                      event="MOUSE_MPRC" id="_1nZW" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;1"
                      event="MOUSE_MPRC" id="_1nZX" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;2"
                      event="MOUSE_MPRC" id="_1nZY" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;3"
                      event="MOUSE_MPRC" id="_1nZZ" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;4"
                      event="MOUSE_MPRC" id="_1nZa" modifiers="16"/>
    </Procedure>
    <Procedure id="_1oZC" name="dbgAttachMainAndThreads" postdelay="2000">
      <WhileSequence id="_1oZD" test="1">
        <TryStep id="_1oZE" name="attachAtMain">
          <ProcedureCall id="_1oZG" local="true"
                         procedure="qfs.swt.tree.selectNode"
                         retvarname="select0">
            <variable name="id">Debug.tree&amp;/0/0</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <ProcedureCall id="_1oZL" local="true"
                         procedure="qfs.swt.tree.expandNode"
                         retvarname="select1">
            <variable name="id">Debug.tree&amp;/0/0</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <ProcedureCall id="_1oZM" local="true"
                         procedure="qfs.swt.tree.selectNode"
                         retvarname="select2">
            <variable name="id">Debug.tree&amp;/0/0/0</variable>
            <variable name="node"/>
            <variable name="separator"/>
          </ProcedureCall>
          <BreakStep id="_1oZH"/>
          <CatchSequence exception="IndexNotFoundException" id="_1oZI"
                         maxerror="0" name="ignore"/>
        </TryStep>
      </WhileSequence>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0"
                       id="_1oZJ" local="true" regexp="true"
                       resvarname="attachSuccess">
        <text>yzhang0.*</text>
      </CheckStringStep>
      <ReturnStep id="_1oZK" retval="$(attachSuccess)"/>
    </Procedure>
    <Procedure id="_1oZU" name="dbgMainAndThreadsCheck" postdelay="2000">
      <ProcedureCall id="_1oZi" local="true"
                     procedure="qfs.swt.tree.selectNode" retvarname="select2">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node"/>
        <variable name="separator"/>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0"
                       id="_1oZk" local="true" regexp="true"
                       resvarname="attachSuccess">
        <text>yzhang0 main.*</text>
      </CheckStringStep>
      <ProcedureCall id="_1oZl" local="true"
                     procedure="qfs.swt.tree.selectNode" retvarname="select2">
        <variable name="id">Debug.tree&amp;/0/0/1</variable>
        <variable name="node"/>
        <variable name="separator"/>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/1"
                       id="_1oZm" local="true" regexp="true"
                       resvarname="attachSuccess">
        <text>yzhang0 Task.*</text>
      </CheckStringStep>
      <ProcedureCall id="_1oZn" local="true"
                     procedure="qfs.swt.tree.selectNode" retvarname="select2">
        <variable name="id">Debug.tree&amp;/0/0/2</variable>
        <variable name="node"/>
        <variable name="separator"/>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/2"
                       id="_1oZo" local="true" regexp="true"
                       resvarname="attachSuccess">
        <text>yzhang0 Task.*</text>
      </CheckStringStep>
      <ProcedureCall id="_1oZp" local="true"
                     procedure="qfs.swt.tree.selectNode" retvarname="select2">
        <variable name="id">Debug.tree&amp;/0/0/3</variable>
        <variable name="node"/>
        <variable name="separator"/>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/3"
                       id="_1oZq" local="true" regexp="true"
                       resvarname="attachSuccess">
        <text>yzhang0 alone.*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1naP" name="dbgCheck5">
      <FetchTextStep client="$(client)" component="canvas-Editor.text&amp;690"
                     id="_1naQ" local="true" predelay="2000" varname="code"/>
      <CheckStringStep client="$(client)"
                       component="canvas-Editor.text&amp;690" id="_1vqh"
                       predelay="2000">
        <text>void mid_stack5 (REC_TYPE1 *p_q, REC_TYPE2 *p_rectest, INNER_STRUCT_TYPE1 *p_s1) {</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1naR" name="dbgCheck1">
      <FetchTextStep client="$(client)" component="canvas-Editor.text&amp;40"
                     id="_1naS" local="true" varname="code"/>
      <CheckStringStep client="$(client)"
                       component="canvas-Editor.text&amp;40" id="_1vqi">
        <text>void mid_stack1 ( ) {</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1rba" name="dbgViewResume">
      <TryStep id="_1rbk">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                        event="MOUSE_MPRC" id="_1rbp" modifiers="16"
                        postdelay="2000"/>
        <CatchSequence exception="DisabledComponentException" id="_1rbo"
                       maxerror="2">
          <comment>can not resume debuggee!!</comment>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rbq" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rd2" name="dbgViewSuspend">
      <TryStep id="_1rd3">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.suspend"
                        event="MOUSE_MPRC" id="_1rd7" modifiers="16"/>
        <CatchSequence exception="DisabledComponentException" id="_1rd5"
                       maxerror="2">
          <comment>can not suspend debuggee!!</comment>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rd6" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rhF" name="dbgViewStepOver">
      <TryStep id="_1rhG">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.stepOver"
                        event="MOUSE_MPRC" id="_1rhQ" modifiers="16"/>
        <CatchSequence exception="DisabledComponentException" id="_1rhI"
                       maxerror="2">
          <comment>can not suspend debuggee!!</comment>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rhJ" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rhS" name="dbgViewStepInto">
      <TryStep id="_1rhT">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.stepInto"
                        event="MOUSE_MPRC" id="_1rhV" modifiers="16"/>
        <CatchSequence exception="DisabledComponentException" id="_1rhY"
                       maxerror="2">
          <comment>can not suspend debuggee!!</comment>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rhZ" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1rha" name="dbgViewStepReturn">
      <TryStep id="_1rhb">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.debugview.toolbar.stepReturn"
                        event="MOUSE_MPRC" id="_1rhf" modifiers="16"/>
        <CatchSequence exception="DisabledComponentException" id="_1rhg"
                       maxerror="2">
          <comment>can not suspend debuggee!!</comment>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1rhh" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1nkO" name="dbgViewTerminateRelaunch">
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug.tree&amp;/0" event="MOUSE_MPRC"
                      id="_1nkP" modifiers="4" popup="true"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.debug.ui.debugview.popupMenu.TerminateAndRelaunch"
                          event="SELECTION" id="_1nkR" postdelay="2000"/>
      <TryStep id="_1nkS">
        <ComponentWaiter client="$(client)"
                         component="BreakpointStatusMonitor__StatusDialog"
                         id="_1nkT" local="true" resvarname="resBpStatus"/>
        <IfSequence id="_1nkU" test="$(resBpStatus)">
          <MouseEventStep clicks="1" client="$(client)" component="buttonOk5"
                          event="MOUSE_MPRC" id="_1nkV" modifiers="16"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1nkW" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1q4P" name="symbolEmpty">
      <comment>debug symbol browser for "mid_stack"</comment>
      <ProcedureCall id="_1vim" procedure="uiClickDebugSymbolBrowser"/>
      <TryStep id="_1vWl" name="empty symbol browser">
        <TextInputStep clear="true" client="$(client)"
                       component="Debug_Symbol_Browser.text" id="_1vik"
                       postdelay="2000" single="false">
          <text> </text>
        </TextInputStep>
        <KeyEventStep client="$(client)" component="Debug_Symbol_Browser.text"
                      event="KEY_PTR" id="_1vil" keychar="8" keycode="8"
                      modifiers="0" postdelay="2000"/>
        <CheckBooleanStep checktype="selected" client="$(client)"
                          component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                          id="_1vin" local="true" resvarname="selected"/>
        <IfSequence id="_1vio" test="not $(selected)">
          <MouseEventStep clicks="1" client="$(client)"
                          component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                          event="MOUSE_MPRC" id="_1vip" modifiers="16"
                          postdelay="1000"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1vWm" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vic" name="symbolCheckDisassembly">
      <variable name="idx">$(idx)</variable>
      <comment>debug symbol browser for "mid_stack"</comment>
      <TryStep id="_1vid" name="show symbol in disassembly ">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature&amp;$(idx)"
                        event="MOUSE_MPRC" id="_1vie" modifiers="16"/>
        <ProcedureCall id="_1vif" local="true"
                       procedure="qfs.swt.table.getValueOfCell"
                       retvarname="checkStr">
          <variable name="id">Debug_Symbol_Browser.table</variable>
          <variable name="column">Signature</variable>
          <variable name="row">$(idx)</variable>
          <variable name="columnSeparator">@</variable>
          <variable name="rowSeparator">&amp;</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature&amp;$(idx)"
                        event="MOUSE_MPRC" id="_1vig" modifiers="4"
                        popup="true" postdelay="1000"/>
        <SelectionEventStep client="$(client)"
                            component="menuitemShow_Disassembly"
                            event="SELECTION" id="_1vih" postdelay="2000"/>
        <ClientScriptStep client="$(client)" engine="swt" id="_1vii">
          <code>import re

# get component
comp = rc.getComponent("canvas-Editor.text")
#line = comp.getLineAtOffset(0)
#print line
#line = comp.getLine()
#print line

# get editable
#if not comp.getEditable():
    #rc.check(1 == 0, "can not open disassembly view",report=True,nowrap=False)

selection = comp.getSelectionText()
shell = comp.getShell()

maxIdx = comp.getLineCount() - 1
idx = 0
checkStr = re.compile('$(checkStr)')
while idx &lt;= maxIdx:
    line = comp.getLine(idx)
    idx += 1
    m = checkStr.search(line)
    if m != None:
        break
    else:
        continue

if idx &gt;= maxIdx:
    rc.check(1 == 0, "can not find the symbol in disassembly view",report=True,nowrap=False)




</code>
        </ClientScriptStep>
        <CatchSequence exception="TestException" id="_1vij" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vWx" name="symbolCheckSrc">
      <variable name="idx">0</variable>
      <variable name="sbl">mid_stack</variable>
      <comment>debug symbol browser for "mid_stack"</comment>
      <TryStep id="_1vWy" name="show symbol in source view">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%$(sbl)$(idx)"
                        event="MOUSE_MPRC" id="_1vWz" modifiers="16"/>
        <ProcedureCall id="_1vW+" local="true"
                       procedure="qfs.swt.table.getValueOfCell"
                       retvarname="checkStr">
          <variable name="id">Debug_Symbol_Browser.table</variable>
          <variable name="column">Signature</variable>
          <variable name="row">$(sbl)$(idx)</variable>
          <variable name="columnSeparator">@</variable>
          <variable name="rowSeparator">%</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%$(sbl)$(idx)"
                        event="MOUSE_MPRC" id="_1vW-" modifiers="4"
                        popup="true" postdelay="1000"/>
        <SelectionEventStep client="$(client)"
                            component="menuitemShow_Declaration"
                            event="SELECTION" id="_1vX4" postdelay="2000"/>
        <ClientScriptStep client="$(client)" engine="swt" id="_1vX1">
          <code>import re

# get component
comp = rc.getComponent("canvas-Editor.text")

selection = comp.getSelectionText()

checkStr = re.compile('$(checkStr)')
m = checkStr.search(selection)
if not m:
    rc.check(1 == 0, "can not find the symbol in disassembly view",report=True,nowrap=False)






</code>
        </ClientScriptStep>
        <SelectionEventStep client="$(client)"
                            component="menuitemShow_Disassembly"
                            disabled="true" event="SELECTION" id="_1vX0"
                            postdelay="2000"/>
        <CatchSequence exception="TestException" id="_1vX2" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1viu" name="symbolToggleBp">
      <variable name="idx">0</variable>
      <variable name="sbl">mid_stack</variable>
      <comment>debug symbol browser for "mid_stack"</comment>
      <TryStep id="_1viv" name="toggle breakpoint">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%$(sbl)$(idx)"
                        event="MOUSE_MPRC" id="_1viw" modifiers="16"/>
        <ProcedureCall id="_1vix" local="true"
                       procedure="qfs.swt.table.getValueOfCell"
                       retvarname="checkStr">
          <variable name="id">Debug_Symbol_Browser.table</variable>
          <variable name="column">Signature</variable>
          <variable name="row">$(sbl)$(idx)</variable>
          <variable name="columnSeparator">@</variable>
          <variable name="rowSeparator">%</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%$(sbl)$(idx)"
                        event="MOUSE_MPRC" id="_1viy" modifiers="4"
                        popup="true" postdelay="1000"/>
        <SelectionEventStep client="$(client)"
                            component="menuitemToggle_Breakpoint"
                            event="SELECTION" id="_1vj8" postdelay="2000"/>
        <SelectionEventStep client="$(client)"
                            component="menuitemShow_Disassembly"
                            disabled="true" event="SELECTION" id="_1vi-"
                            postdelay="2000"/>
        <CatchSequence exception="TestException" id="_1vj0" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vXs" name="symbolAddExp">
      <variable name="idx">$(idx)</variable>
      <comment>debug symbol browser for "mid_stack"</comment>
      <TryStep id="_1vXt" name="add symbol in expression view">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%counter$(idx)"
                        event="MOUSE_MPRC" id="_1vXu" modifiers="16"/>
        <ProcedureCall id="_1vXv" local="true"
                       procedure="qfs.swt.table.getValueOfCell"
                       retvarname="checkStr">
          <variable name="id">Debug_Symbol_Browser.table</variable>
          <variable name="column">Signature</variable>
          <variable name="row">1</variable>
          <variable name="columnSeparator">@</variable>
          <variable name="rowSeparator">&amp;</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%counter$(idx)"
                        event="MOUSE_MPRC" id="_1vXw" modifiers="4"
                        popup="true" postdelay="1000"/>
        <SelectionEventStep client="$(client)"
                            component="menuitemAdd_to_Expressions"
                            event="SELECTION" id="_1vY3" postdelay="2000"/>
        <ProcedureCall id="_1vY7" procedure="uiClickExpressionView"/>
        <CheckStringStep client="$(client)"
                         component="Expressions.tree@Expression%$(idx)"
                         id="_1vY6">
          <text>$(checkStr)</text>
        </CheckStringStep>
        <CatchSequence exception="TestException" id="_1vX+" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vWC" name="symbolVip">
      <comment>debug symbol browser for "mid_stack"</comment>
      <TryStep id="_1vWD" name="select debuggee in debug view">
        <ProcedureCall id="_1vWE" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1vWF" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0/0" event="MOUSE_MPRC"
                        id="_1vWG" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1vWH" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <ProcedureCall id="_1vWI" procedure="uiClickDebugSymbolBrowser"/>
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        id="_1vYN" local="true" resvarname="selected"/>
      <IfSequence id="_1vYO" test="not $(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        event="MOUSE_MPRC" id="_1vYP" modifiers="16"
                        postdelay="1000"/>
      </IfSequence>
      <TextInputStep clear="true" client="$(client)"
                     component="Debug_Symbol_Browser.text" id="_1vWJ"
                     postdelay="2000" single="false">
        <text> </text>
      </TextInputStep>
      <KeyEventStep client="$(client)" component="Debug_Symbol_Browser.text"
                    event="KEY_PTR" id="_1vWK" keychar="8" keycode="8"
                    modifiers="0" postdelay="2000"/>
      <ProcedureCall id="_1vWL"
                     procedure="qfs.swt.table.checks.checkNumberOfRows">
        <variable name="id">Debug_Symbol_Browser.table</variable>
        <variable name="compareValue">30</variable>
        <variable name="compareMode">&gt;=</variable>
        <variable name="errorLevel">ERROR</variable>
        <variable name="appearInReport">1</variable>
      </ProcedureCall>
      <TextInputStep clear="true" client="$(client)"
                     component="Debug_Symbol_Browser.text" id="_1vYY"
                     postdelay="2000" single="false">
        <text>__assert</text>
      </TextInputStep>
      <ProcedureCall id="_1vWr" procedure="symbolCheckDisassembly">
        <variable name="idx">0</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1vVj" name="symbolMidStack">
      <comment>debug symbol browser for "mid_stack"</comment>
      <TryStep id="_1vVk" name="select debuggee in debug view">
        <ProcedureCall id="_1vVl" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1vVm" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0/0" event="MOUSE_MPRC"
                        id="_1vVn" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1vVo" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <ProcedureCall id="_1vVp" procedure="uiClickDebugSymbolBrowser"/>
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        id="_1vXD" local="true" resvarname="selected"/>
      <IfSequence id="_1vXF" test="not $(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        event="MOUSE_MPRC" id="_1vXI" modifiers="16"
                        postdelay="1000"/>
      </IfSequence>
      <TextInputStep clear="true" client="$(client)"
                     component="Debug_Symbol_Browser.text" id="_1vVq"
                     postdelay="2000" single="false">
        <text>mid_stack</text>
      </TextInputStep>
      <ProcedureCall id="_1vVr"
                     procedure="qfs.swt.table.checks.checkNumberOfRows">
        <variable name="id">Debug_Symbol_Browser.table</variable>
        <variable name="compareValue">5</variable>
        <variable name="compareMode">&gt;=</variable>
        <variable name="errorLevel">ERROR</variable>
        <variable name="appearInReport">1</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vX5" procedure="symbolCheckSrc">
        <variable name="idx">1</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vX6" procedure="symbolCheckSrc">
        <variable name="idx">2</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vX7" procedure="symbolCheckSrc">
        <variable name="idx">3</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vX8" procedure="symbolCheckSrc">
        <variable name="idx">4</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vYd" procedure="symbolCheckSrc">
        <variable name="idx">5</variable>
      </ProcedureCall>
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        id="_1vXJ" local="true" resvarname="unselected"
                        state="false"/>
      <IfSequence id="_1vXK" test="not $(unselected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        event="MOUSE_MPRC" id="_1vXL" modifiers="16"
                        postdelay="1000"/>
      </IfSequence>
      <CheckStringStep client="$(client)"
                       component="Debug_Symbol_Browser.table@Signature&amp;0"
                       id="_1vXO">
        <text>mid_stack.c</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1vXX" name="symbolCounter">
      <comment>debug symbol browser for "mid_stack"</comment>
      <TryStep id="_1vXY" name="select debuggee in debug view">
        <ProcedureCall id="_1vXZ" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1vXa" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0/0" event="MOUSE_MPRC"
                        id="_1vXb" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1vXc" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <ProcedureCall id="_1vXd" procedure="uiClickDebugSymbolBrowser"/>
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        id="_1vXe" local="true" resvarname="selected"/>
      <IfSequence id="_1vXf" test="not $(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        event="MOUSE_MPRC" id="_1vXg" modifiers="16"
                        postdelay="1000"/>
      </IfSequence>
      <TextInputStep clear="true" client="$(client)"
                     component="Debug_Symbol_Browser.text" id="_1vXh"
                     postdelay="2000" single="false">
        <text>counter</text>
      </TextInputStep>
      <ProcedureCall id="_1vXi"
                     procedure="qfs.swt.table.checks.checkNumberOfRows">
        <variable name="id">Debug_Symbol_Browser.table</variable>
        <variable name="compareValue">5</variable>
        <variable name="compareMode">&gt;=</variable>
        <variable name="errorLevel">ERROR</variable>
        <variable name="appearInReport">1</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vY8" procedure="symbolAddExp">
        <variable name="idx">0</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vY9" procedure="symbolAddExp">
        <variable name="idx">1</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vYA" procedure="symbolAddExp">
        <variable name="idx">2</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vYB" procedure="symbolAddExp">
        <variable name="idx">3</variable>
      </ProcedureCall>
      <ProcedureCall id="_1vYC" procedure="expDelAll"/>
      <ProcedureCall id="_1vYD" procedure="uiCloseExpressionView"/>
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        id="_1vXo" local="true" resvarname="unselected"
                        state="false"/>
      <IfSequence id="_1vXp" test="not $(unselected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        event="MOUSE_MPRC" id="_1vXq" modifiers="16"
                        postdelay="1000"/>
      </IfSequence>
      <ProcedureCall id="_1vYE"
                     procedure="qfs.swt.table.checks.checkNumberOfRows">
        <variable name="id">Debug_Symbol_Browser.table</variable>
        <variable name="compareValue">10</variable>
        <variable name="compareMode">&gt;=</variable>
        <variable name="errorLevel">ERROR</variable>
        <variable name="appearInReport">1</variable>
      </ProcedureCall>
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        id="_1vYF" local="true" resvarname="selected"/>
      <IfSequence id="_1vYG" test="not $(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        event="MOUSE_MPRC" id="_1vYH" modifiers="16"
                        postdelay="1000"/>
      </IfSequence>
    </Procedure>
    <Procedure id="_1q4f" name="symbolSharedCode">
      <comment>debug symbol browser for "sharedCode"</comment>
      <TryStep id="_1q54" name="select debuggee in debug view">
        <ProcedureCall id="_1q55" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Debug.tree&amp;/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <ProcedureCall id="_1q56" procedure="qfs.swt.tree.selectNode">
          <variable name="id">Debug.tree&amp;/0/0/0/0</variable>
          <variable name="node">0</variable>
          <variable name="separator">&amp;</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug.tree&amp;/0/0/0/0" event="MOUSE_MPRC"
                        id="_1q57" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1q58" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <ProcedureCall id="_1vVc" procedure="uiClickDebugSymbolBrowser"/>
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        id="_1vXT" local="true" resvarname="selected"/>
      <IfSequence id="_1vXU" test="not $(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                        event="MOUSE_MPRC" id="_1vXV" modifiers="16"
                        postdelay="1000"/>
      </IfSequence>
      <TextInputStep clear="true" client="$(client)"
                     component="Debug_Symbol_Browser.text" id="_1q4l"
                     postdelay="2000" single="false">
        <text>sharedCode</text>
      </TextInputStep>
      <ProcedureCall id="_1q4m"
                     procedure="qfs.swt.table.checks.checkNumberOfRows">
        <variable name="id">Debug_Symbol_Browser.table</variable>
        <variable name="compareValue">1</variable>
        <variable name="compareMode">&gt;=</variable>
        <variable name="errorLevel">ERROR</variable>
        <variable name="appearInReport">1</variable>
      </ProcedureCall>
      <TryStep id="_1vj9" name="show symbol in source view">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%sharedCode.*"
                        event="MOUSE_MPRC" id="_1vjA" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%sharedCode.*"
                        event="MOUSE_MPRC" id="_1vjC" modifiers="4"
                        popup="true" postdelay="1000"/>
        <SelectionEventStep client="$(client)"
                            component="menuitemShow_Declaration"
                            event="SELECTION" id="_1vjD" postdelay="2000"/>
        <ClientScriptStep client="$(client)" engine="swt" id="_1vjE">
          <code>import re

# get component
comp = rc.getComponent("canvas-Editor.text")

selection = comp.getSelectionText()

checkStr = re.compile('sharedCode')
m = checkStr.search(selection)
if not m:
    rc.check(1 == 0, "can not find the symbol in disassembly view",report=True,nowrap=False)






</code>
        </ClientScriptStep>
        <SelectionEventStep client="$(client)"
                            component="menuitemShow_Disassembly"
                            disabled="true" event="SELECTION" id="_1vjF"
                            postdelay="2000"/>
        <CatchSequence exception="TestException" id="_1vjG" maxerror="0"/>
      </TryStep>
      <TryStep id="_1vjH" name="toggle breakpoint">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%sharedCode.*"
                        event="MOUSE_MPRC" id="_1vjO" modifiers="16"/>
        <ProcedureCall id="_1vjP" local="true"
                       procedure="qfs.swt.table.getValueOfCell"
                       retvarname="checkStr">
          <variable name="id">Debug_Symbol_Browser.table</variable>
          <variable name="column">Signature</variable>
          <variable name="row">sharedCode.*</variable>
          <variable name="columnSeparator">@</variable>
          <variable name="rowSeparator">%</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Symbol_Browser.table@Signature%sharedCode.*"
                        event="MOUSE_MPRC" id="_1vjQ" modifiers="4"
                        popup="true" postdelay="1000"/>
        <SelectionEventStep client="$(client)"
                            component="menuitemToggle_Breakpoint"
                            event="SELECTION" id="_1vjL" postdelay="1000"/>
        <ProcedureCall id="_1vjR" postdelay="2000"
                       procedure="uiClickBreakpointView"/>
        <CheckStringStep client="$(client)"
                         component="Breakpoints.tree&amp;/0" id="_1vjS"
                         regexp="true">
          <text>sharedCode.*</text>
        </CheckStringStep>
        <CatchSequence exception="TestException" id="_1vjN" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1naT" name="srcOpenSymbol">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1q4u"/>
      <SelectionEventStep client="$(client)" component="menu-window-showView"
                          event="SELECTION" id="_1q4v"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemDebug_Symbol_Browser"
                          event="SELECTION" id="_1q4w"/>
      <SelectionEventStep client="$(client)"
                          component="tabfolder-Remote_Systems@Debug Symbol Browser"
                          event="SELECTION" id="_1q4x"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.text" event="MOUSE_MPRC"
                      id="_1tiR" modifiers="16" x="26" y="11"/>
      <TextInputStep clear="true" client="$(client)"
                     component="Debug_Symbol_Browser.text" id="_1tiS"
                     postdelay="2000" single="false">
        <text>mid_stack</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;0"
                      event="MOUSE_MPRC" id="_1naU" modifiers="4"
                      popup="true"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemShow_Declaration"
                          event="SELECTION" id="_1naV" postdelay="2000"/>
      <TryStep id="_1tgy" name="clickFile">
        <SelectionEventStep client="$(client)"
                            component="tabfolder-Editor@mid_stack.c"
                            event="SELECTION" id="_1kpV"/>
        <CatchSequence exception="IndexNotFoundException" id="_1tgz"
                       maxerror="2"/>
        <CatchSequence exception="TestException" id="_1tg+" maxerror="0"/>
      </TryStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="canvas-Editor.text&amp;39" event="MOUSE_MPRC"
                      id="_1naW" modifiers="16" x="87" y="13"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="canvas-Editor.text" event="MOUSE_MPRC"
                      id="_1naX" modifiers="16" x="212" y="670"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;0"
                      event="MOUSE_MPRC" id="_1naZ" modifiers="4" popup="true"
                      postdelay="1000"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemShow_Declaration"
                          event="SELECTION" id="_1naa" postdelay="2000"/>
      <ProcedureCall id="_1nak" procedure="dbgCheck1"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;2"
                      event="MOUSE_MPRC" id="_1nab" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;2"
                      event="MOUSE_MPRC" id="_1nac" modifiers="4"
                      popup="true"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemShow_Declaration"
                          event="SELECTION" id="_1nad" postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;3"
                      event="MOUSE_MPRC" id="_1nae" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;3"
                      event="MOUSE_MPRC" id="_1naf" modifiers="4"
                      popup="true"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemShow_Declaration"
                          event="SELECTION" id="_1nag" postdelay="2000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Symbol_Browser.table@Signature&amp;4"
                      event="MOUSE_MPRC" id="_1nai" modifiers="4" popup="true"
                      postdelay="1000"/>
      <SelectionEventStep client="$(client)"
                          component="menuitemShow_Declaration"
                          event="SELECTION" id="_1naj" postdelay="2000"/>
      <ProcedureCall id="_1nal" procedure="dbgCheck5"/>
    </Procedure>
    <Procedure id="_1ni5" name="stepOp">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.stepOver"
                      event="MOUSE_MPRC" id="_1ni6" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.stepOver"
                      event="MOUSE_MPRC" id="_1ni7" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.stepOver"
                      event="MOUSE_MPRC" id="_1ni8" modifiers="16"
                      postdelay="1000"/>
      <CheckStringStep client="$(client)"
                       component="canvas-Editor.text&amp;532" id="_1ni9">
        <text>    q.color = blue;        </text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.stepOver"
                      event="MOUSE_MPRC" id="_1niA" modifiers="16"
                      postdelay="1000"/>
      <CheckStringStep client="$(client)"
                       component="canvas-Editor.text&amp;535" id="_1niB">
        <text>    rectest.long_integer = 0xFFFFEEEE;</text>
      </CheckStringStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="canvas-Editor.text&amp;679"
                      event="MOUSE_MPRC" id="_1niC" modifiers="4" popup="true"
                      x="26" y="6"/>
      <SelectionEventStep client="$(client)"
                          component="menu-com.windriver.ide.debug.ui.editor.runToLineAction"
                          event="SELECTION" id="_1niD"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.debugview.toolbar.stepInto"
                      event="MOUSE_MPRC" id="_1niE" modifiers="16"
                      postdelay="1000"/>
      <ProcedureCall id="_1niI" procedure="qfs.swt.tree.expandNode">
        <variable name="id">Debug.tree&amp;/0/0/0</variable>
        <variable name="node">0</variable>
        <variable name="separator">&amp;</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1niJ" regexp="true">
        <text>mid_stack5().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nj4" name="stepReturn">
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1nj5"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                          event="SELECTION" id="_1nj6" postdelay="2000"/>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1nj7" regexp="true">
        <text>mid_stack4().*</text>
      </CheckStringStep>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1nj8"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                          event="SELECTION" id="_1nj9" postdelay="2000"/>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1njA" regexp="true">
        <text>mid_stack3().*</text>
      </CheckStringStep>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1njB"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                          event="SELECTION" id="_1njC" postdelay="2000"/>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1njD" regexp="true">
        <text>mid_stack2().*</text>
      </CheckStringStep>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run"
                          event="SELECTION" id="_1njE"/>
      <SelectionEventStep client="$(client)"
                          component="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                          event="SELECTION" id="_1njF" postdelay="2000"/>
      <CheckStringStep client="$(client)" component="Debug.tree&amp;/0/0/0/0"
                       id="_1njG" regexp="true">
        <text>mid_stack1().*</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nXa" name="deletDebugConfigurations">
      <MouseEventStep clicks="1" client="$(client)"
                      component="LaunchConfigurationsDialog.tree@/Linux Application Process"
                      event="MOUSE_MPRC" id="_1nXb" modifiers="16"/>
      <ProcedureCall id="_1nXc" procedure="qfs.swt.tree.getRowCount"
                     retvarname="nrItems">
        <variable name="id">LaunchConfigurationsDialog.tree@/Linux Application Process</variable>
      </ProcedureCall>
      <RepeatSequence count="$(nrItems)" id="_1nXd" name="delItem">
        <MouseEventStep clicks="1" client="$(client)"
                        component="LaunchConfigurationsDialog.tree@/Linux Application Process"
                        event="MOUSE_MPRC" id="_1nXe" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="LaunchConfigurationsDialog.tree@/Linux Application Process&amp;/0"
                        event="MOUSE_MOVED" id="_1nXf" modifiers="0"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="LaunchConfigurationsDialog.tree@/Linux Application Process&amp;/0"
                        event="MOUSE_PRESSED" id="_1nXg" modifiers="16"/>
        <ComponentEventStep client="$(client)"
                            component="LaunchConfigurationsDialog"
                            event="COMPONENT_RESIZED" id="_1nXh" param1="1080"
                            param2="640"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipDelete_selected_launch_configuration(s)"
                        event="MOUSE_MPRC" id="_1nXi" modifiers="16"/>
        <ComponentWaiter client="$(client)" component="MessageDialog"
                         id="_1nXj"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk"
                        event="MOUSE_MPRC" id="_1nXk" modifiers="16"
                        postdelay="1000"/>
      </RepeatSequence>
    </Procedure>
    <Procedure id="_1no-" name="frameCheck">
      <TryStep id="_1u8j">
        <ProcedureCall id="_1np1" procedure="qfs.swt.tree.expandNode">
          <variable name="id">WorkbenchWindow.tree2@Name</variable>
          <variable name="node">p_s1</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/int_var1"
                         id="_1np2">
          <text>int_var1</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/float_var1"
                         id="_1np3">
          <text>float_var1</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/string_pointer1"
                         id="_1np4">
          <text>string_pointer1</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/s2/int_var2"
                         id="_1np5">
          <text>int_var2</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/s2/float_var2"
                         id="_1np6">
          <text>float_var2</text>
        </CheckStringStep>
        <ProcedureCall id="_1np7" procedure="qfs.swt.tree.expandNode">
          <variable name="id">WorkbenchWindow.tree2@Name@/p_s1/s2</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/s2/int_var2"
                         id="_1np8">
          <text>int_var2</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/s2/float_var2"
                         id="_1np9">
          <text>float_var2</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/s2/string_pointer2"
                         id="_1npA">
          <text>string_pointer2</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="WorkbenchWindow.tree2@Name@/p_s1/s2/s3"
                         id="_1npB">
          <text>s3</text>
        </CheckStringStep>
        <CatchSequence exception="TestException" id="_1u8k" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1u8F" name="vxFrameCheck">
      <TryStep id="_1u8e" name="WorkbenchWindow">
        <ComponentWaiter client="$(client)" component="Variables.tree"
                         id="_1u8d" timeout="1000"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1u8f"
                       maxerror="0">
          <ProcedureCall id="_1u8h" procedure="frameCheck"/>
          <ReturnStep id="_1u8i" retval="true"/>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1u8g" maxerror="0"/>
      </TryStep>
      <TryStep id="_1u8l" name="VairablesView">
        <ProcedureCall id="_1u8G" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Variables.tree@Name</variable>
          <variable name="node">p_s1</variable>
          <variable name="separator">@</variable>
        </ProcedureCall>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/int_var1"
                         id="_1u8H">
          <text>int_var1</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/float_var1"
                         id="_1u8I">
          <text>float_var1</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/string_pointer1"
                         id="_1u8J">
          <text>string_pointer1</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/s2/int_var2"
                         id="_1u8K">
          <text>int_var2</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/s2/float_var2"
                         id="_1u8L">
          <text>float_var2</text>
        </CheckStringStep>
        <ProcedureCall id="_1u8M" procedure="qfs.swt.tree.expandNode">
          <variable name="id">Variables.tree@Name@/p_s1/s2</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/s2/int_var2"
                         id="_1u8N">
          <text>int_var2</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/s2/float_var2"
                         id="_1u8O">
          <text>float_var2</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/s2/string_pointer2"
                         id="_1u8P">
          <text>string_pointer2</text>
        </CheckStringStep>
        <CheckStringStep client="$(client)"
                         component="Variables.tree@Name@/p_s1/s2/s3"
                         id="_1u8Q">
          <text>s3</text>
        </CheckStringStep>
        <CatchSequence exception="TestException" id="_1u8m" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1qHG" name="threadFrameCheck0">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport).view"
                      disabled="true" event="MOUSE_MOVED" id="_1qHH"
                      modifiers="0" x="40" y="29"/>
      <ProcedureCall id="_1qHI" procedure="qfs.swt.tree.expandNode">
        <variable name="id">WorkbenchWindow.tree2@Name</variable>
        <variable name="node">threadStr</variable>
        <variable name="separator">@</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)"
                       component="WorkbenchWindow.tree2@Value@/threadStr/threadStr[0]"
                       id="_1qHY">
        <text>'T' </text>
      </CheckStringStep>
      <CheckStringStep client="$(client)"
                       component="WorkbenchWindow.tree2@Value@/threadStr/threadStr[1]"
                       id="_1qHZ">
        <text>'h' </text>
      </CheckStringStep>
      <CheckStringStep client="$(client)"
                       component="WorkbenchWindow.tree2@Value@/threadStr"
                       id="_1qHa" regexp="true">
        <text>0x[0-9A-F]+ "Thread 0"</text>
      </CheckStringStep>
      <ProcedureCall disabled="true" id="_1qHT"
                     procedure="qfs.swt.tree.expandNode">
        <variable name="id">WorkbenchWindow.tree2@Name@/p_s1/s2/s3/s4/s5/s6/s7/s8/s9</variable>
        <variable name="node"/>
        <variable name="separator"/>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1qHb" name="threadFrameCheck1">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport).view"
                      disabled="true" event="MOUSE_MOVED" id="_1qHc"
                      modifiers="0" x="40" y="29"/>
      <ProcedureCall id="_1qHd" procedure="qfs.swt.tree.expandNode">
        <variable name="id">WorkbenchWindow.tree2@Name</variable>
        <variable name="node">threadStr</variable>
        <variable name="separator">@</variable>
      </ProcedureCall>
      <CheckStringStep client="$(client)"
                       component="WorkbenchWindow.tree2@Value@/threadStr/threadStr[0]"
                       id="_1qHe">
        <text>'T' </text>
      </CheckStringStep>
      <CheckStringStep client="$(client)"
                       component="WorkbenchWindow.tree2@Value@/threadStr/threadStr[1]"
                       id="_1qHf">
        <text>'h' </text>
      </CheckStringStep>
      <CheckStringStep client="$(client)"
                       component="WorkbenchWindow.tree2@Value@/threadStr"
                       id="_1qHg" regexp="true">
        <text>0x[0-9A-F]+ "Thread 1"</text>
      </CheckStringStep>
      <ProcedureCall disabled="true" id="_1qHh"
                     procedure="qfs.swt.tree.expandNode">
        <variable name="id">WorkbenchWindow.tree2@Name@/p_s1/s2/s3/s4/s5/s6/s7/s8/s9</variable>
        <variable name="node"/>
        <variable name="separator"/>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1nv7" name="pcCheck">
      <CheckStringStep client="$(client)" component="labelPC:0x000094B0"
                       id="_1nv8" regexp="true">
        <text>PC:0x[0-9A-F]+</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1nqg" name="expAddwatch">
      <variable name="item"/>
      <TryStep id="_1nqh" name="expAdd">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-org.eclipse.debug.ui.expresssionsView.toolbar.AddWatchExpression"
                        event="MOUSE_MPRC" id="_1nqi" modifiers="16"/>
        <ComponentWaiter client="$(client)" component="WatchExpressionDialog"
                         id="_1nqj" timeout="60000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="WatchExpressionDialog.text"
                        event="MOUSE_MPRC" id="_1nqk" modifiers="16" x="39"
                        y="25"/>
        <TextInputStep clear="true" client="$(client)"
                       component="WatchExpressionDialog.text" id="_1nql">
          <text>$(item)</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk29"
                        event="MOUSE_MPRC" id="_1nqm" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1nqn" maxerror="0"
                       name="ignore">
          <catchmessage>wdm Error: can NOT add $(item) in expression view</catchmessage>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1nq+" name="expExpandItems">
      <TryStep id="_1nq-" name="expExpandItem">
        <ProcedureCall id="_1nr0" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Expressions.tree@Expression@/q</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ProcedureCall id="_1nr1" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Expressions.tree@Expression@/rectest</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ProcedureCall id="_1nr2" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Expressions.tree@Expression@/s1</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1nr3" maxerror="0"
                       name="ignore">
          <catchmessage>wdm Error : can NOT expand items in expression view</catchmessage>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1nr6" name="expCollapsetems">
      <TryStep id="_1nr7" name="expExpandItem">
        <ProcedureCall id="_1nrC" postdelay="2000"
                       procedure="qfs.swt.tree.collapseNode">
          <variable name="id">Expressions.tree@Expression@/q</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ProcedureCall id="_1nrD" postdelay="2000"
                       procedure="qfs.swt.tree.collapseNode">
          <variable name="id">Expressions.tree@Expression@/rectest</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <ProcedureCall id="_1nrE" postdelay="2000"
                       procedure="qfs.swt.tree.collapseNode">
          <variable name="id">Expressions.tree@Expression@/s1</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1nrB" maxerror="0"
                       name="ignore">
          <catchmessage>wdm Error : can NOT expand items in expression view</catchmessage>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1nrL" name="expDelAll">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.debug.ui.expresssionsView.toolbar.removeAll"
                      event="MOUSE_MPRC" id="_1nrM" modifiers="16"/>
      <ComponentWaiter client="$(client)" component="MessageDialogWithToggle"
                       id="_1nrN" timeout="60000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk2"
                      event="MOUSE_MPRC" id="_1nrO" modifiers="16"
                      postdelay="2000"/>
    </Procedure>
    <Procedure id="_1nu4" name="regExpandItems">
      <TryStep id="_1nu5" name="regExpandItem">
        <ProcedureCall id="_1nu6" postdelay="2000"
                       procedure="qfs.swt.tree.expandNode">
          <variable name="id">Registers.tree@Name&amp;/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1nu9" maxerror="0"
                       name="ignore">
          <catchmessage>wdm Error : can NOT expand items in expression view</catchmessage>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1nuR" name="regCollapsetems">
      <TryStep id="_1nuS" name="expExpandItem">
        <ProcedureCall id="_1nuT" postdelay="2000"
                       procedure="qfs.swt.tree.collapseNode">
          <variable name="id">Registers.tree@Name&amp;/0</variable>
          <variable name="node"/>
          <variable name="separator"/>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1nuW" maxerror="0"
                       name="ignore">
          <catchmessage>wdm Error : can NOT expand items in expression view</catchmessage>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1nuz" name="memBrowserAddItem">
      <MouseEventStep clicks="1" client="$(client)"
                      component="Memory_Browser2.combo" event="MOUSE_MPRC"
                      id="_1nu+" modifiers="16" x="65" y="11"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNew_Tab2"
                      event="MOUSE_MPRC" id="_1nu-" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonGo2"
                      event="MOUSE_MPRC" id="_1nv0" modifiers="16"/>
      <CheckStringStep client="$(client)" component="Memory_Browser2.combo"
                       id="_1nv1">
        <text>&amp;p_q</text>
      </CheckStringStep>
    </Procedure>
    <Procedure id="_1o1d" name="getCmdText">
      <variable name="dbgAtSuccess">'False'</variable>
      <ClientScriptStep client="$(client)" engine="swt" id="_1o1f">
        <code>import re

# get component
dbgShell = rc.getComponent("Debug_Command_Shell.canvas")

# get output
dbgShell.selectAll()
content = dbgShell.getSelectionText()

attach = re.compile("Attaching to ")
gdb = re.compile("(gdb)")
error =re.compile("error",re.I)

success1 = attach.search(content)

success2 = gdb.search(content)

if success1:
    rc.setGlobal('dbgAtsuccess','True')
else:
    rc.setGlobal('dbgAtSuccess','False')




</code>
      </ClientScriptStep>
      <ProcedureCall disabled="true" id="_1oXX"
                     procedure="qfs.swt.general.clickAtComponent">
        <variable name="id">Debug_Command_Shell.canvas</variable>
        <variable name="click">true</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Command_Shell.canvas"
                      event="MOUSE_MPRC" id="_1o1g" modifiers="16" x="1"
                      y="1"/>
      <ReturnStep id="_1o1m" retval="$(dbgAtSuccess)"/>
    </Procedure>
    <Procedure id="_1oR6" name="dbgCmdFinish">
      <TryStep id="_1sRt" name="clickDebugCmdShell">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1sRu" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1sRv"
                       maxerror="2"/>
      </TryStep>
      <ClientScriptStep client="$(client)" engine="swt" id="_1oR7">
        <code>import re

# get component
dbgShell = rc.getComponent("Debug_Command_Shell.canvas")

# get output
dbgShell.selectAll()
content = dbgShell.getSelectionText()

gdb = re.compile("[(](gdb[)])")
exit =re.compile("exiting hostshell",re.I)

success1 = gdb.search(content)

success2 = exit.search(content)

if success1 != None or success2 != None:
    rc.setLocal('dbgFinish','1')
else:
    rc.setLocal('dbgFinish','0')



</code>
      </ClientScriptStep>
      <TryStep id="_1sRr" name="clickDebugCmdShell">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1oR8" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1sRs"
                       maxerror="2"/>
      </TryStep>
      <ReturnStep id="_1oR9" retval="$(dbgFinish)"/>
    </Procedure>
    <Procedure id="_1oRI" name="dbgCmdErrorCheck">
      <ClientScriptStep client="$(client)" engine="swt" id="_1oRJ">
        <code>import re

# get component
dbgShell = rc.getComponent("Debug_Command_Shell.canvas")

# get output
dbgShell.selectAll()
content = dbgShell.getSelectionText()

exit =re.compile("exiting hostshell",re.I)
error =re.compile("error",re.I)

success1 = exit.search(content)

success2 = error.search(content)

if success1 != None :
    rc.check(1 == 0,"Debug Command Shell Failed to start !",level=rc.ERROR,report=True,nowrap=False)

if success2 != None:
    rc.check(1 == 0,"Debub Command Shell prompt Error !",level=rc.ERROR,report=True,nowrap=False)

rc.setLocal('hostShellContent',content)


</code>
      </ClientScriptStep>
      <ProcedureCall id="_1ohI" procedure="qfs.run-log.logMessage">
        <variable name="message">$(hostShellContent)</variable>
        <variable name="dontcompactify">false</variable>
        <variable name="report">true</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Command_Shell.canvas"
                      event="MOUSE_MPRC" id="_1oRK" modifiers="16" x="1"
                      y="1"/>
    </Procedure>
    <Procedure id="_1qzu" name="dbgCmdClean">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll"
                      event="MOUSE_MPRC" id="_1q+0" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Command_Shell.canvas"
                      event="MOUSE_MPRC" id="_1qzx" modifiers="16" x="1"
                      y="1"/>
    </Procedure>
    <Procedure id="_1q+1" name="dbgCmdSave">
      <ClientScriptStep client="$(client)" engine="swt" id="_1q+2">
        <code>import re

# get component
dbgShell = rc.getComponent("Debug_Command_Shell.canvas")

# get output
dbgShell.selectAll()
content = dbgShell.getSelectionText()


rc.setLocal('hostShellContent',content)


</code>
      </ClientScriptStep>
      <ProcedureCall id="_1q+3" procedure="qfs.run-log.logMessage">
        <variable name="message">$(hostShellContent)</variable>
        <variable name="dontcompactify">false</variable>
        <variable name="report">true</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Command_Shell.canvas"
                      event="MOUSE_MPRC" id="_1q+4" modifiers="16" x="1"
                      y="1"/>
    </Procedure>
    <Procedure id="_1uAK" name="tgtConsoleFinish">
      <TryStep id="_1uAL" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Target_Consoles.canvas" event="MOUSE_MPRC"
                        id="_1uAM" modifiers="16" x="1" y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uAN"
                       maxerror="2"/>
      </TryStep>
      <ClientScriptStep client="$(client)" engine="swt" id="_1uAO">
        <code>import re

# get component
tgtConsole = rc.getComponent("Target_Consoles.canvas")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

console = re.compile("-&gt; ")

console_prompt = console.search(content)


if console_prompt != None:
    rc.setLocal('cmdFinish','1')
else:
    rc.setLocal('cmdFinish','0')



</code>
      </ClientScriptStep>
      <TryStep id="_1uAT" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Target_Consoles.canvas" event="MOUSE_MPRC"
                        id="_1uAU" modifiers="16" x="1" y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uAV"
                       maxerror="2"/>
      </TryStep>
      <ReturnStep id="_1uAS" retval="$(cmdFinish)"/>
    </Procedure>
    <Procedure id="_1uAW" name="tgtConsoleClean">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll2"
                      event="MOUSE_MPRC" id="_1uAu" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Target_Consoles.canvas" event="MOUSE_MPRC"
                      id="_1uAp" modifiers="16" x="1" y="1"/>
    </Procedure>
    <Procedure id="_1uAf" name="tgtConsoleSave">
      <ClientScriptStep client="$(client)" engine="swt" id="_1uAv">
        <code>import re

# get component
tgtConsole = rc.getComponent("Target_Consoles.canvas")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()


rc.setLocal('tgtConsoleContent',content)


</code>
      </ClientScriptStep>
      <ProcedureCall id="_1uAw" procedure="qfs.run-log.logMessage">
        <variable name="message">$(tgtConsoleContent)</variable>
        <variable name="dontcompactify">false</variable>
        <variable name="report">true</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Target_Consoles.canvas" event="MOUSE_MPRC"
                      id="_1uAx" modifiers="16" x="1" y="1"/>
    </Procedure>
    <Procedure id="_1uW4" name="tgtConsoleCheck">
      <variable name="str">"toto="</variable>
      <ClientScriptStep client="$(client)" engine="swt" id="_1uW8">
        <code>import re

# get component
tgtConsole = rc.getComponent("Target_Consoles.canvas")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

#checkStr = re.compile(r'($(str)\d+)')
checkStr = re.compile(r'(toto=\d+)')
m = checkStr.search(content)
if m != None:
    rc.setLocal('matchit',1)
else:
    rc.setLocal('matchit',0)



</code>
      </ClientScriptStep>
      <IfSequence id="_1uWA" test="$(matchit)">
        <ReturnStep id="_1uWB" retval="true"/>
        <ElseSequence id="_1uWC">
          <ReturnStep id="_1uWD" retval="false"/>
        </ElseSequence>
      </IfSequence>
    </Procedure>
    <Procedure id="_1uXm" name="consoleClean">
      <TryStep id="_1uYW" name="clickClean">
        <MouseEventStep clicks="1" client="$(client)"
                        component="toolItemTipClear_Console"
                        event="MOUSE_MPRC" id="_1uYV" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1uYX" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1uXp" name="consoleSave">
      <ClientScriptStep client="$(client)" engine="swt" id="_1uXq">
        <code>import re

# get component
tgtConsole = rc.getComponent("Console.text")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()


rc.setLocal('tgtConsoleContent',content)


</code>
      </ClientScriptStep>
      <ProcedureCall id="_1uXr" procedure="qfs.run-log.logMessage">
        <variable name="message">$(tgtConsoleContent)</variable>
        <variable name="dontcompactify">false</variable>
        <variable name="report">true</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)" component="Console.text"
                      event="MOUSE_MPRC" id="_1uXs" modifiers="16" x="1"
                      y="1"/>
    </Procedure>
    <Procedure id="_1uXt" name="consoleCheck">
      <variable name="str">"toto="</variable>
      <ClientScriptStep client="$(client)" engine="swt" id="_1uXu">
        <code>import re

# get component
tgtConsole = rc.getComponent("Console.text")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

#checkStr = re.compile(r'($(str)\d+)')
checkStr = re.compile(r'(toto=\d+)')
m = checkStr.search(content)
if m != None:
    rc.setLocal('matchit',1)
else:
    rc.setLocal('matchit',0)



</code>
      </ClientScriptStep>
      <MouseEventStep clicks="1" client="$(client)" component="Console.text"
                      event="MOUSE_MPRC" id="_1uYR" modifiers="16" x="1"
                      y="1"/>
      <IfSequence id="_1uXv" test="$(matchit)">
        <ReturnStep id="_1uXw" retval="true"/>
        <ElseSequence id="_1uXx">
          <ReturnStep id="_1uXy" retval="false"/>
        </ElseSequence>
      </IfSequence>
    </Procedure>
    <Procedure id="_1uCq" name="vxPrompt">
      <ProcedureCall id="_1uYp" procedure="uiClickTerminalView"/>
      <TryStep id="_1uCr" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uCs" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uCt"
                       maxerror="2"/>
      </TryStep>
      <ClientScriptStep client="$(client)" engine="swt" id="_1uCu">
        <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

console = re.compile("-&gt; ")

console_prompt = console.search(content)


if console_prompt != None:
    rc.setLocal('cmdFinish','true')
else:
    rc.setLocal('cmdFinish','false')



</code>
      </ClientScriptStep>
      <TryStep id="_1uCv" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uCw" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uCx"
                       maxerror="2"/>
      </TryStep>
      <ReturnStep id="_1uCy" retval="$(cmdFinish)"/>
    </Procedure>
    <Procedure id="_1ufx" name="lxPrompt">
      <ProcedureCall id="_1ufy" procedure="uiClickTerminalView"/>
      <TryStep id="_1ufz" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uf+" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uf-"
                       maxerror="2"/>
      </TryStep>
      <ClientScriptStep client="$(client)" engine="swt" id="_1ug0">
        <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

prompt = re.compile('[#&gt;] ')

console_prompt = prompt.search(content)


if console_prompt != None:
    rc.setLocal('cmdFinish','true')
else:
    rc.setLocal('cmdFinish','false')


</code>
      </ClientScriptStep>
      <TryStep id="_1ug1" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1ug2" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1ug3"
                       maxerror="2"/>
      </TryStep>
      <ReturnStep id="_1ug4" retval="$(cmdFinish)"/>
    </Procedure>
    <Procedure id="_1ugk" name="lxLoginPrompt">
      <ProcedureCall id="_1ugl" procedure="uiClickTerminalView"/>
      <TryStep id="_1ugm" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1ugn" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1ugo"
                       maxerror="2"/>
      </TryStep>
      <ClientScriptStep client="$(client)" engine="swt" id="_1ugp">
        <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

prompt = re.compile('login: ',re.IGNORECASE)

console_prompt = prompt.search(content)


if console_prompt != None:
    rc.setLocal('cmdLogin','true')
else:
    rc.setLocal('cmdLogin','false')


</code>
      </ClientScriptStep>
      <TryStep id="_1ugq" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1ugr" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1ugs"
                       maxerror="2"/>
      </TryStep>
      <ReturnStep id="_1ugt" retval="$(cmdLogin)"/>
    </Procedure>
    <Procedure id="_1uZE" name="vxBootloaderPrompt">
      <ProcedureCall id="_1uZF" procedure="uiClickTerminalView"/>
      <TryStep id="_1uZG" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uZH" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uZI"
                       maxerror="2"/>
      </TryStep>
      <ClientScriptStep client="$(client)" engine="swt" id="_1uZJ">
        <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

console = re.compile(" Boot]: ")

console_prompt = console.search(content)


if console_prompt != None:
    rc.setLocal('cmdFinish','true')
else:
    rc.setLocal('cmdFinish','false')



</code>
      </ClientScriptStep>
      <TryStep id="_1uZK" name="clickTargetConsole">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uZL" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uZM"
                       maxerror="2"/>
      </TryStep>
      <ReturnStep id="_1uZN" retval="$(cmdFinish)"/>
    </Procedure>
    <Procedure id="_1ubL" name="vxBootString">
      <ServerScriptStep id="_1ubW" name="vxBootStr">
        <code>import subprocess,os
import socket

if ${qftestJUI:windows}:
    vlm = 'vlmTool'
else:
    vlm = '/folk/vlm/commandline/vlmTool'

getAttr = vlm + ' getAttr -s amazon.wrs.com -t ' + '$(bc)' + ' '

getBootdev = getAttr + 'bootdev'
outs = subprocess.Popen(getBootdev,shell=True,stdout=subprocess.PIPE).communicate()[0]
bootdev = outs.decode().strip()

getInet = getAttr + 'inet'
outs = subprocess.Popen(getInet,shell=True,stdout=subprocess.PIPE).communicate()[0]
inet = outs.decode().strip()

getGnet = getAttr + 'gateway'
outs = subprocess.Popen(getGnet,shell=True,stdout=subprocess.PIPE).communicate()[0]
gnet = outs.decode().strip()

netmask = '0xfffffe00'
imgFile = os.path.join(r'$(platformDir)','default','vxWorks')
htftpname='pek-wb-build64'
hip = ' h=' + socket.gethostbyname(htftpname)
hStr = '@' + bootdev + '(0,0)' + 'host:' + imgFile
eip = ' e=' + inet + ':' + netmask
gip = ' g=' + gnet
user = ' u=target'
pawd = ' pw=vxTarget'
flag = ' f=0x400'

bootStr = hStr + hip + eip + gip + user + pawd + flag
rc.setGlobal('vxBootStr',bootStr)
</code>
      </ServerScriptStep>
    </Procedure>
    <Procedure id="_1uZt" name="vxConsole">
      <ProcedureCall id="_1uZv" procedure="uiClickTerminalView"/>
      <TryStep id="_1uZw" name="clear Terminal">
        <ProcedureCall id="_1uZx" procedure="terminalClear"/>
        <CatchSequence exception="TestException" id="_1uZy" maxerror="0"/>
      </TryStep>
      <RepeatSequence count="2" id="_1uaY" name="first try">
        <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                      id="_1uZz" keychar="13" keycode="10" modifiers="0"
                      postdelay="2000"/>
        <ProcedureCall id="_1uZ+" local="true" procedure="vxPrompt"
                       retvarname="prompt"/>
        <IfSequence id="_1uZ-" test="$(prompt)">
          <ReturnStep id="_1ua0" retval="true"/>
        </IfSequence>
        <ProcedureCall id="_1ua1" local="true" procedure="vxBootloaderPrompt"
                       retvarname="bootloader"/>
        <IfSequence id="_1ua2" test="$(bootloader)">
          <ProcedureCall id="_1ubY" procedure="vxBootString"/>
          <TextInputStep clear="true" client="$(client)" component="Terminal"
                         id="_1ua3" postdelay="1000">
            <text>$(vxBootStr)</text>
          </TextInputStep>
          <KeyEventStep client="$(client)" component="Terminal"
                        event="KEY_PTR" id="_1ua4" keychar="13" keycode="10"
                        modifiers="0" postdelay="30000"/>
        </IfSequence>
      </RepeatSequence>
      <ProcedureCall id="_1uaC" procedure="utils.vlmConsoleKill"/>
      <ProcedureCall id="_1uaD" procedure="uiTgtConnect">
        <variable name="bc">$(bc)</variable>
      </ProcedureCall>
      <RepeatSequence count="2" id="_1uah"
                      name="second try after grab the console">
        <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                      id="_1uai" keychar="13" keycode="10" modifiers="0"
                      postdelay="2000"/>
        <ProcedureCall id="_1uaj" local="true" procedure="vxPrompt"
                       retvarname="prompt"/>
        <IfSequence id="_1uak" test="$(prompt)">
          <ReturnStep id="_1ual" retval="true"/>
        </IfSequence>
        <ProcedureCall id="_1uam" local="true" procedure="vxBootloaderPrompt"
                       retvarname="bootloader"/>
        <IfSequence id="_1uan" test="$(bootloader)">
          <ProcedureCall id="_1ubZ" procedure="vxBootString"/>
          <TextInputStep clear="true" client="$(client)" component="Terminal"
                         id="_1uba" postdelay="1000">
            <text>$(vxBootStr)</text>
          </TextInputStep>
          <KeyEventStep client="$(client)" component="Terminal"
                        event="KEY_PTR" id="_1uap" keychar="13" keycode="10"
                        modifiers="0" postdelay="30000"/>
        </IfSequence>
      </RepeatSequence>
      <RepeatSequence count="3" id="_1uar" name="third try after reboot">
        <ProcedureCall id="_1uaq" postdelay="10000"
                       procedure="utils.vlmReboot">
          <variable name="barcode">$(bc)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1ua-" postdelay="30000" procedure="uiTgtConnect">
          <variable name="bc">$(bc)</variable>
        </ProcedureCall>
        <RepeatSequence count="2" id="_1ub1"
                        name="second try after grab the console">
          <KeyEventStep client="$(client)" component="Terminal"
                        event="KEY_PTR" id="_1ub2" keychar="13" keycode="10"
                        modifiers="0" postdelay="2000"/>
          <ProcedureCall id="_1ub3" local="true" procedure="vxPrompt"
                         retvarname="prompt"/>
          <IfSequence id="_1ub4" test="$(prompt)">
            <ReturnStep id="_1ub5" retval="true"/>
          </IfSequence>
          <ProcedureCall id="_1ub6" local="true"
                         procedure="vxBootloaderPrompt"
                         retvarname="bootloader"/>
          <IfSequence id="_1ub7" test="$(bootloader)">
            <ProcedureCall id="_1ubb" procedure="vxBootString"/>
            <TextInputStep clear="true" client="$(client)"
                           component="Terminal" id="_1ubc" postdelay="1000">
              <text>$(vxBootStr)</text>
            </TextInputStep>
            <KeyEventStep client="$(client)" component="Terminal"
                          event="KEY_PTR" id="_1ub9" keychar="13" keycode="10"
                          modifiers="0" postdelay="60000"/>
          </IfSequence>
        </RepeatSequence>
      </RepeatSequence>
      <ReturnStep id="_1ubA" retval="false"/>
    </Procedure>
    <Procedure id="_1vFw" name="lxLogin">
      <ProcedureCall id="_1vFx" local="true" procedure="lxLoginPrompt"
                     retvarname="loginPrompt"/>
      <IfSequence id="_1vFy" test="$(loginPrompt)">
        <TextInputStep clear="true" client="$(client)" component="Terminal"
                       id="_1vFz" postdelay="1000">
          <text>root</text>
        </TextInputStep>
        <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                      id="_1vF+" keychar="13" keycode="10" modifiers="0"
                      postdelay="1000"/>
        <TextInputStep clear="true" client="$(client)" component="Terminal"
                       id="_1vF-" postdelay="1000">
          <text>root</text>
        </TextInputStep>
        <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                      id="_1vG0" keychar="13" keycode="10" modifiers="0"
                      postdelay="1000"/>
        <ProcedureCall id="_1vG1" procedure="terminalClear"/>
        <ProcedureCall id="_1vG2" procedure="lxPrompt"/>
      </IfSequence>
    </Procedure>
    <Procedure id="_1udd" name="lxConsole">
      <ProcedureCall id="_1ude" procedure="uiClickTerminalView"/>
      <TryStep id="_1udf" name="clear Terminal">
        <ProcedureCall id="_1udg" procedure="terminalClear"/>
        <CatchSequence exception="TestException" id="_1udh" maxerror="0"/>
      </TryStep>
      <RepeatSequence count="3" id="_1udi" name="first try">
        <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                      id="_1udj" keychar="13" keycode="10" modifiers="0"
                      postdelay="2000"/>
        <ProcedureCall id="_1udk" local="true" procedure="lxPrompt"
                       retvarname="prompt"/>
        <IfSequence id="_1udl" test="$(prompt)">
          <ReturnStep id="_1udm" retval="true"/>
        </IfSequence>
        <ProcedureCall id="_1ugu" local="true" procedure="lxLoginPrompt"
                       retvarname="loginPrompt"/>
        <IfSequence id="_1udo" test="$(loginPrompt)">
          <TextInputStep clear="true" client="$(client)" component="Terminal"
                         id="_1udq" postdelay="1000">
            <text>root</text>
          </TextInputStep>
          <KeyEventStep client="$(client)" component="Terminal"
                        event="KEY_PTR" id="_1udr" keychar="13" keycode="10"
                        modifiers="0" postdelay="3000"/>
          <TextInputStep clear="true" client="$(client)" component="Terminal"
                         id="_1vFu" postdelay="1000">
            <text>root</text>
          </TextInputStep>
          <KeyEventStep client="$(client)" component="Terminal"
                        event="KEY_PTR" id="_1vFv" keychar="13" keycode="10"
                        modifiers="0" postdelay="1000"/>
        </IfSequence>
        <TryStep id="_1vGH" name="clear Terminal">
          <ProcedureCall id="_1vGI" procedure="terminalClear"/>
          <CatchSequence exception="TestException" id="_1vGJ" maxerror="0"/>
        </TryStep>
      </RepeatSequence>
      <ProcedureCall id="_1uds" procedure="utils.vlmConsoleKill"/>
      <ProcedureCall id="_1udt" procedure="uiTgtConnect">
        <variable name="bc">$(bc)</variable>
      </ProcedureCall>
      <RepeatSequence count="2" id="_1udu"
                      name="second try after grab the console">
        <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                      id="_1vG4" keychar="13" keycode="10" modifiers="0"
                      postdelay="2000"/>
        <ProcedureCall id="_1vG5" local="true" procedure="lxPrompt"
                       retvarname="prompt"/>
        <IfSequence id="_1vG6" test="$(prompt)">
          <ReturnStep id="_1vG7" retval="true"/>
        </IfSequence>
        <ProcedureCall id="_1vG8" local="true" procedure="lxLoginPrompt"
                       retvarname="loginPrompt"/>
        <IfSequence id="_1vG9" test="$(loginPrompt)">
          <TextInputStep clear="true" client="$(client)" component="Terminal"
                         id="_1vGA" postdelay="1000">
            <text>root</text>
          </TextInputStep>
          <KeyEventStep client="$(client)" component="Terminal"
                        event="KEY_PTR" id="_1vGB" keychar="13" keycode="10"
                        modifiers="0" postdelay="3000"/>
          <TextInputStep clear="true" client="$(client)" component="Terminal"
                         id="_1vGC" postdelay="1000">
            <text>root</text>
          </TextInputStep>
          <KeyEventStep client="$(client)" component="Terminal"
                        event="KEY_PTR" id="_1vGD" keychar="13" keycode="10"
                        modifiers="0" postdelay="1000"/>
        </IfSequence>
        <TryStep id="_1vGE" name="clear Terminal">
          <ProcedureCall id="_1vGF" procedure="terminalClear"/>
          <CatchSequence exception="TestException" id="_1vGG" maxerror="0"/>
        </TryStep>
      </RepeatSequence>
      <RepeatSequence count="3" id="_1ue2" name="third try after reboot">
        <ProcedureCall id="_1ue3" postdelay="10000"
                       procedure="utils.vlmReboot">
          <variable name="barcode">$(bc)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1ue4" postdelay="30000" procedure="uiTgtConnect">
          <variable name="bc">$(bc)</variable>
        </ProcedureCall>
        <RepeatSequence count="2" id="_1vGK"
                        name="second try after grab the console">
          <KeyEventStep client="$(client)" component="Terminal"
                        event="KEY_PTR" id="_1vGL" keychar="13" keycode="10"
                        modifiers="0" postdelay="2000"/>
          <ProcedureCall id="_1vGM" local="true" procedure="lxPrompt"
                         retvarname="prompt"/>
          <IfSequence id="_1vGN" test="$(prompt)">
            <ReturnStep id="_1vGO" retval="true"/>
          </IfSequence>
          <ProcedureCall id="_1vGP" local="true" procedure="lxLoginPrompt"
                         retvarname="loginPrompt"/>
          <IfSequence id="_1vGQ" test="$(loginPrompt)">
            <TextInputStep clear="true" client="$(client)"
                           component="Terminal" id="_1vGR" postdelay="1000">
              <text>root</text>
            </TextInputStep>
            <KeyEventStep client="$(client)" component="Terminal"
                          event="KEY_PTR" id="_1vGS" keychar="13" keycode="10"
                          modifiers="0" postdelay="3000"/>
            <TextInputStep clear="true" client="$(client)"
                           component="Terminal" id="_1vGT" postdelay="1000">
              <text>root</text>
            </TextInputStep>
            <KeyEventStep client="$(client)" component="Terminal"
                          event="KEY_PTR" id="_1vGU" keychar="13" keycode="10"
                          modifiers="0" postdelay="1000"/>
          </IfSequence>
          <TryStep id="_1vGV" name="clear Terminal">
            <ProcedureCall id="_1vGW" procedure="terminalClear"/>
            <CatchSequence exception="TestException" id="_1vGX" maxerror="0"/>
          </TryStep>
        </RepeatSequence>
      </RepeatSequence>
      <ReturnStep id="_1ueF" retval="false"/>
    </Procedure>
    <Procedure id="_1uCz" name="terminalClear">
      <ProcedureCall id="_1uYt" procedure="uiClickTerminalView"/>
      <TryStep id="_1uC+" name="clickTerminal">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uC-" modifiers="16" x="1"
                        y="1"/>
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uDL" modifiers="16"
                        popup="true" postdelay="1000" x="1" y="1"/>
        <SelectionEventStep client="$(client)"
                            component="menu-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll2"
                            event="SELECTION" id="_1uDK"/>
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uDM" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uD0"
                       maxerror="2"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1uD6" name="terminalSave">
      <ProcedureCall id="_1ube" procedure="uiClickTerminalView"/>
      <TryStep id="_1uDP" name="clickTerminal">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uDQ" modifiers="16" x="1"
                        y="1"/>
        <ClientScriptStep client="$(client)" engine="swt" id="_1uDN">
          <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()


rc.setLocal('tgtConsoleContent',content)


</code>
        </ClientScriptStep>
        <ProcedureCall id="_1uDO" procedure="qfs.run-log.logMessage">
          <variable name="message">$(tgtConsoleContent)</variable>
          <variable name="dontcompactify">false</variable>
          <variable name="report">true</variable>
        </ProcedureCall>
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uDT" modifiers="16" x="1"
                        y="1"/>
        <CatchSequence exception="ComponentNotFoundException" id="_1uDU"
                       maxerror="2"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1uU3" name="terminalCheck">
      <variable name="str">"toto="</variable>
      <ProcedureCall id="_1ubd" procedure="uiClickTerminalView"/>
      <TryStep id="_1uU4" name="clickTerminal">
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uU5" modifiers="16" x="1"
                        y="1"/>
        <ClientScriptStep client="$(client)" engine="swt" id="_1uU6">
          <code>import re

# get component
tgtConsole = rc.getComponent("Terminal")

# get output
tgtConsole.selectAll()
content = tgtConsole.getSelectionText()

#checkStr = re.compile(r'($(str)\d+)')
checkStr = re.compile(r'(toto=\d+)')
m = checkStr.search(content)
if m != None:
    rc.setLocal('matchit',1)
else:
    rc.setLocal('matchit',0)



</code>
        </ClientScriptStep>
        <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                        event="MOUSE_MPRC" id="_1uU8" modifiers="16" x="1"
                        y="1"/>
        <IfSequence id="_1uUA" test="$(matchit)">
          <ReturnStep id="_1uUB" retval="true"/>
          <ElseSequence id="_1uUC">
            <ReturnStep id="_1uUD" retval="false"/>
          </ElseSequence>
        </IfSequence>
        <CatchSequence exception="ComponentNotFoundException" id="_1uU9"
                       maxerror="2"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vPY" name="terminalInput">
      <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                      event="MOUSE_MPRC" id="_1vPf" modifiers="16" x="1"
                      y="1"/>
      <TextInputStep client="$(client)" component="Terminal" id="_1vPa">
        <text>$(cmd)</text>
      </TextInputStep>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1vPl" keychar="32" keycode="32" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1vPm" keychar="13" keycode="10" modifiers="0"/>
    </Procedure>
    <Procedure id="_1v98" name="cmdLink">
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                        id="_1v99" local="true" resvarname="selected"/>
      <IfSequence id="_1v9A" test="not $(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                        event="MOUSE_MPRC" id="_1v9B" modifiers="16"/>
      </IfSequence>
    </Procedure>
    <Procedure id="_1v9C" name="cmdUnlink">
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                        id="_1v9D" local="true" resvarname="selected"/>
      <IfSequence id="_1v9E" test="$(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                        event="MOUSE_MPRC" id="_1v9F" modifiers="16"/>
      </IfSequence>
    </Procedure>
    <Procedure id="_1q+p" name="cmdAddBp">
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Command_Shell.canvas"
                      event="MOUSE_MPRC" id="_1q+q" modifiers="16" x="335"
                      y="61"/>
      <ClientScriptStep client="$(client)" engine="swt" id="_1q-K">
        <code>import pygtk
pygtk.require('2.0')
import gtk

# get the clipboard
clipboard = gtk.clipboard_get()

# set the clipboard text data
clipboard.set_text('b BALL::Move')
</code>
      </ClientScriptStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionPaste"
                      event="MOUSE_MPRC" id="_1q-O" modifiers="16"/>
      <KeyEventStep client="$(client)" component="Debug_Command_Shell.canvas"
                    event="KEY_PTR" id="_1q-Q" keychar="13" keycode="10"
                    modifiers="0"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Command_Shell.canvas"
                      event="MOUSE_MPRC" id="_1q-P" modifiers="16" x="335"
                      y="61"/>
    </Procedure>
    <Procedure id="_1r0y" name="cmdNext">
      <TryStep id="_1r1x">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1r22" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r0-" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r10" keychar="101" keycode="69" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r11" keychar="120" keycode="88" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r12" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r13" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r1y" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r1p" name="cmdN">
      <TryStep id="_1r1z">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1r21" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r1v" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r1w" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r1+" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r16" name="cmdStep">
      <TryStep id="_1r2J">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1r2K" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r18" keychar="115" keycode="83" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r19" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r1A" keychar="101" keycode="69" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r1B" keychar="112" keycode="80" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r1C" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r2N" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r2A" name="cmdS">
      <TryStep id="_1r2O">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1r2P" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r2Q" keychar="115" keycode="83" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r2U" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r2V" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r2-" name="cmdUntil">
      <TryStep id="_1v6-" name="first">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1v70" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v71" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v72" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v73" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v74" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v75" keychar="108" keycode="76" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v76" keychar="32" keycode="32" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7J" keychar="50" keycode="50" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7K" keychar="48" keycode="48" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v79" keychar="13" keycode="10" modifiers="0"
                      postdelay="1000"/>
        <CatchSequence exception="TestException" id="_1v7A" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <TryStep id="_1v7L" name="second">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1v7M" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7N" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7O" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7P" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7Q" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7R" keychar="108" keycode="76" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7S" keychar="32" keycode="32" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7T" keychar="50" keycode="50" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7X" keychar="51" keycode="51" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7V" keychar="13" keycode="10" modifiers="0"
                      postdelay="1000"/>
        <CatchSequence exception="TestException" id="_1v7W" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <TryStep id="_1v7Y" name="third">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1v7Z" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7a" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7b" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7c" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7d" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7e" keychar="108" keycode="76" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7f" keychar="32" keycode="32" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7g" keychar="50" keycode="50" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7k" keychar="54" keycode="54" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1v7i" keychar="13" keycode="10" modifiers="0"
                      postdelay="1000"/>
        <CatchSequence exception="TestException" id="_1v7j" maxerror="0"
                       name="ignore"/>
      </TryStep>
      <TryStep id="_1r30" name="31">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1r31" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r35" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r36" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r37" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r38" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r39" keychar="108" keycode="76" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r3A" keychar="32" keycode="32" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r3P" keychar="51" keycode="51" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r3Q" keychar="49" keycode="49" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r33" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r34" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1vCl" name="cmdUntilOne">
      <TryStep id="_1vDK" name="31">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1vDL" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDM" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDN" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDO" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDP" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDQ" keychar="108" keycode="76" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDR" keychar="32" keycode="32" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDS" keychar="51" keycode="51" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDT" keychar="49" keycode="49" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1vDU" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1vDV" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r4X" name="cmdUntil174">
      <TryStep id="_1r4Y">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1r4Z" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4a" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4b" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4c" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4d" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4e" keychar="108" keycode="76" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4f" keychar="32" keycode="32" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4k" keychar="49" keycode="49" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="tabbedTipNew_Context,id=511_-_uma-common_pc-standard-glibc_small-128.224.165.60_pek-wb-fast_(8).canvas"
                      event="KEY_PTR" id="_1r4u" keychar="55" keycode="55"
                      modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="tabbedTipNew_Context,id=511_-_uma-common_pc-standard-glibc_small-128.224.165.60_pek-wb-fast_(8).canvas"
                      event="KEY_PTR" id="_1r4v" keychar="52" keycode="52"
                      modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4i" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r4j" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r3v" name="cmdFinish">
      <TryStep id="_1r3w">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1r3x" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r46" keychar="102" keycode="70" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r47" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r48" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r49" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4A" keychar="115" keycode="83" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r4B" keychar="104" keycode="72" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r44" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r45" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r54" name="cmdBreakLine">
      <TryStep id="_1r55">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas"
                        event="MOUSE_MPRC" id="_1r56" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5g" keychar="98" keycode="66" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5h" keychar="32" keycode="32" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5i" keychar="49" keycode="49" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5j" keychar="55" keycode="55" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5k" keychar="52" keycode="52" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5D" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r5E" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r5x" name="cmdScriptPenguin">
      <ProcedureCall id="_1vTa" local="true" procedure="utils.getGdbPenguin"
                     retvarname="penguinGdbScript"/>
      <ProcedureCall id="_1vTc" procedure="cmdInput">
        <variable name="cmd">$(penguinGdbScript)</variable>
      </ProcedureCall>
      <TryStep disabled="true" id="_1r6Z">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas" disabled="true"
                        event="MOUSE_MPRC" id="_1r6j" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5z" keychar="115" keycode="83" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5+" keychar="111" keycode="79" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r5-" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r60" keychar="114" keycode="82" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r61" keychar="99" keycode="67" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r62" keychar="101" keycode="69" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r63" keychar="32" keycode="32" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r64" keychar="47" keycode="47" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r65" keychar="102" keycode="70" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r66" keychar="111" keycode="79" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r67" keychar="108" keycode="76" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r68" keychar="107" keycode="75" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r69" keychar="47" keycode="47" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6A" keychar="121" keycode="89" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6B" keychar="122" keycode="90" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6C" keychar="104" keycode="72" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6D" keychar="97" keycode="65" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6E" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6F" keychar="103" keycode="71" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6G" keychar="48" keycode="48" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6H" keychar="47" keycode="47" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6I" keychar="98" keycode="66" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6J" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6K" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6L" keychar="47" keycode="47" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6M" keychar="112" keycode="80" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6N" keychar="101" keycode="69" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6O" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6P" keychar="103" keycode="71" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6Q" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6R" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6S" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6T" keychar="46" keycode="46" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6U" keychar="103" keycode="71" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6V" keychar="100" keycode="68" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6W" keychar="98" keycode="66" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r6X" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r6h" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1r6v" name="cmdContinue">
      <TryStep id="_1r6w">
        <MouseEventStep clicks="1" client="$(client)"
                        component="Debug_Command_Shell.canvas" disabled="true"
                        event="MOUSE_MPRC" id="_1r6x" modifiers="16" x="173"
                        y="85"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7Y" keychar="99" keycode="67" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7Z" keychar="111" keycode="79" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7a" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7b" keychar="116" keycode="84" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7c" keychar="105" keycode="73" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7d" keychar="110" keycode="78" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7e" keychar="117" keycode="85" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7f" keychar="101" keycode="69" modifiers="0"/>
        <KeyEventStep client="$(client)"
                      component="Debug_Command_Shell.canvas" event="KEY_PTR"
                      id="_1r7W" keychar="13" keycode="10" modifiers="0"/>
        <CatchSequence exception="TestException" id="_1r7X" maxerror="0"
                       name="ignore"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1v7o" name="cmdInput">
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Command_Shell.canvas"
                      event="MOUSE_MPRC" id="_1v7p" modifiers="16" x="82"
                      y="60"/>
      <TextInputStep client="$(client)" component="Debug_Command_Shell.canvas"
                     id="_1v7q">
        <text>$(cmd)</text>
      </TextInputStep>
      <KeyEventStep client="$(client)" component="Debug_Command_Shell.canvas"
                    event="KEY_PTR" id="_1v7r" keychar="32" keycode="32"
                    modifiers="0"/>
      <KeyEventStep client="$(client)" component="Debug_Command_Shell.canvas"
                    event="KEY_PTR" id="_1v7s" keychar="13" keycode="10"
                    modifiers="0"/>
    </Procedure>
    <Procedure id="_1vmU" name="fExportTgtCon">
      <SelectionEventStep client="$(client)" component="menu-file"
                          event="SELECTION" id="_1vmV" postdelay="1000"/>
      <SelectionEventStep client="$(client)" component="menu-file-export"
                          event="SELECTION" id="_1vmW" postdelay="1000"/>
      <ComponentWaiter client="$(client)" component="ImportExportWizard"
                       id="_1vmX" postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="importExportPage.tree@/General"
                      event="MOUSE_MPRC" id="_1vmY" modifiers="16"
                      postdelay="1000" x="-32" y="11"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="importExportPage.tree@/General/Wind River Target Connections"
                      event="MOUSE_MPRC" id="_1vmZ" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext3"
                      event="MOUSE_MPRC" id="_1vma" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonDirectory" event="MOUSE_MPRC"
                      id="_1vmb" modifiers="16" postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="button_Browse..._2" event="MOUSE_MPRC"
                      id="_1vmc" modifiers="16" postdelay="2000"/>
      <ComponentWaiter client="$(client)" component="comBrowse_for_Folder"
                       id="_1vmd" postdelay="1000"/>
      <SelectionEventStep client="$(client)" component="comBrowse_for_Folder"
                          detail="$(wdmWorkspace)" event="SELECTION"
                          id="_1vme" postdelay="1000"/>
      <TryStep id="_1vmf" name="select all">
        <MouseEventStep clicks="1" client="$(client)"
                        component="WRExportTargetConnectionWizard.tree@/default (localhost)"
                        event="MOUSE_MPRC" id="_1vmg" modifiers="16"
                        postdelay="1000" x="-28" y="13"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="WRExportTargetConnectionWizard.tree@/default (localhost)"
                        event="MOUSE_MPRC" id="_1vmh" modifiers="16"
                        postdelay="1000" x="-28" y="13"/>
        <CheckBooleanStep checktype="enabled" client="$(client)"
                          component="buttonNext4" id="_1vqT" local="true"
                          resvarname="disabled" state="false"/>
        <IfSequence id="_1vqU" test="$(disabled)">
          <MouseEventStep clicks="1" client="$(client)"
                          component="WRExportTargetConnectionWizard.tree@/default (localhost)"
                          event="MOUSE_MPRC" id="_1vqV" modifiers="16"
                          postdelay="1000" x="-28" y="13"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1vmi" maxerror="0"/>
      </TryStep>
      <ProcedureCall id="_1vqf"
                     procedure="qfs.run-log.screenshots.logScreenshot">
        <variable name="inSUT">false</variable>
        <variable name="title">target connection directory</variable>
        <variable name="dontcompactify">false</variable>
        <variable name="report">true</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext4"
                      event="MOUSE_MPRC" id="_1vmj" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="com.windriver.ide.target.ui.wizard.importexport.WRExportTargetConnectionSubstitutionPreviewPage.tree&amp;/0"
                      event="MOUSE_MPRC" id="_1vmk" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonConfigure..." event="MOUSE_MPRC"
                      id="_1vml" modifiers="16" postdelay="1000"/>
      <ComponentWaiter client="$(client)"
                       component="WRExportTargetConnectionSubstitutionPreviewPage__3__2"
                       id="_1vmm"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRExportTargetConnectionSubstitutionPreviewPage__3__2.tree@Variable@/Wind River environment/$$(WIND_BASE)"
                      event="MOUSE_MPRC" id="_1vmn" modifiers="16"
                      postdelay="1000" x="-16" y="10"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WRExportTargetConnectionSubstitutionPreviewPage__3__2.tree@Variable@/Wind River environment/$$(WIND_BASE)"
                      event="MOUSE_MPRC" id="_1vmo" modifiers="16"
                      postdelay="1000" x="-16" y="10"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonCancel5"
                      event="MOUSE_MPRC" id="_1vmp" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonFinish2"
                      event="MOUSE_MPRC" id="_1vmq" modifiers="16"
                      postdelay="1000"/>
      <TryStep id="_1vn0" name="force over write">
        <ComponentWaiter client="$(client)" component="MessageDialog"
                         id="_1vm-" local="true" resvarname="exist"
                         timeout="5000"/>
        <IfSequence id="_1vn2" name="message dialog" test="$(exist)">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel6" event="MOUSE_MPRC"
                          id="_1vmw" modifiers="16"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1vn1" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1voH" name="fImportTgtCon">
      <SelectionEventStep client="$(client)" component="menu-file"
                          event="SELECTION" id="_1voI" postdelay="1000"/>
      <SelectionEventStep client="$(client)" component="menu-file-import"
                          event="SELECTION" id="_1voo" postdelay="1000"/>
      <ComponentWaiter client="$(client)" component="ImportExportWizard"
                       id="_1voK" postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="importExportPage.tree@/General"
                      event="MOUSE_MPRC" id="_1voL" modifiers="16"
                      postdelay="1000" x="-32" y="11"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="importExportPage.tree@/General/Wind River Target Connections"
                      event="MOUSE_MPRC" id="_1voM" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonNext3"
                      event="MOUSE_MPRC" id="_1voN" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonDirectory2" event="MOUSE_MPRC"
                      id="_1vou" modifiers="16" postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="button_Browse..._3" event="MOUSE_MPRC"
                      id="_1voz" modifiers="16" postdelay="1000"/>
      <ComponentWaiter client="$(client)" component="comBrowse_for_Folder"
                       id="_1voQ" postdelay="1000"/>
      <SelectionEventStep client="$(client)" component="comBrowse_for_Folder"
                          detail="$(wdmWorkspace)" event="SELECTION"
                          id="_1voR" postdelay="1000"/>
      <TryStep id="_1voS" name="select all">
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonSelect_All" event="MOUSE_MPRC"
                        id="_1vp8" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1voV" maxerror="0"/>
      </TryStep>
      <ProcedureCall id="_1vqg"
                     procedure="qfs.run-log.screenshots.logScreenshot">
        <variable name="inSUT">false</variable>
        <variable name="title">target connection directory</variable>
        <variable name="dontcompactify">false</variable>
        <variable name="report">true</variable>
      </ProcedureCall>
      <MouseEventStep clicks="1" client="$(client)" component="buttonFinish3"
                      event="MOUSE_MPRC" id="_1vpE" modifiers="16"/>
      <TryStep id="_1voe" name="force over write">
        <ComponentWaiter client="$(client)" component="MessageDialog"
                         id="_1vof" local="true" resvarname="exist"
                         timeout="5000"/>
        <IfSequence id="_1vog" name="message dialog" test="$(exist)">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonCancel6" event="MOUSE_MPRC"
                          id="_1vpF" modifiers="16"/>
        </IfSequence>
        <CatchSequence exception="TestException" id="_1voi" maxerror="0"/>
      </TryStep>
    </Procedure>
  </PackageRoot>
  <ExtraSequence id="_4">
    <Procedure id="_1szE" name="uiSetTerminal">
      <MouseEventStep clicks="1" client="$(client)"
                      component="tool-org.eclipse.tm.internal.terminal.actions.TerminalActionSettings"
                      event="MOUSE_MPRC" id="_1szG" modifiers="16"/>
      <TryStep id="_1sza">
        <ComponentWaiter client="$(client)" component="TerminalSettingsDlg"
                         id="_1szH"/>
        <CatchSequence exception="TestException" id="_1szb" maxerror="0"/>
      </TryStep>
      <SelectionEventStep client="$(client)"
                          component="groupConnection_Type:.combo@Telnet"
                          event="SELECTION" id="_1szI" postdelay="2000"/>
      <TextInputStep clear="true" client="$(client)"
                     component="groupSettings:.text" id="_1szK"
                     postdelay="1000">
        <text>$(tsIP)</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupSettings:.combo" id="_1szM"
                     postdelay="1000">
        <text>$(tsPort)</text>
      </TextInputStep>
      <TextInputStep clear="true" client="$(client)"
                     component="groupSettings:.text2" id="_1szR"
                     postdelay="1000">
        <text>10</text>
      </TextInputStep>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk6"
                      event="MOUSE_MPRC" id="_1szZ" modifiers="16"
                      postdelay="1000"/>
    </Procedure>
    <BasicSequence id="_1s+I" name="26Keystroke">
      <MouseEventStep clicks="1" client="$(client)" component="Terminal"
                      event="MOUSE_MPRC" id="_1s+J" modifiers="16" x="219"
                      y="399"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+K" keychar="97" keycode="65" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+L" keychar="98" keycode="66" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+M" keychar="99" keycode="67" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+N" keychar="100" keycode="68" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+O" keychar="101" keycode="69" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+P" keychar="102" keycode="70" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+Q" keychar="103" keycode="71" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+R" keychar="104" keycode="72" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+S" keychar="105" keycode="73" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+T" keychar="103" keycode="71" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+b" keychar="104" keycode="72" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+c" keychar="105" keycode="73" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+d" keychar="106" keycode="74" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+e" keychar="107" keycode="75" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+f" keychar="108" keycode="76" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+g" keychar="109" keycode="77" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+h" keychar="110" keycode="78" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+i" keychar="111" keycode="79" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+j" keychar="112" keycode="80" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+k" keychar="113" keycode="81" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+l" keychar="105" keycode="73" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+m" keychar="115" keycode="83" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+n" keychar="116" keycode="84" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+o" keychar="117" keycode="85" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+p" keychar="118" keycode="86" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+q" keychar="119" keycode="87" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+r" keychar="120" keycode="88" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+s" keychar="121" keycode="89" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+t" keychar="122" keycode="90" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+u" keychar="47" keycode="47" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+y" keychar="92" keycode="92" modifiers="0"/>
      <KeyEventStep client="$(client)" component="Terminal" event="KEY_PTR"
                    id="_1s+z" keychar="13" keycode="10" modifiers="0"/>
    </BasicSequence>
    <Procedure id="_1tHJ" name="cleanModelDialog">
      <TryStep id="_1tHL">
        <MouseEventStep clicks="1" client="$(client)"
                        component="WorkbenchWindow" event="MOUSE_MPRC"
                        id="_1tHK" modifiers="1" x="1" y="1"/>
        <CatchSequence exception="ModalDialogException" id="_1tHM"
                       maxerror="0">
          <ProcedureCall id="_1tHP"
                         procedure="qfs.swt.cleanup.closeAllDialogsAndModalShells">
            <variable name="maxDialogs">5</variable>
          </ProcedureCall>
        </CatchSequence>
        <CatchSequence exception="TestException" id="_1tHN" maxerror="0"/>
      </TryStep>
    </Procedure>
    <Procedure id="_1u82" name="uiSetSash4Width">
      <FetchGeometryStep client="$(client)" component="WorkbenchWindow.sash4"
                         id="_1u8A" xvarname="sash4Width"/>
      <ProcedureCall id="_1u86" procedure="qfs.swt.sash.moveSash">
        <variable name="id">WorkbenchWindow.sash4</variable>
        <variable name="distance">1110-$(sash4Width)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1vQc" name="uiSetSash3Width">
      <FetchGeometryStep client="$(client)" component="WorkbenchWindow.sash3"
                         id="_1vQd" xvarname="sash3Width"/>
      <ProcedureCall id="_1vQe" procedure="qfs.swt.sash.moveSash">
        <variable name="id">WorkbenchWindow.sash3</variable>
        <variable name="distance">450-$(sash3Width)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1v7B" name="cmdInput">
      <variable name="cmd">$(cmd)</variable>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Debug_Command_Shell.canvas"
                      event="MOUSE_MPRC" id="_1v7C" modifiers="16" x="82"
                      y="60"/>
      <TextInputStep client="$(client)" component="Debug_Command_Shell.canvas"
                     id="_1v7l">
        <text>$(cmd)</text>
      </TextInputStep>
      <KeyEventStep client="$(client)" component="Debug_Command_Shell.canvas"
                    event="KEY_PTR" id="_1v7m" keychar="32" keycode="32"
                    modifiers="0"/>
      <KeyEventStep client="$(client)" component="Debug_Command_Shell.canvas"
                    event="KEY_PTR" id="_1v7n" keychar="13" keycode="10"
                    modifiers="0"/>
    </Procedure>
    <Procedure id="_1v8k" name="cmdLink">
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                        id="_1v91" local="true" resvarname="selected"/>
      <IfSequence id="_1v92" test="not $(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                        event="MOUSE_MPRC" id="_1v93" modifiers="16"/>
      </IfSequence>
    </Procedure>
    <Procedure id="_1v94" name="cmdUnlink">
      <CheckBooleanStep checktype="selected" client="$(client)"
                        component="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                        id="_1v95" local="true" resvarname="selected"/>
      <IfSequence id="_1v96" test="$(selected)">
        <MouseEventStep clicks="1" client="$(client)"
                        component="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                        event="MOUSE_MPRC" id="_1v97" modifiers="16"/>
      </IfSequence>
    </Procedure>
    <Procedure id="_1vFl" name="cmdCtrlC">
      <KeyEventStep client="$(client)" component="Debug_Command_Shell.canvas"
                    event="KEY_PTR" id="_1vFo" keychar="3" keycode="67"
                    modifiers="2"/>
    </Procedure>
    <Procedure id="_1vSM" name="uiEnableLxDev">
      <SelectionEventStep client="$(client)" component="menu-window"
                          event="SELECTION" id="_1vSN"/>
      <SelectionEventStep client="$(client)"
                          component="menu-window-preferences"
                          event="SELECTION" id="_1vSO"/>
      <ComponentWaiter client="$(client)"
                       component="WorkbenchPreferenceDialog" id="_1vSP"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WorkbenchPreferenceDialog.tree@/Wind River"
                      event="MOUSE_MPRC" id="_1vSQ" modifiers="0"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WorkbenchPreferenceDialog.tree@/Wind River/Capabilities"
                      event="MOUSE_MPRC" id="_1vSU" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="WorkbenchPreferenceDialog.tree2@/Development/Develop Linux Applications"
                      event="MOUSE_MPRC" id="_1vSW" modifiers="16"
                      postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonEnable_All" event="MOUSE_MPRC"
                      id="_1vSr" modifiers="16" postdelay="1000"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk30"
                      event="MOUSE_MPRC" id="_1vSY" modifiers="16"/>
    </Procedure>
    <Procedure id="_1vhz" name="rseAttachRtpAllTask">
      <variable name="dbgName">$(dbgName)</variable>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/$(conName).*/Wind River Target Debugger.*/VxWorks.*/Real Time Processes"
                      event="MOUSE_MPRC" id="_1vh+" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/$(conName).*/Wind River Target Debugger.*/VxWorks.*/Real Time Processes/$(dbgName).*"
                      event="MOUSE_MPRC" id="_1vh-" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="Remote_Systems%/$(conName).*/Wind River Target Debugger.*/VxWorks.*/Real Time Processes/$(dbgName).*"
                      event="MOUSE_MPRC" id="_1vi0" modifiers="4"
                      popup="true"/>
      <SelectionEventStep client="$(client)"
                          component="menu-com.windriver.ide.launch.ui.rse.WRAttachAction"
                          event="SELECTION" id="_1viA" postdelay="2000"/>
    </Procedure>
    <BasicSequence id="_1vr0" name="Recorded 2/1/12 4:48 PM">
      <MouseEventStep clicks="1" client="$(client)"
                      component="sectionGeneral2.text" event="MOUSE_MOVED"
                      id="_1vr1" modifiers="0" x="23" y="1"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="sectionGeneral2.text" event="MOUSE_PRESSED"
                      id="_1vr2" modifiers="16" x="23" y="1"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="LaunchConfigurationsDialog"
                      event="MOUSE_MOVED" id="_1vr3" modifiers="0" x="487"
                      y="424"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="sectionGeneral2.text" event="MOUSE_RELEASED"
                      id="_1vr4" modifiers="16" x="23" y="1"/>
      <TextInputStep clear="true" client="$(client)"
                     component="sectionGeneral2.text" id="_1vr5">
        <text>a</text>
      </TextInputStep>
    </BasicSequence>
    <Procedure id="_1vsA" name="closeGetStarted">
      <SelectionEventStep client="$(client)"
                          component="tabfolder-Editor@Getting Started"
                          event="SELECTION" id="_1vsB"/>
      <SelectionEventStep client="$(client)"
                          component="tabfolder-Editor@Getting Started"
                          detail="close" event="SELECTION" id="_1vsC"/>
      <ComponentWaiter client="$(client)" component="WROptionalMessageDialog"
                       id="_1vsD"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="buttonDo_not_show_again" event="MOUSE_MPRC"
                      id="_1vsE" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="buttonOk27"
                      event="MOUSE_MPRC" id="_1vsF" modifiers="16"/>
    </Procedure>
    <Procedure id="_1vsY" name="uiOpenOcdPespective">
      <TryStep id="_1vty" name="select ocd">
        <SelectionEventStep client="$(client)" component="menu-window"
                            event="SELECTION" id="_1vsZ"/>
        <SelectionEventStep client="$(client)"
                            component="menu-window-openPerspective"
                            event="SELECTION" id="_1vsa"/>
        <SelectionEventStep client="$(client)" component="menuitemOther...3"
                            event="SELECTION" id="_1vsb"/>
        <ComponentWaiter client="$(client)"
                         component="SelectPerspectiveDialog" id="_1vsc"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="buttonShow_all" event="MOUSE_MPRC"
                        id="_1vse" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="SelectPerspectiveDialog.table&amp;0&amp;10"
                        event="MOUSE_MPRC" id="_1vsf" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="buttonOk10"
                        event="MOUSE_MPRC" id="_1vsg" modifiers="16"/>
        <CatchSequence exception="TestException" id="_1vtz" maxerror="0"/>
      </TryStep>
    </Procedure>
    <BasicSequence id="_1vsh" name="Recorded 2/23/12 10:16 AM">
      <CheckStringStep client="$(client)"
                       component="SelectPerspectiveDialog.table&amp;0"
                       id="_1vsi"/>
      <FetchTextStep client="$(client)"
                     component="SelectPerpectiveDialog.table" id="_1vsj"
                     local="true" varname="res"/>
    </BasicSequence>
    <Procedure id="_1vtr" name="uiClosePrjExp">
      <SelectionEventStep client="$(client)"
                          component="tabfolder-left@Project Explorer"
                          detail="close" event="SELECTION" id="_1vts"/>
    </Procedure>
  </ExtraSequence>
  <WindowList id="wdm_pespective" uid="_5">
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Device Debug - Wind River Workbench Debug Mode"
                height="796" id="WorkbenchWindow" name="WorkbenchWindow"
                uid="_1rZf" width="1342">
      <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                     classindex="0" height="378" id="Remote_Systems"
                     name="Remote Systems" uid="_1rZg" width="330" x="11"
                     y="148"/>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="3"
                     classindex="0" height="269" id="WorkbenchWindow.book"
                     uid="_1rZh" width="331" x="1000" y="486">
        <ComponentStep class="org.eclipse.swt.custom.SashForm" classcount="1"
                       classindex="0" height="269" id="WorkbenchWindow.sash"
                       uid="_1rZi" width="331" x="0" y="0">
          <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                         classindex="0" height="329" id="WorkbenchWindow.tree"
                         uid="_1rsz" width="492" x="0" y="0"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.CTabFolder" classcount="5"
                     classindex="1" height="443" id="tabfolder-Remote_Systems"
                     name="tabfolder-Remote Systems" uid="_1raO" width="336"
                     x="8" y="86"/>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="6" height="28" id="toolbar-Remote_Systems"
                     name="toolbar-Remote Systems" uid="_1rZl" width="262"
                     x="55" y="118">
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="13" classindex="0"
                       feature="ToolTip: Define a connection to remote system"
                       height="28"
                       id="toolItemTipDefine_a_connection_to_remote_system"
                       uid="_1rZm" width="28" x="0" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">1030069672</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="13" classindex="2"
                       feature="ToolTip: Connect" height="28"
                       id="tool-com.windriver.ide.target.ui.rse.ConnectAction"
                       name="tool-com.windriver.ide.target.ui.rse.ConnectAction"
                       uid="_1rZn" width="28" x="34" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">104245473</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="13" classindex="3"
                       feature="ToolTip: Disconnect" height="28"
                       id="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                       name="tool-com.windriver.ide.target.ui.rse.DisconnectAction"
                       uid="_1rZo" width="28" x="62" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1202089759</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="13" classindex="8"
                       feature="ToolTip: Resync and Refresh Processes (F5)"
                       height="28"
                       id="toolItemTipResync_and_Refresh_Processes_(F5)"
                       uid="_1rZp" width="28" x="166" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">345603720</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="49"
                     classindex="23" height="442" id="Debug_Symbol_Browser"
                     name="Debug Symbol Browser" uid="_1u" width="351" x="11"
                     y="148">
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="1"
                       classindex="0" height="27"
                       id="Debug_Symbol_Browser.text" uid="_1v" width="260"
                       x="86" y="5"/>
        <ComponentStep class="org.eclipse.swt.custom.SashForm" classcount="1"
                       classindex="0" height="400"
                       id="Debug_Symbol_Browser.sash" uid="_1w" width="351"
                       x="0" y="37">
          <ComponentStep class="org.eclipse.swt.widgets.Table" classcount="1"
                         classindex="0" height="400"
                         id="Debug_Symbol_Browser.table" uid="_1x" width="351"
                         x="0" y="0"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.CTabFolder" classcount="5"
                     classindex="2" height="158" id="tabfolder-Console"
                     name="tabfolder-Console" uid="_1y" width="836" x="8"
                     y="596"/>
      <ComponentStep class="org.eclipse.swt.widgets.Menu" feature="Bar"
                     height="25" id="menuBar" uid="_1rZq" width="1334" x="4"
                     y="21">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem" classcount="8"
                       classindex="0" feature="File" height="23"
                       id="menu-file" name="menu-file" uid="_1rZr" width="34"
                       x="1" y="1">
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="26" classindex="25" feature="Exit"
                         height="23" id="menu-file-quit" name="menu-file-quit"
                         uid="_1rZs" width="365" x="0" y="476"/>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="26" classindex="3" feature="Close All"
                         height="23" id="menu-file-closeAll"
                         name="menu-file-closeAll" uid="_1rZt" width="365"
                         x="0" y="58"/>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="26" classindex="16" feature="Export..."
                         height="23" id="menu-file-export"
                         name="menu-file-export" uid="_1vlN" width="382" x="0"
                         y="288">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">-1112675883</extrafeature>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="27" classindex="15" feature="Import..."
                         height="23" id="menu-file-import"
                         name="menu-file-import" uid="_1voj" width="382" x="0"
                         y="265">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">1311099746</extrafeature>
          </ComponentStep>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem" classcount="8"
                       classindex="6" feature="Window" height="23"
                       id="menu-window" name="menu-window" uid="_1rZu"
                       width="65" x="290" y="1">
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="14" classindex="3" feature="Show View"
                         height="23" id="menu-window-showView"
                         name="menu-window-showView" uid="_1rZv" width="190"
                         x="0" y="58">
            <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                           classcount="27" classindex="5"
                           feature="Debug Symbol Browser" height="23"
                           id="menuitemDebug_Symbol_Browser" uid="_1rZw"
                           width="319" x="0" y="115">
              <extrafeature name="imagehash" negate="false" regexp="false"
                            state="1">-876769808</extrafeature>
            </ComponentStep>
            <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                           classcount="27" classindex="26" feature="Other..."
                           height="23" id="menuitemOther..." uid="_1rZx"
                           width="319" x="0" y="587"/>
            <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                           classcount="28" classindex="27" feature="Other..."
                           height="23" id="menuitemOther...2" uid="_1syQ"
                           width="319" x="0" y="610"/>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="14" classindex="13" feature="Preferences"
                         height="23" id="menu-window-preferences"
                         name="menu-window-preferences" uid="_1rZy"
                         width="190" x="0" y="255"/>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="16" classindex="2"
                         feature="Open Perspective" height="23"
                         id="menu-window-openPerspective"
                         name="menu-window-openPerspective" uid="_1vsS"
                         width="207" x="0" y="30">
            <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                           classcount="6" classindex="5" feature="Other..."
                           height="23" id="menuitemOther...3" uid="_1vsT"
                           width="257" x="0" y="99"/>
          </ComponentStep>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem" classcount="8"
                       classindex="5" feature="Run" height="23"
                       id="menu-org.eclipse.ui.run"
                       name="menu-org.eclipse.ui.run" uid="_1ra2" width="38"
                       x="252" y="1">
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="30" classindex="0" feature="Resume"
                         height="23"
                         id="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.Resume"
                         name="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.Resume"
                         uid="_1ra3" width="325" x="0" y="0">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">184379757</extrafeature>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="30" classindex="5" feature="Step Return"
                         height="23"
                         id="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                         name="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.StepReturn"
                         uid="_1ra4" width="325" x="0" y="115">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">1805323485</extrafeature>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="30" classindex="19"
                         feature="Debug Configurations..." height="23"
                         id="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenDebugConfigurations"
                         name="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenDebugConfigurations"
                         uid="_1ra5" width="325" x="0" y="404"/>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="30" classindex="21" feature="Breakpoints"
                         height="23"
                         id="menu-org.eclipse.ui.run-dfeBreakpoints"
                         name="menu-org.eclipse.ui.run-dfeBreakpoints"
                         uid="_1ra6" width="325" x="0" y="439">
            <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                           classcount="5" classindex="1"
                           feature="Add Expression Breakpoint..." height="23"
                           id="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                           name="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addExpressionBreakpointAction"
                           uid="_1nfg" width="213" x="0" y="23">
              <extrafeature name="imagehash" negate="false" regexp="false"
                            state="1">806123465</extrafeature>
            </ComponentStep>
            <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                           classcount="5" classindex="0"
                           feature="Add Line Breakpoint..." height="23"
                           id="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addLineBreakpointAction"
                           name="menu-org.eclipse.ui.run-dfeBreakpoints-com.windriver.ide.debug.ui.menu.addLineBreakpointAction"
                           uid="_1qnG" width="239" x="0" y="0">
              <extrafeature name="imagehash" negate="false" regexp="false"
                            state="1">50926853</extrafeature>
            </ComponentStep>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="30" classindex="27"
                         feature="Remove All Breakpoints" height="23"
                         id="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.RemoveAllBreakpoints"
                         name="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.RemoveAllBreakpoints"
                         uid="_1ra7" width="325" x="0" y="577">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">-1714364069</extrafeature>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="30" classindex="15"
                         feature="Run Configurations..." height="23"
                         id="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenRunConfigurations"
                         name="menu-org.eclipse.ui.run-org.eclipse.debug.ui.actions.OpenRunConfigurations"
                         uid="_1vh7" width="358" x="0" y="313"/>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem" classcount="8"
                       classindex="7" feature="Help" height="23"
                       id="menu-help" name="menu-help" uid="_1ra8" width="42"
                       x="355" y="1">
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="13" classindex="9"
                         feature="Getting Started" height="23"
                         id="menu-help-com.windriver.ide.devcenter.internal.WROpenDevCenterCommand"
                         name="menu-help-com.windriver.ide.devcenter.internal.WROpenDevCenterCommand"
                         uid="_1n9T" width="389" x="0" y="174">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">514140532</extrafeature>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         classcount="13" classindex="12"
                         feature="About Wind River Workbench Debug Mode"
                         height="23" id="menu-help-about"
                         name="menu-help-about" uid="_1nAW" width="389" x="0"
                         y="232"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="3"
                     classindex="2" height="241" id="Debug" name="Debug"
                     uid="_1ra0" width="331" x="1000" y="177">
        <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                       classindex="0" height="241" id="Debug.tree" uid="_1ra1"
                       width="331" x="0" y="0"/>
        <ComponentStep class="org.eclipse.swt.widgets.ScrollBar" height="292"
                       id="Debug.scrollbar" uid="_1thq" width="15" x="457"
                       y="0"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Menu"
                     feature="Popup InvokerName: Remote Systems" height="503"
                     id="popup-Remote_Systems" name="popup-Remote Systems"
                     uid="_4F" width="312">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Delete..." height="23" id="menu-delete"
                       name="menu-delete" uid="_4G" width="308" x="0" y="209">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-771298515</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       classcount="17" classindex="5" feature="Debug"
                       height="23"
                       id="menu-com.windriver.ide.launch.ui.rse.WRDebugSubMenuAction"
                       name="menu-com.windriver.ide.launch.ui.rse.WRDebugSubMenuAction"
                       uid="_1nS3" width="284" x="0" y="93">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1554698064</extrafeature>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         feature="Attach to yzhang0 main and Threads"
                         height="21"
                         id="menuitemAttach_to_yzhang0_main_and_Threads"
                         uid="_1oWV" width="291" x="0" y="21">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">847683310</extrafeature>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         feature="Attach to penguin and Threads" height="23"
                         id="menuitemAttach_to_penguin_and_Threads"
                         uid="_1sUj" width="227" x="0" y="23">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">847683310</extrafeature>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                         feature="Attach to mthread_rtp_vip_linux_icc_smp and Tasks"
                         height="23"
                         id="menuitemAttach_to_mthread_rtp_vip_linux_icc_smp_and_Tasks"
                         uid="_1vhw" width="389" x="0" y="23">
            <extrafeature name="imagehash" negate="false" regexp="false"
                          state="1">847683310</extrafeature>
          </ComponentStep>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Kill Target Server" height="23"
                       id="menu-com.windriver.ide.target.ui.rse.actions.TSKillAction"
                       name="menu-com.windriver.ide.target.ui.rse.actions.TSKillAction"
                       uid="_1nVp" width="433" x="0" y="290"/>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       classcount="23" classindex="5" feature="Run"
                       height="23"
                       id="menu-com.windriver.ide.launch.ui.rse.WRRunSubMenuAction"
                       name="menu-com.windriver.ide.launch.ui.rse.WRRunSubMenuAction"
                       uid="_1sUi" width="322" x="0" y="93">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">1512990294</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       classcount="35" classindex="0" feature="New"
                       height="23" id="menu-menu.new" name="menu-menu.new"
                       uid="_1soj" width="624" x="0" y="0"/>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Attach to mthread_rtp_vip_linux_icc_smp and Tasks"
                       height="23"
                       id="menu-com.windriver.ide.launch.ui.rse.WRAttachAction"
                       name="menu-com.windriver.ide.launch.ui.rse.WRAttachAction"
                       uid="_1vi5" width="443" x="0" y="30">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">847683310</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Canvas" classcount="7"
                     classindex="6" height="468" id="canvas-Editor"
                     name="canvas-Editor" uid="_1n4a" width="472" x="371"
                     y="118">
        <ComponentStep class="org.eclipse.swt.custom.StyledText"
                       classcount="1" classindex="0" height="468"
                       id="canvas-Editor.text" uid="_1n4b" width="422" x="37"
                       y="0"/>
        <ComponentStep class="org.eclipse.swt.widgets.Canvas" classcount="6"
                       classindex="2" height="390" id="canvas-Editor.canvas"
                       uid="_1rbx" width="12" x="0" y="0"/>
        <ComponentStep class="org.eclipse.swt.widgets.Canvas" classcount="6"
                       classindex="3" height="390" id="canvas-Editor.canvas2"
                       uid="_1sqa" width="24" x="12" y="0"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="5" height="28" id="toolbar-Debug"
                     name="toolbar-Debug" uid="_1ra9" width="331" x="1000"
                     y="147">
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="12" classindex="0"
                       feature="ToolTip: Remove All Terminated Launches"
                       height="28"
                       id="tool-org.eclipse.debug.ui.debugview.toolbar.removeAllTerminated"
                       name="tool-org.eclipse.debug.ui.debugview.toolbar.removeAllTerminated"
                       uid="_1raA" width="28" x="0" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1714364069</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="12" classindex="2"
                       feature="ToolTip: Resume" height="28"
                       id="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                       name="tool-org.eclipse.debug.ui.debugview.toolbar.resume"
                       uid="_1raB" width="28" x="56" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">184379757</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="12" classindex="4"
                       feature="ToolTip: Terminate" height="28"
                       id="tool-org.eclipse.debug.ui.debugview.toolbar.terminate"
                       name="tool-org.eclipse.debug.ui.debugview.toolbar.terminate"
                       uid="_1raC" width="28" x="112" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">704215196</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="12" classindex="7"
                       feature="ToolTip: Step Into" height="28"
                       id="tool-org.eclipse.debug.ui.debugview.toolbar.stepInto"
                       name="tool-org.eclipse.debug.ui.debugview.toolbar.stepInto"
                       uid="_1raD" width="28" x="174" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1965906100</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="12" classindex="8"
                       feature="ToolTip: Step Over" height="28"
                       id="tool-org.eclipse.debug.ui.debugview.toolbar.stepOver"
                       name="tool-org.eclipse.debug.ui.debugview.toolbar.stepOver"
                       uid="_1raE" width="28" x="202" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">831502134</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="15" classindex="3"
                       feature="ToolTip: Suspend" height="28"
                       id="tool-org.eclipse.debug.ui.debugview.toolbar.suspend"
                       name="tool-org.eclipse.debug.ui.debugview.toolbar.suspend"
                       uid="_1rc-" width="28" x="84" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">1259721335</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="17" classindex="9"
                       feature="ToolTip: Step Return (F7)" height="28"
                       id="tool-org.eclipse.debug.ui.debugview.toolbar.stepReturn"
                       name="tool-org.eclipse.debug.ui.debugview.toolbar.stepReturn"
                       uid="_1rhK" width="28" x="230" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">1805323485</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.CTabFolder" classcount="5"
                     classindex="4" height="334"
                     id="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)"
                     name="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport)"
                     uid="_1raF" width="337" x="997" y="424">
        <ComponentStep class="org.eclipse.swt.custom.ViewForm" classcount="1"
                       classindex="0" height="299"
                       id="tabfolder-PerspectiveLayoutView(com.windriver.ide.importexport).view"
                       uid="_1raG" width="331" x="3" y="32"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.CLabel" classcount="1"
                     classindex="0" height="26" id="WorkbenchWindow.label"
                     uid="_1raH" width="625" x="273" y="760"/>
      <ComponentStep class="org.eclipse.swt.widgets.Menu"
                     feature="Popup InvokerClass: Table" height="143"
                     id="menuPopup_InvokerClass:_Table" uid="_1nZz"
                     width="147">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Show Declaration" height="23"
                       id="menuitemShow_Declaration" uid="_1na3" width="143"
                       x="0" y="0"/>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Show Disassembly" height="27"
                       id="menuitemShow_Disassembly" uid="_1vVE" width="178"
                       x="0" y="27"/>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Add to Expressions" height="23"
                       id="menuitemAdd_to_Expressions" uid="_1vX-" width="182"
                       x="0" y="46"/>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Toggle Breakpoint" height="23"
                       id="menuitemToggle_Breakpoint" uid="_1vj1" width="182"
                       x="0" y="46"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Menu"
                     feature="Popup InvokerClass: Tree" height="789"
                     id="menuPopup_InvokerClass:_Tree" uid="_1nh8"
                     width="514">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Terminate and Relaunch" height="23"
                       id="menu-org.eclipse.debug.ui.debugview.popupMenu.TerminateAndRelaunch"
                       name="menu-org.eclipse.debug.ui.debugview.popupMenu.TerminateAndRelaunch"
                       uid="_1njz" width="532" x="0" y="485">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-2044870418</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Start Debug Command Shell" height="23"
                       id="menu-com.windriver.ide.debug.ui.console.attachHostShellAction"
                       name="menu-com.windriver.ide.debug.ui.console.attachHostShellAction"
                       uid="_1nkz" width="532" x="0" y="104">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">105195937</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       classcount="37" classindex="6" feature="Stack Frame"
                       height="23" id="menu-dfeStackFrame"
                       name="menu-dfeStackFrame" uid="_1nlq" width="532" x="0"
                       y="127"/>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Set Scope to &#34;mthread_stack : 4354&#34;"
                       height="23"
                       id="menu-com.windriver.ide.debug.ui.restrictBreakpointScopeAction"
                       name="menu-com.windriver.ide.debug.ui.restrictBreakpointScopeAction"
                       uid="_1rku" width="318" x="0" y="254">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1233718977</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Relaunch" height="23"
                       id="menu-org.eclipse.debug.ui.debugview.popupMenu.relaunch"
                       name="menu-org.eclipse.debug.ui.debugview.popupMenu.relaunch"
                       uid="_1rpe" width="647" x="0" y="474">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">408300503</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Properties..." height="23"
                       id="menu-com.windriver.ide.debug.ui.breakpointPropertiesAction"
                       name="menu-com.windriver.ide.debug.ui.breakpointPropertiesAction"
                       uid="_1rpg" width="318" x="0" y="323">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-953490714</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       classcount="34" classindex="4" feature="Target Mode"
                       height="23"
                       id="menu-com.windriver.ide.debug.ui.actions.popup.targetModePopupAction"
                       name="menu-com.windriver.ide.debug.ui.actions.popup.targetModePopupAction"
                       uid="_1sVo" width="867" x="0" y="76">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1045506817</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Menu"
                     feature="Popup InvokerClass: StyledText" height="583"
                     id="menuPopup_InvokerClass:_StyledText" uid="_1nhs"
                     width="304">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Run to Line" height="23"
                       id="menu-com.windriver.ide.debug.ui.editor.runToLineAction"
                       name="menu-com.windriver.ide.debug.ui.editor.runToLineAction"
                       uid="_1nht" width="300" x="0" y="58">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1200148303</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Clear" height="23" id="menuitemClear"
                       uid="_1uY6" width="231" x="0" y="150">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-486800661</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="3"
                     classindex="0" height="191" id="Debug_Command_Shell"
                     name="Debug Command Shell" uid="_1nl3" width="930" x="11"
                     y="564">
        <ComponentStep class="org.eclipse.swt.custom.CTabFolder"
                       classcount="1" classindex="0" height="191"
                       id="Debug_Command_Shell.tabbed" uid="_1nl4" width="930"
                       x="0" y="0">
          <ComponentStep class="org.eclipse.tm.internal.terminal.textcanvas.TextCanvas"
                         classcount="1" classindex="0" height="168"
                         id="Debug_Command_Shell.canvas" uid="_1nl5"
                         width="928" x="1" y="22"/>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.custom.CTabFolder"
                       classcount="1" classindex="0"
                       feature="ToolTip: New Context,id=511 - uma-common_pc-standard-glibc_small-128.224.165.60@pek-wb-fast (8)"
                       height="189"
                       id="tabbedTipNew_Context,id=511_-_uma-common_pc-standard-glibc_small-128.224.165.60_pek-wb-fast_(8)"
                       uid="_1r4o" width="980" x="0" y="0">
          <ComponentStep class="org.eclipse.tm.internal.terminal.textcanvas.TextCanvas"
                         classcount="1" classindex="0" height="166"
                         id="tabbedTipNew_Context,id=511_-_uma-common_pc-standard-glibc_small-128.224.165.60_pek-wb-fast_(8).canvas"
                         uid="_1r4p" width="978" x="1" y="22"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="3" height="28" id="toolbar-Expressions"
                     name="toolbar-Expressions" uid="_1nqI" width="306"
                     x="1003" y="454">
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="13" classindex="4"
                       feature="ToolTip: Create a new watch expression"
                       height="28"
                       id="tool-org.eclipse.debug.ui.expresssionsView.toolbar.AddWatchExpression"
                       name="tool-org.eclipse.debug.ui.expresssionsView.toolbar.AddWatchExpression"
                       uid="_1nqJ" width="28" x="90" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-2084319295</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="13" classindex="6"
                       feature="ToolTip: Remove All Expressions" height="28"
                       id="tool-org.eclipse.debug.ui.expresssionsView.toolbar.removeAll"
                       name="tool-org.eclipse.debug.ui.expresssionsView.toolbar.removeAll"
                       uid="_1nrG" width="28" x="146" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1714364069</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="3"
                     classindex="0" height="267" id="Expressions"
                     name="Expressions" uid="_1nqR" width="408" x="925"
                     y="484">
        <ComponentStep class="org.eclipse.swt.custom.SashForm" classcount="1"
                       classindex="0" height="267" id="Expressions.sash"
                       uid="_1nqS" width="408" x="0" y="0">
          <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                         classindex="0" height="267" id="Expressions.tree"
                         uid="_1nqT" width="408" x="0" y="0"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="2"
                     classindex="0" height="263" id="Registers"
                     name="Registers" uid="_1nuA" width="331" x="1006"
                     y="480">
        <ComponentStep class="org.eclipse.swt.custom.SashForm" classcount="1"
                       classindex="0" height="263" id="Registers.sash"
                       uid="_1nuB" width="331" x="0" y="0">
          <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                         classindex="0" height="263" id="Registers.tree"
                         uid="_1nuC" width="331" x="0" y="0"/>
          <ComponentStep class="org.eclipse.swt.widgets.ScrollBar"
                         height="251" id="Registers.scrollbar" uid="_1sbv"
                         width="15" x="316" y="0"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="59"
                     classindex="26" height="191" id="Memory_Browser"
                     name="Memory Browser" uid="_1nua" width="980" x="11"
                     y="564">
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27" id="Memory_Browser2.combo"
                       uid="_1nub" width="842" x="12" y="1"/>
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                       classindex="0" feature="Go" height="29" id="buttonGo2"
                       uid="_1nuc" width="30" x="859" y="0"/>
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                       classindex="1" feature="New Tab" height="29"
                       id="buttonNew_Tab2" uid="_1nut" width="66" x="894"
                       y="0"/>
        <ComponentStep class="org.eclipse.swt.custom.CTabFolder"
                       classcount="1" classindex="0" height="160"
                       id="Memory_Browser2.tabbed" uid="_1qF+" width="1099"
                       x="0" y="29">
          <ComponentStep class="org.eclipse.cdt.debug.ui.memory.traditional.DataPane"
                         classcount="1" classindex="0" height="137"
                         id="Memory_Browser2.canvas" uid="_1qF-" width="628"
                         x="97" y="22"/>
          <ComponentStep class="org.eclipse.cdt.debug.ui.memory.traditional.AddressPane"
                         classcount="1" classindex="0" height="137"
                         id="Memory_Browser2.canvas2" uid="_1qG0" width="96"
                         x="1" y="22"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.ScrolledComposite"
                     classcount="1" classindex="0" height="637" id="Progress"
                     name="Progress" uid="_1o8G" width="331" x="1000" y="118">
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="1"
                       classindex="0" height="21" id="Progress.text"
                       uid="_1o8n" width="236" x="5" y="5"/>
        <ComponentStep class="org.eclipse.swt.widgets.Label" classcount="2"
                       classindex="1" feature="Saving RSE Profile.*"
                       height="17" id="labelSaving_RSE" regexp="true"
                       uid="_1ts4" width="493" x="24" y="4"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="3" height="30"
                     id="toolbar-Debug_Command_Shell"
                     name="toolbar-Debug Command Shell" uid="_1qzy"
                     width="148" x="803" y="541">
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem" classcount="6"
                       classindex="1" feature="ToolTip: Clear Terminal"
                       height="28"
                       id="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll"
                       name="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll"
                       uid="_1qzz" width="28" x="29" y="1">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-486800661</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem" classcount="6"
                       classindex="5" feature="ToolTip: Paste" height="28"
                       id="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionPaste"
                       name="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionPaste"
                       uid="_1q-L" width="28" x="119" y="1">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-675631439</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem" classcount="6"
                       classindex="0"
                       feature="ToolTip: Link with Active Debug Context"
                       height="28"
                       id="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                       name="tool-com.windriver.ide.debug.internal.ui.console.actions.LinkWithDebugViewAction"
                       uid="_1v8j" width="28" x="0" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-124098242</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="3"
                     classindex="0" height="264" id="Breakpoints"
                     name="Breakpoints" uid="_1rZW" width="331" x="997"
                     y="499">
        <ComponentStep class="org.eclipse.swt.custom.SashForm" classcount="1"
                       classindex="0" height="264" id="Breakpoints.sash"
                       uid="_1rZX" width="331" x="0" y="0">
          <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                         classindex="0" height="264" id="Breakpoints.tree"
                         uid="_1rZY" width="331" x="0" y="0"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.CTabFolder" classcount="5"
                     classindex="4" height="334" id="tabfolder-Registers"
                     name="tabfolder-Registers" uid="_1rZb" width="337"
                     x="997" y="424"/>
      <ComponentStep class="org.eclipse.swt.custom.ScrolledComposite"
                     classcount="1" classindex="0" height="637"
                     id="WorkbenchWindow.scroll" uid="_1sNq" width="382"
                     x="917" y="118">
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="1"
                       classindex="0" height="21" id="WorkbenchWindow.text"
                       uid="_1sNr" width="236" x="5" y="5"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Menu" height="1"
                     id="WorkbenchWindow.menu" uid="_1sUk" width="1" x="3"
                     y="45">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Attach to penguin and Threads" height="1"
                       id="menuitemAttach_to_penguin_and_Threads2" uid="_1sUl"
                       width="1" x="-1" y="-1">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">847683310</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Menu" feature="Popup"
                     height="27" id="menuPopup" uid="_1sUp" width="95"/>
      <ComponentStep class="org.eclipse.swt.custom.CTabFolder" classcount="3"
                     classindex="0" feature="ToolTip: Close" height="672"
                     id="tabfolder-Editor" name="tabfolder-Editor" uid="_1sUq"
                     width="615" x="347" y="86"/>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="3"
                     classindex="0" height="269" id="Variables"
                     name="Variables" uid="_1sb7" width="331" x="1000"
                     y="486">
        <ComponentStep class="org.eclipse.swt.custom.SashForm" classcount="1"
                       classindex="0" height="269" id="Variables.sash"
                       uid="_1sb8" width="331" x="0" y="0">
          <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                         classindex="0" height="269" id="Variables.tree"
                         regexp="true" uid="_1sb9" width="331" x="0" y="0"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.CTabFolder" classcount="5"
                     classindex="2" height="226"
                     id="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)"
                     name="tabfolder-TerminalView(com.windriver.ide.ocd.ui.command)"
                     uid="_1sfO" width="986" x="8" y="532"/>
      <ComponentStep class="org.eclipse.swt.widgets.Menu"
                     feature="Popup InvokerClass: CompositeRuler$$CompositeRulerCanvas"
                     height="397"
                     id="menuPopup_InvokerClass:_CompositeRuler_CompositeRulerCanvas"
                     uid="_1sfp" width="279">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Add Dynamic 'printf'..." height="23"
                       id="menu-com.windriver.ide.debug.ui.addDynamicPrintfDotDotDotRulerAction"
                       name="menu-com.windriver.ide.debug.ui.addDynamicPrintfDotDotDotRulerAction"
                       uid="_1sfq" width="275" x="0" y="69">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1630540294</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Show Line Numbers" height="23"
                       id="menu-Linenumbers.Toggle"
                       name="menu-Linenumbers.Toggle" uid="_1sqV" width="275"
                       x="0" y="312"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="7" height="23" id="WorkbenchWindow.toolbar"
                     uid="_1sob" width="178" x="93" y="760">
        <ComponentStep class="org.eclipse.swt.custom.CLabel" classcount="1"
                       classindex="0" height="19" id="labelPC" regexp="true"
                       uid="_1soh" width="174" x="2" y="2"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.CoolBar" classcount="6"
                     classindex="0" height="28" id="WorkbenchWindow.coolbar"
                     uid="_1sqz" width="1132" x="6" y="52">
        <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="18"
                       classindex="8" height="28"
                       id="WorkbenchWindow.toolbar2" uid="_1sq+" width="724"
                       x="408" y="0"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.tm.internal.terminal.textcanvas.TextCanvas"
                     classcount="1" classindex="0" height="172" id="Terminal"
                     name="Terminal" uid="_1sz3" width="980" x="11" y="583"/>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="3" height="28" id="toolbar-Terminal"
                     name="toolbar-Terminal" uid="_1sz4" width="246" x="708"
                     y="533">
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem" classcount="9"
                       classindex="2" feature="ToolTip: Settings" height="28"
                       id="tool-org.eclipse.tm.internal.terminal.actions.TerminalActionSettings"
                       name="tool-org.eclipse.tm.internal.terminal.actions.TerminalActionSettings"
                       uid="_1sz5" width="28" x="56" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">1449997528</extrafeature>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem" classcount="9"
                       classindex="1" feature="ToolTip: Disconnect"
                       height="28"
                       id="tool-org.eclipse.tm.internal.terminal.actions.TerminalActionDisconnect"
                       name="tool-org.eclipse.tm.internal.terminal.actions.TerminalActionDisconnect"
                       uid="_1s-1" width="28" x="28" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">1277211999</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="51"
                     classindex="15" height="30" id="WorkbenchWindow.com"
                     uid="_1tHQ" width="55" x="1278" y="760"/>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="3"
                     classindex="1" height="191" id="Target_Consoles"
                     name="Target Consoles" uid="_1tgX" width="852" x="11"
                     y="564">
        <ComponentStep class="org.eclipse.swt.custom.CTabFolder"
                       classcount="1" classindex="0" height="191"
                       id="Target_Consoles.tabbed" uid="_1tgY" width="852"
                       x="0" y="0">
          <ComponentStep class="org.eclipse.tm.internal.terminal.textcanvas.TextCanvas"
                         classcount="1" classindex="0" height="168"
                         id="Target_Consoles.canvas" uid="_1tgZ" width="850"
                         x="1" y="22"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Sash" classcount="4"
                     classindex="0" height="523" id="WorkbenchWindow.sash3"
                     uid="_1thZ" width="3" x="344" y="86"/>
      <ComponentStep class="org.eclipse.swt.widgets.Sash" classcount="2"
                     classindex="1" height="852" id="WorkbenchWindow.sash4"
                     uid="_1u7r" width="3" x="1252" y="86"/>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="2"
                     classindex="0" height="359" id="WorkbenchWindow.book2"
                     uid="_1u8U" width="473" x="1116" y="576">
        <ComponentStep class="org.eclipse.swt.custom.SashForm" classcount="1"
                       classindex="0" height="359" id="WorkbenchWindow.sash6"
                       uid="_1u8V" width="473" x="0" y="0">
          <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                         classindex="0" height="359"
                         id="WorkbenchWindow.tree2" uid="_1u8c" width="473"
                         x="0" y="0"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Menu"
                     feature="Popup InvokerClass: TextCanvas" height="159"
                     id="menuPopup_InvokerClass:_TextCanvas" uid="_1u9i"
                     width="172">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Clear Terminal" height="23"
                       id="menu-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll"
                       name="menu-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll"
                       uid="_1u9j" width="172" x="0" y="53">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-486800661</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Sash" classcount="4"
                     classindex="2" height="3" id="WorkbenchWindow.sash2"
                     uid="_1uA4" width="1105" x="5" y="592"/>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="4" height="30" id="toolbar-Target_Consoles"
                     name="toolbar-Target Consoles" uid="_1uAq" width="120"
                     x="950" y="504">
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem" classcount="5"
                       classindex="0" feature="ToolTip: Clear Terminal"
                       height="28"
                       id="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll2"
                       name="tool-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll"
                       uid="_1uAr" width="28" x="1" y="1">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-486800661</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Menu"
                     feature="Popup InvokerName: Terminal" height="166"
                     id="popup-Terminal" name="popup-Terminal" uid="_1uDF"
                     width="215">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Clear Terminal" height="23"
                       id="menu-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll2"
                       name="menu-org.eclipse.tm.internal.terminal.control.actions.TerminalActionClearAll"
                       uid="_1uDG" width="211" x="0" y="58">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-486800661</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.CTabFolder" classcount="5"
                     classindex="3"
                     feature="ToolTip: Terminal: Telnet: (128.224.164.69:2016 - CONNECTED)"
                     height="226" id="tabfolder-Terminal"
                     name="tabfolder-Terminal" uid="_1uUb" width="1102" x="8"
                     y="712"/>
      <ComponentStep class="org.eclipse.ui.part.PageBook" classcount="3"
                     classindex="0" height="172" id="Console" name="Console"
                     uid="_1uXz" width="1096" x="11" y="763">
        <ComponentStep class="org.eclipse.swt.widgets.Label" classcount="1"
                       classindex="0" height="172" id="Console.label"
                       uid="_1uX+" width="1096" x="0" y="0"/>
        <ComponentStep class="org.eclipse.swt.custom.StyledText"
                       classcount="1" classindex="0" height="172"
                       id="Console.text" uid="_1uY1" width="1096" x="0"
                       y="0"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="4" height="28" id="toolbar-Console"
                     name="toolbar-Console" uid="_1uY4" width="308" x="762"
                     y="713">
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                       classcount="12" classindex="4"
                       feature="ToolTip: Clear Console" height="28"
                       id="toolItemTipClear_Console" uid="_1uY5" width="28"
                       x="90" y="0">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-486800661</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="53"
                     classindex="38" height="387" id="Editor" name="Editor"
                     uid="_1vVN" width="651" x="456" y="160">
        <ComponentStep class="org.eclipse.swt.widgets.Canvas" classcount="4"
                       classindex="0" height="354" id="canvas-Editor2"
                       name="canvas-Editor" uid="_1vVO" width="651" x="0"
                       y="2">
          <ComponentStep class="org.eclipse.swt.custom.StyledText"
                         classcount="1" classindex="0" height="354"
                         id="canvas-Editor2.text" uid="_1vVP" width="545"
                         x="93" y="0"/>
          <ComponentStep class="org.eclipse.swt.widgets.Canvas" classcount="6"
                         classindex="3" height="335"
                         id="canvas-Editor2.canvas" uid="_1vVS" width="80"
                         x="12" y="0"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.ToolBar" classcount="8"
                     classindex="3" height="30"
                     id="toolbar-Debug_Symbol_Browser"
                     name="toolbar-Debug Symbol Browser" uid="_1vX9"
                     width="126" x="295" y="131">
        <ComponentStep class="org.eclipse.swt.widgets.ToolItem" classcount="6"
                       classindex="0"
                       feature="ToolTip: Enable Symbol Filters, switch off to see all Symbols"
                       height="28"
                       id="toolItemTipEnable_Symbol_Filters,_switch_off_to_see_all_Symbols"
                       uid="_1vXA" width="28" x="1" y="1">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">-1605563839</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Menu" height="1"
                     id="WorkbenchWindow.menu2" uid="_1vhx" width="1" x="0"
                     y="55">
        <ComponentStep class="org.eclipse.swt.widgets.MenuItem"
                       feature="Attach to mthread_rtp_vip_linux_icc_smp and Tasks"
                       height="1"
                       id="menuitemAttach_to_mthread_rtp_vip_linux_icc_smp_and_Tasks2"
                       uid="_1vhy" width="1" x="-1" y="-1">
          <extrafeature name="imagehash" negate="false" regexp="false"
                        state="1">847683310</extrafeature>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.custom.CTabFolder" classcount="5"
                     classindex="1" feature="ToolTip: Close" height="502"
                     id="tabfolder-left" name="tabfolder-left" uid="_1vtq"
                     width="445" x="5" y="97"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="New Connection" height="579"
                id="RSEMainNewConnectionWizard" modal="true"
                name="RSEMainNewConnectionWizard" uid="_N" width="525">
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="9"
                     classindex="4" height="357"
                     id="RSENewConnectionWizardSelectionPage"
                     name="RSENewConnectionWizardSelectionPage" uid="_O"
                     width="507" x="9" y="96">
        <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                       classindex="0" height="292"
                       id="RSENewConnectionWizardSelectionPage.tree" uid="_P"
                       width="497" x="5" y="60"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="1" feature="Next &gt;" height="29"
                     id="buttonNext" name="buttonNext" uid="_Q" width="92"
                     x="222" y="531"/>
      <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="1"
                     classindex="0" height="34"
                     id="RSEMainNewConnectionWizard.text" uid="_1tIC"
                     width="431" x="15" y="56"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="New Connection" height="579"
                id="WRNewConnectionWizard" modal="true"
                name="WRNewConnectionWizard" uid="_R" width="525">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="5"
                     classindex="2" feature="Next &gt;" height="29"
                     id="buttonNext2" name="buttonNext" uid="_S" width="92"
                     x="222" y="531"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="5"
                     classindex="4" feature="Finish" height="29"
                     id="buttonFinish" name="buttonFinish" uid="_T" width="92"
                     x="668" y="616"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="5"
                     classindex="0"
                     feature="Immediately connect to target if possible"
                     height="17"
                     id="buttonImmediately_connect_to_target_if_possible"
                     uid="_BE" width="629" x="23" y="547"/>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="3"
                     classindex="0" feature="Backend settings" height="148"
                     id="groupBackend_settings" uid="_B7" width="969" x="15"
                     y="101">
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="2"
                       classindex="1" height="27" id="settings.combo"
                       uid="_B8" width="603" x="182" y="52"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="2"
                       classindex="0" height="27"
                       id="groupBackend_settings.combo" uid="_1nNR"
                       width="514" x="80" y="56"/>
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="2"
                       classindex="1" height="27"
                       id="groupBackend_settings.text" uid="_1pWv" width="61"
                       x="533" y="89"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="4"
                       classindex="1" height="27"
                       id="groupBackend_settings.combo2" uid="_1r8U"
                       width="299" x="217" y="89"/>
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="3"
                       classindex="1" height="27"
                       id="groupBackend_settings.text2" uid="_1r8V"
                       width="191" x="85" y="122"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="4"
                       classindex="2" height="27"
                       id="groupBackend_settings.combo3" uid="_1r8W"
                       width="198" x="396" y="122"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="6"
                       classindex="3" height="27"
                       id="groupBackend_settings.combo4" uid="_1r8X"
                       width="196" x="102" y="154"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="6"
                       classindex="4" height="27"
                       id="groupBackend_settings.combo5" uid="_1r8Y"
                       width="187" x="407" y="154"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="6"
                       classindex="5" height="27"
                       id="groupBackend_settings.combo6" uid="_1r8Z"
                       width="506" x="88" y="186"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="6"
                       classindex="2" height="27"
                       id="groupBackend_settings.combo7" uid="_1r9T"
                       width="198" x="396" y="122"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="4"
                       classindex="3" height="27"
                       id="groupBackend_settings.combo8" uid="_1r9U"
                       width="241" x="175" y="155"/>
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="3"
                       classindex="2" height="27"
                       id="groupBackend_settings.text3" uid="_1r9V" width="61"
                       x="533" y="155"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="6"
                       classindex="1" height="27"
                       id="groupBackend_settings.combo9" uid="_1rB4"
                       width="299" x="217" y="89"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="12"
                     classindex="1" feature="Add..." height="29"
                     id="buttonAdd...4" uid="_1nCL" width="66" x="562"
                     y="235"/>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="3"
                     classindex="1" feature="Target file system" height="68"
                     id="groupTarget_file_system" uid="_1nCQ" width="614"
                     x="14" y="326">
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27"
                       id="groupTarget_file_system.combo" uid="_1nCR"
                       width="390" x="128" y="28"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0"
                       feature="ToolTip: /net/128.224.158.35/buildarea/yzhang0/lx14wb16/common_pc-standard-glibc_small/export/dist/"
                       height="27"
                       id="comboTip/net/128.224.158.35/buildarea/yzhang0/lx14wb16/common_pc-standard-glibc_small/export/dist/"
                       uid="_1r8a" width="377" x="128" y="28"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Table" classcount="1"
                     classindex="0" height="306"
                     id="WRNewConnectionWizard.table" uid="_1nCg" width="543"
                     x="14" y="235"/>
      <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="2"
                     classindex="0" height="27"
                     id="WRNewConnectionWizard.text" uid="_1nG3" width="401"
                     x="138" y="101"/>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="2"
                     classindex="0" feature="Default breakpoint stop scope"
                     height="78" id="groupDefault_breakpoint_stop_scope"
                     uid="_1nHQ" width="861" x="14" y="139">
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                       classindex="1" feature="Stop triggering thread"
                       height="22" id="buttonStop_triggering_thread"
                       uid="_1nHR" width="847" x="7" y="49"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="2" feature="Cancel" height="29"
                     id="buttonCancel19" name="buttonCancel" uid="_1nLH"
                     width="92" x="424" y="683"/>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="3"
                     classindex="0"
                     feature="Wind River Linux platform project" height="58"
                     id="groupWind_River_Linux_platform_project" uid="_1nOc"
                     width="497" x="14" y="133">
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27"
                       id="groupWind_River_Linux_platform_project.combo"
                       uid="_1nOd" width="294" x="112" y="23"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="3"
                     classindex="1" feature="QEMU simulator configuration"
                     height="343" id="groupQEMU_simulator_configuration"
                     uid="_1nvN" width="532" x="14" y="196">
        <ComponentStep class="org.eclipse.swt.widgets.Table" classcount="1"
                       classindex="0" height="190"
                       id="groupQEMU_simulator_configuration.table"
                       uid="_1nvO" width="518" x="7" y="22"/>
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="2"
                       classindex="0" height="24"
                       id="groupQEMU_simulator_configuration.text" uid="_1n-N"
                       width="194" x="311" y="78"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="1"
                     classindex="0" feature="Select boot file name"
                     height="168" id="groupSelect_boot_file_name" uid="_1tID"
                     width="497" x="14" y="101">
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="6"
                       classindex="3" feature="Custom simulator:" height="22"
                       id="buttonCustom_simulator:" uid="_1tIE" width="142"
                       x="7" y="108"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27"
                       id="groupSelect_boot_file_name.combo" uid="_1tIF"
                       width="245" x="161" y="106"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27" id="comboTip" uid="_1tIR"
                       width="245" x="161" y="106"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="3"
                     classindex="1" feature="Kernel image" height="112"
                     id="groupKernel_image" uid="_1u7L" width="747" x="14"
                     y="360">
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                       classindex="1" feature="File:" height="22"
                       id="buttonFile:" uid="_1u7M" width="49" x="7" y="52"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27" id="groupKernel_image.combo"
                       uid="_1u7N" width="588" x="68" y="50"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="13"
                     classindex="4" height="587"
                     id="WRNewConnectionWizard.com" uid="_1u7O" width="757"
                     x="9" y="96"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="5"
                     classindex="1" feature="&lt; Back" height="29"
                     id="buttonBack" name="buttonBack" uid="_1vkW" width="107"
                     x="158" y="544"/>
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="9"
                     classindex="4" height="356"
                     id="RSENewConnectionWizardSelectionPage2"
                     name="RSENewConnectionWizardSelectionPage" uid="_1vkX"
                     width="601" x="6" y="107">
        <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                       classindex="0" height="292"
                       id="RSENewConnectionWizardSelectionPage2.tree"
                       uid="_1vkY" width="591" x="5" y="59"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="1"
                     classindex="0" feature="Systems" height="419"
                     id="groupSystems" uid="_1vko" width="581" x="16" y="117">
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="10"
                       classindex="0" feature="Processor:" height="22"
                       id="buttonProcessor:" uid="_1vkp" width="91" x="7"
                       y="25"/>
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="1"
                       classindex="0" height="27" id="groupSystems.text"
                       uid="_1vkq" width="361" x="110" y="23"/>
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="10"
                       classindex="1" feature=" Select... " height="29"
                       id="button_Select..._" uid="_1vkr" width="98" x="476"
                       y="22"/>
      </ComponentStep>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Debug Configurations" height="640"
                id="LaunchConfigurationsDialog" modal="true"
                name="LaunchConfigurationsDialog" uid="_10" width="1080">
      <ComponentStep class="org.eclipse.swt.custom.SashForm" classcount="1"
                     classindex="0" height="476"
                     id="LaunchConfigurationsDialog.sash" uid="_11"
                     width="1057" x="9" y="96">
        <ComponentStep class="org.eclipse.swt.custom.ViewForm" classcount="2"
                       classindex="0" height="476"
                       id="LaunchConfigurationsDialog.view" uid="_12"
                       width="250" x="0" y="0">
          <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                         classindex="0" height="384"
                         id="LaunchConfigurationsDialog.tree" uid="_13"
                         width="238" x="6" y="64"/>
          <ComponentStep class="org.eclipse.swt.widgets.ToolBar"
                         classcount="1" classindex="0" height="28"
                         id="LaunchConfigurationsDialog.toolbar" uid="_14"
                         width="248" x="1" y="1">
            <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                           classcount="6" classindex="2"
                           feature="ToolTip: Delete selected launch configuration(s)"
                           height="28"
                           id="toolItemTipDelete_selected_launch_configuration(s)"
                           uid="_15" width="28" x="56" y="0">
              <extrafeature name="imagehash" negate="false" regexp="false"
                            state="1">-771298515</extrafeature>
            </ComponentStep>
            <ComponentStep class="org.eclipse.swt.widgets.ToolItem"
                           classcount="6" classindex="0"
                           feature="ToolTip: New launch configuration"
                           height="22"
                           id="toolItemTipNew_launch_configuration" uid="_9p"
                           width="23" x="0" y="0"/>
          </ComponentStep>
        </ComponentStep>
        <ComponentStep class="org.eclipse.swt.custom.ViewForm" classcount="2"
                       classindex="1" height="481"
                       id="LaunchConfigurationsDialog.view22" uid="_9q"
                       width="593" x="187" y="0">
          <ComponentStep class="org.eclipse.swt.custom.CTabFolder"
                         classcount="1" classindex="0" height="377"
                         id="LaunchConfigurationsDialog.tabbed2" uid="_9r"
                         width="571" x="11" y="46">
            <ComponentStep class="org.eclipse.swt.custom.ScrolledComposite"
                           classcount="1" classindex="0" height="393"
                           id="LaunchConfigurationsDialog.scroll2" uid="_1n4M"
                           width="737" x="1" y="22">
              <ComponentStep class="org.eclipse.ui.forms.widgets.ScrolledForm"
                             classcount="1" classindex="0"
                             feature="Linux Application Options" height="568"
                             id="scrollLinux_Application_Options" uid="_1nS7"
                             width="597" x="5" y="5">
                <ComponentStep class="org.eclipse.ui.forms.widgets.Form"
                               classcount="1" classindex="0"
                               feature="Linux Application Options"
                               height="568" id="formLinux_Application_Options"
                               uid="_1nS8" width="597" x="0" y="0">
                  <ComponentStep class="org.eclipse.ui.forms.widgets.Section"
                                 classcount="3" classindex="0"
                                 feature="General" height="199"
                                 id="sectionGeneral8" uid="_1nS9" width="587"
                                 x="5" y="213">
                    <ComponentStep class="org.eclipse.swt.widgets.Button"
                                   classcount="7" classindex="3"
                                   feature="Exec Path on Target:" height="22"
                                   id="buttonExec_Path_on_Target:2"
                                   uid="_1nSA" width="154" x="26" y="68"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="5" classindex="1" height="27"
                                   id="sectionGeneral8.text" uid="_1nSB"
                                   width="300" x="192" y="66"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Button"
                                   classcount="7" classindex="0"
                                   feature="Exec Path on Host:" height="22"
                                   id="buttonExec_Path_on_Host:" uid="_1nVz"
                                   width="143" x="26" y="34"/>
                  </ComponentStep>
                  <ComponentStep class="org.eclipse.swt.widgets.Tree"
                                 classcount="1" classindex="0" height="137"
                                 id="formLinux_Application_Options.tree"
                                 uid="_1ufi" width="746" x="5" y="71"/>
                </ComponentStep>
              </ComponentStep>
              <ComponentStep class="org.eclipse.ui.forms.widgets.ScrolledForm"
                             classcount="1" classindex="0"
                             feature="VxWorks Kernel Task Options"
                             height="488"
                             id="scrollVxWorks_Kernel_Task_Options"
                             uid="_1tdF" width="709" x="5" y="5">
                <ComponentStep class="org.eclipse.ui.forms.widgets.Form"
                               classcount="1" classindex="0"
                               feature="VxWorks Kernel Task Options"
                               height="488"
                               id="formVxWorks_Kernel_Task_Options"
                               uid="_1tdG" width="709" x="0" y="0">
                  <ComponentStep class="org.eclipse.swt.widgets.Tree"
                                 classcount="1" classindex="0" height="137"
                                 id="formVxWorks_Kernel_Task_Options.tree"
                                 uid="_1tdH" width="699" x="5" y="71"/>
                  <ComponentStep class="org.eclipse.ui.forms.widgets.Section"
                                 classcount="3" classindex="0"
                                 feature="General" height="97"
                                 id="sectionGeneral" uid="_1tdI" width="699"
                                 x="5" y="213">
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="2" classindex="0" height="27"
                                   id="sectionGeneral.text" uid="_1tdJ"
                                   width="491" x="113" y="32"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Button"
                                   classcount="1" classindex="0"
                                   feature=" Browse... " height="29"
                                   id="button_Browse..._" uid="_1tdx"
                                   width="79" x="641" y="31"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="2" classindex="1" height="27"
                                   id="sectionGeneral.text2" uid="_1teX"
                                   width="607" x="113" y="65"/>
                  </ComponentStep>
                  <ComponentStep class="org.eclipse.ui.forms.widgets.Section"
                                 classcount="3" classindex="1"
                                 feature="Advanced" height="26"
                                 id="sectionAdvanced" uid="_1td-" width="731"
                                 x="5" y="315">
                    <ComponentStep class="org.eclipse.ui.forms.widgets.Twistie"
                                   classcount="1" classindex="0" height="11"
                                   id="sectionAdvanced.toggle" uid="_1te0"
                                   width="11" x="6" y="7"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="3" classindex="2" height="27"
                                   id="sectionAdvanced.text" uid="_1teY"
                                   width="502" x="158" y="172"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Button"
                                   classcount="1" classindex="0"
                                   feature=" Edit... " height="29"
                                   id="button_Edit..._" uid="_1teZ" width="55"
                                   x="665" y="171"/>
                  </ComponentStep>
                  <ComponentStep class="org.eclipse.ui.forms.widgets.Section"
                                 classcount="3" classindex="2" feature="Debug"
                                 height="119" id="sectionDebug" uid="_1ted"
                                 width="731" x="5" y="525">
                    <ComponentStep class="org.eclipse.swt.widgets.Button"
                                   classcount="4" classindex="1"
                                   feature="Automatically attach spawned Kernel Tasks"
                                   height="22"
                                   id="buttonAutomatically_attach_spawned_Kernel_Tasks"
                                   uid="_1tee" width="694" x="26" y="58"/>
                  </ComponentStep>
                </ComponentStep>
              </ComponentStep>
              <ComponentStep class="org.eclipse.swt.widgets.Button"
                             classcount="5" classindex="0" feature="Add..."
                             height="29" id="buttonAdd..." uid="_1tdT"
                             width="60" x="672" y="32"/>
              <ComponentStep class="org.eclipse.ui.forms.widgets.ScrolledForm"
                             classcount="1" classindex="0"
                             feature="VxWorks Real Time Process Options"
                             height="532"
                             id="scrollVxWorks_Real_Time_Process_Options"
                             uid="_1tip" width="709" x="5" y="5">
                <ComponentStep class="org.eclipse.ui.forms.widgets.Form"
                               classcount="1" classindex="0"
                               feature="VxWorks Real Time Process Options"
                               height="532"
                               id="formVxWorks_Real_Time_Process_Options"
                               uid="_1tiq" width="709" x="0" y="0">
                  <ComponentStep class="org.eclipse.swt.widgets.Tree"
                                 classcount="1" classindex="0" height="137"
                                 id="formVxWorks_Real_Time_Process_Options.tree"
                                 uid="_1tir" width="699" x="5" y="71"/>
                  <ComponentStep class="org.eclipse.ui.forms.widgets.Section"
                                 classcount="3" classindex="0"
                                 feature="General" height="163"
                                 id="sectionGeneral2" uid="_1tis" width="699"
                                 x="5" y="213">
                    <ComponentStep class="org.eclipse.swt.widgets.Button"
                                   classcount="5" classindex="3"
                                   feature="Exec Path on Target:" height="22"
                                   id="buttonExec_Path_on_Target:" uid="_1tit"
                                   width="154" x="26" y="67"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="4" classindex="1" height="27"
                                   id="sectionGeneral2.text" uid="_1tiu"
                                   width="496" x="192" y="65"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="4" classindex="1"
                                   feature="ToolTip: /buildarea/yzhang0/2011-11-17-14-03/wdm_workspace/mthread_rtp/mthread_rtp.vxe"
                                   height="27"
                                   id="textTip/buildarea/yzhang0/2011-11-17-14-03/wdm_workspace/mthread_rtp/mthread_rtp.vxe"
                                   uid="_1tjM" width="496" x="192" y="65"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="4" classindex="2" height="27"
                                   id="sectionGeneral2.text2" uid="_1tjN"
                                   width="496" x="192" y="97"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="4" classindex="0" height="22"
                                   id="sectionGeneral2.text3" uid="_1vPt"
                                   width="376" x="179" y="32"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="4" classindex="0"
                                   feature="ToolTip: D:\yzhang0\2011-12-19-17-09\wdm_workspace\mthread_rtp_vip_simpc_icc_smp\mthread_rtp_vip_simpc_icc_smp.vxe"
                                   height="22"
                                   id="textTipD:_yzhang0_2011-12-19-17-09_wdm_workspace_mthread_rtp_vip_simpc_icc_smp_mthread_rtp_vip_simpc_icc_smp.vxe"
                                   uid="_1vPw" width="376" x="179" y="32"/>
                  </ComponentStep>
                  <ComponentStep class="org.eclipse.ui.forms.widgets.Section"
                                 classcount="3" classindex="1"
                                 feature="Advanced" height="26"
                                 id="sectionAdvanced2" uid="_1tiv" width="699"
                                 x="5" y="381">
                    <ComponentStep class="org.eclipse.ui.forms.widgets.Twistie"
                                   classcount="1" classindex="0" height="11"
                                   id="sectionAdvanced2.toggle" uid="_1tiw"
                                   width="11" x="6" y="7"/>
                    <ComponentStep class="org.eclipse.swt.widgets.Button"
                                   classcount="1" classindex="0"
                                   feature=" Edit... " height="29"
                                   id="button_Edit..._2" uid="_1tix"
                                   width="55" x="615" y="171"/>
                  </ComponentStep>
                  <ComponentStep class="org.eclipse.ui.forms.widgets.Section"
                                 classcount="2" classindex="0"
                                 feature="General" height="163"
                                 id="sectionGeneral3" uid="_1vhN" width="719"
                                 x="5" y="213">
                    <ComponentStep class="org.eclipse.swt.widgets.Text"
                                   classcount="4" classindex="0" height="27"
                                   id="sectionGeneral3.text" uid="_1vhO"
                                   width="441" x="193" y="32"/>
                  </ComponentStep>
                </ComponentStep>
              </ComponentStep>
            </ComponentStep>
          </ComponentStep>
          <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                         classindex="0" feature="Apply" height="29"
                         id="buttonApply" uid="_1tdw" width="92" x="551"
                         y="436"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="0" feature="Close" height="29"
                     id="buttonClose" uid="_18" width="92" x="875" y="592"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="Debug" height="27"
                     id="buttonDebug" uid="_A9" width="92" x="692" y="595"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="0" feature="Debug" height="26"
                     id="buttonDebug2" uid="_1vPz" width="92" x="718"
                     y="658"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="Close" height="26"
                     id="buttonClose2" uid="_1vT0" width="92" x="966"
                     y="658"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="Run" height="29" id="buttonRun"
                     uid="_1vh8" width="107" x="911" y="677"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Confirm Launch Configuration Deletion" height="167"
                id="MessageDialog" modal="true" name="MessageDialog" uid="_16"
                width="540">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="Yes" height="29" id="buttonOk"
                     name="buttonOk" uid="_17" width="92" x="433" y="119"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="5"
                     classindex="0" feature="Yes To All" height="29"
                     id="buttonCancel6" name="buttonCancel" uid="_1vmt"
                     width="107" x="37" y="129"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Remove All Breakpoints" height="194"
                id="MessageDialogWithToggle" modal="true"
                name="MessageDialogWithToggle" uid="_1r" width="540">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="3"
                     classindex="2" feature="Yes" height="29" id="buttonOk2"
                     name="buttonOk" uid="_1s" width="92" x="433" y="146"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Delete Confirmation" height="188"
                id="SystemDeleteDialog" modal="true" name="SystemDeleteDialog"
                uid="_4H" width="394">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="Delete" height="29"
                     id="buttonOk3" name="buttonOk" uid="_4I" width="92"
                     x="295" y="152"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Breakpoint Status" height="629"
                id="BreakpointStatusMonitor__StatusDialog" modal="true"
                name="BreakpointStatusMonitor$$StatusDialog" uid="_Cw"
                width="790">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="3"
                     classindex="2" feature="OK" height="27" id="buttonOk5"
                     name="buttonOk" uid="_Cx" width="92" x="679" y="579"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="1" feature="Fix Problem..." height="29"
                     id="buttonFix_Problem..." uid="_1rby" width="97" x="944"
                     y="152"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="2" feature="Delete" height="29"
                     id="buttonDelete" uid="_1rc4" width="97" x="944"
                     y="186"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Expression Breakpoint Properties" height="686"
                id="ExpressionBreakpointDialog" modal="true"
                name="ExpressionBreakpointDialog" uid="_CJ" width="571">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="0" feature="OK" height="27" id="buttonOk11"
                     name="buttonOk" uid="_Cd" width="92" x="362" y="636"/>
      <ComponentStep class="org.eclipse.swt.widgets.TabFolder" classcount="1"
                     classindex="0" height="441"
                     id="ExpressionBreakpointDialog.tabbed" uid="_CK"
                     width="555" x="8" y="180">
        <ComponentStep class="org.eclipse.swt.widgets.Composite"
                       classcount="1" classindex="0" feature="Tab: General"
                       height="411" id="tabGeneral2" uid="_CL" width="547"
                       x="4" y="26">
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="4"
                         classindex="0" height="23" id="tabGeneral2.text"
                         uid="_CM" width="341" x="129" y="7"/>
          <ComponentStep class="org.eclipse.swt.widgets.Button"
                         classcount="11" classindex="10"
                         feature="Break at function prolog" height="22"
                         id="buttonBreak_at_function_prolog" uid="_1rtY"
                         width="176" x="5" y="346"/>
        </ComponentStep>
      </ComponentStep>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Line Breakpoint Properties" height="690"
                id="LineBreakpointDialog" modal="true"
                name="LineBreakpointDialog" uid="_Bf" width="571">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="0" feature="OK" height="27" id="buttonOk17"
                     name="buttonOk" uid="_C9" width="92" x="362" y="634"/>
      <ComponentStep class="org.eclipse.swt.widgets.TabFolder" classcount="1"
                     classindex="0" height="447"
                     id="LineBreakpointDialog.tabbed" uid="_Bg" width="555"
                     x="8" y="178">
        <ComponentStep class="org.eclipse.swt.widgets.Composite"
                       classcount="1" classindex="0" feature="Tab: General"
                       height="417" id="tabGeneral" uid="_Bh" width="547"
                       x="4" y="26">
          <ComponentStep class="org.eclipse.swt.widgets.Button"
                         classcount="12" classindex="8"
                         feature="Continue on Break" height="17"
                         id="buttonContinue_on_Break" uid="_Br" width="129"
                         x="5" y="247"/>
          <ComponentStep class="org.eclipse.swt.widgets.Button"
                         classcount="12" classindex="1" feature="File System"
                         height="17" id="buttonFile_System" uid="_Bm"
                         width="85" x="219" y="5"/>
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="6"
                         classindex="0" height="23" id="tabGeneral.text"
                         uid="_Bi" width="365" x="105" y="29"/>
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="6"
                         classindex="1" height="23" id="tabGeneral.text2"
                         uid="_Bj" width="365" x="105" y="59"/>
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="6"
                         classindex="3" height="23" id="tabGeneral.text4"
                         uid="_Bz" width="411" x="131" y="269"/>
          <ComponentStep class="org.eclipse.swt.widgets.Button"
                         classcount="12" classindex="7" feature="Temporary"
                         height="22" id="buttonTemporary" uid="_1ron"
                         width="93" x="5" y="260"/>
          <ComponentStep class="org.eclipse.swt.widgets.Button"
                         classcount="12" classindex="9" feature="Condition"
                         height="22" id="buttonCondition" uid="_1rpa"
                         width="92" x="5" y="348"/>
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="6"
                         classindex="4" height="27" id="tabGeneral.text3"
                         uid="_1rpd" width="903" x="105" y="346"/>
          <ComponentStep class="org.eclipse.swt.widgets.Button"
                         classcount="12" classindex="10" feature="Skip Count"
                         height="22" id="buttonSkip_Count" uid="_1rrm"
                         width="92" x="5" y="380"/>
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="6"
                         classindex="5" height="27" id="tabGeneral.text5"
                         uid="_1rrn" width="481" x="105" y="378"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="1"
                     classindex="0" height="34" id="LineBreakpointDialog.text"
                     uid="_1rqT" width="499" x="25" y="56"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Getting Started" height="168"
                id="WROptionalMessageDialog" modal="true"
                name="WROptionalMessageDialog" uid="_AF" width="494">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="0" feature="Do not show again" height="17"
                     id="buttonDo_not_show_again" uid="_AI" width="131" x="14"
                     y="224"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="OK" height="27" id="buttonOk27"
                     name="buttonOk" uid="_AG" width="92" x="386" y="123"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="0" feature="No" height="29" id="buttonCancel"
                     name="buttonCancel" uid="_1sok" width="92" x="335"
                     y="139"/>
      <ComponentStep class="org.eclipse.swt.widgets.Label" classcount="3"
                     classindex="1"
                     feature="Step finished with this error: Failed to connect to the WDB Target Agent...."
                     height="459"
                     id="labelStep_finished_with_this_error:_Failed_to_connect_to_the_WDB_Target_Agent...."
                     uid="_1uAy" width="450" x="75" y="36"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Add Watch Expression" height="368"
                id="WatchExpressionDialog" modal="true"
                name="WatchExpressionDialog" uid="_Da" width="528">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="3"
                     classindex="1" feature="OK" height="27" id="buttonOk29"
                     name="buttonOk" uid="_Dc" width="92" x="319" y="318"/>
      <ComponentStep class="org.eclipse.swt.custom.StyledText" classcount="1"
                     classindex="0" height="191"
                     id="WatchExpressionDialog.text" uid="_Db" width="502"
                     x="13" y="57"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Preferences" height="825"
                id="WorkbenchPreferenceDialog" modal="true"
                name="WorkbenchPreferenceDialog" uid="_1lNy" width="1058">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="OK" height="27" id="buttonOk30"
                     name="buttonOk" uid="_1lO1" width="92" x="950" y="780"/>
      <ComponentStep class="org.eclipse.swt.custom.ScrolledComposite"
                     classcount="1" classindex="0" height="693"
                     id="WorkbenchPreferenceDialog.scroll" uid="_1lN+"
                     width="677" x="371" y="68">
        <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                       classindex="0" height="165"
                       id="WorkbenchPreferenceDialog.tree2" uid="_1nLk"
                       width="434" x="0" y="57"/>
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="5"
                       classindex="1" feature="Enable All" height="26"
                       id="buttonEnable_All" uid="_1vSm" width="92" x="0"
                       y="324"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                     classindex="0" height="711"
                     id="WorkbenchPreferenceDialog.tree" uid="_1lNz"
                     width="336" x="12" y="55"/>
      <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="1"
                     classindex="0" height="21"
                     id="WorkbenchPreferenceDialog.text" uid="_1nLj"
                     width="143" x="12" y="29"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="Cancel" height="26"
                     id="buttonCancel4" name="buttonCancel" uid="_1vSd"
                     width="92" x="522" y="595"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="About Wind River Workbench Debug Mode" height="432"
                id="WRAboutDialog" modal="true" name="WRAboutDialog"
                uid="_1nAX" width="654">
      <ComponentStep class="org.eclipse.swt.custom.StyledText" classcount="1"
                     classindex="0" height="265" id="WRAboutDialog.text"
                     uid="_1nAY" width="414" x="236" y="21"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="9"
                     classindex="8" feature="OK" height="29" id="buttonOk39"
                     name="buttonOk" uid="_1nAg" width="92" x="547" y="384"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Add Path Mapping" height="340"
                id="ObjectPathMappingControl__EditPathMappingDialog"
                modal="true"
                name="ObjectPathMappingControl$$EditPathMappingDialog"
                uid="_1nCM" width="525">
      <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="2"
                     classindex="0" height="27"
                     id="ObjectPathMappingControl__EditPathMappingDialog.combo"
                     uid="_1nCh" width="416" x="95" y="106"/>
      <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="2"
                     classindex="1" height="27"
                     id="ObjectPathMappingControl__EditPathMappingDialog.combo2"
                     uid="_1nCi" width="340" x="95" y="139"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="6"
                     classindex="5" feature="OK" height="29" id="buttonOk40"
                     name="buttonOk" uid="_1nCj" width="92" x="418" y="292"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Show View" height="440" id="ShowViewDialog"
                modal="true" name="ShowViewDialog" uid="_1ncH" width="365">
      <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="1"
                     classindex="0" height="21" id="ShowViewDialog.text"
                     uid="_1ncI" width="312" x="16" y="37"/>
      <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                     classindex="0" height="272" id="ShowViewDialog.tree"
                     uid="_1ncJ" width="335" x="15" y="64"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="OK" height="29" id="buttonOk41"
                     name="buttonOk" uid="_1ncK" width="92" x="258" y="392"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Dynamic 'printf' Properties" height="686"
                id="LineDynamicPrintfDialog" modal="true"
                name="LineDynamicPrintfDialog" uid="_1sfr" width="967">
      <ComponentStep class="org.eclipse.swt.widgets.TabFolder" classcount="1"
                     classindex="0" height="455"
                     id="LineDynamicPrintfDialog.tabbed" uid="_1sfs"
                     width="959" x="4" y="168">
        <ComponentStep class="org.eclipse.swt.widgets.Composite"
                       classcount="1" classindex="0" feature="Tab: General"
                       height="424" id="tabGeneral3" uid="_1sft" width="955"
                       x="2" y="29">
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="5"
                         classindex="2" height="27" id="tabGeneral3.text"
                         uid="_1sfu" width="845" x="105" y="98"/>
          <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="7"
                         classindex="4" feature="Verbose Mode" height="22"
                         id="buttonVerbose_Mode" uid="_1sfv" width="114" x="5"
                         y="157"/>
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="5"
                         classindex="1" height="27" id="tabGeneral3.text2"
                         uid="_1srf" width="766" x="105" y="66"/>
          <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="7"
                         classindex="5" feature="Condition" height="22"
                         id="buttonCondition2" uid="_1srg" width="92" x="5"
                         y="186"/>
          <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="7"
                         classindex="6" feature="Skip Count" height="22"
                         id="buttonSkip_Count2" uid="_1srh" width="92" x="5"
                         y="218"/>
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="5"
                         classindex="3" height="27" id="tabGeneral3.text3"
                         uid="_1srv" width="845" x="105" y="184"/>
          <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="5"
                         classindex="4" height="27" id="tabGeneral3.text4"
                         uid="_1srw" width="845" x="105" y="216"/>
        </ComponentStep>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="OK" height="29" id="buttonOk4"
                     name="buttonOk" uid="_1sfw" width="92" x="860" y="638"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Terminal Settings" height="374"
                id="TerminalSettingsDlg" modal="true"
                name="TerminalSettingsDlg" uid="_1sz6" width="340">
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="3"
                     classindex="1" feature="Connection Type:" height="56"
                     id="groupConnection_Type:" uid="_1sz7" width="310" x="15"
                     y="101">
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27"
                       id="groupConnection_Type:.combo" uid="_1sz8"
                       width="296" x="7" y="22"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="3"
                     classindex="2" feature="Settings:" height="130"
                     id="groupSettings:" uid="_1sz9" width="310" x="15"
                     y="166">
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="2"
                       classindex="0" height="27" id="groupSettings:.text"
                       uid="_1szA" width="187" x="111" y="27"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27" id="groupSettings:.combo"
                       uid="_1szB" width="187" x="111" y="59"/>
        <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="2"
                       classindex="1" height="27" id="groupSettings:.text2"
                       uid="_1szC" width="187" x="111" y="91"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="OK" height="29" id="buttonOk6"
                     name="buttonOk" uid="_1szD" width="92" x="233" y="326"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="0" feature="Cancel" height="29"
                     id="buttonCancel2" name="buttonCancel" uid="_1s-E"
                     width="92" x="135" y="326"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.MessageBox" engine="swt"
                feature="Terminal Settings" id="comTerminal_Settings"
                modal="true" uid="_1s+9"/>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Add" height="358" id="WREditDownloadDialog"
                modal="true" name="WREditDownloadDialog" uid="_1tdU"
                width="528">
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="2"
                     classindex="0" feature="Download" height="58"
                     id="groupDownload" uid="_1tdV" width="510" x="9" y="101">
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0"
                       feature="ToolTip: /buildarea/yzhang0/2011-11-15-14-26/wdm_workspace"
                       height="27"
                       id="comboTip/buildarea/yzhang0/2011-11-15-14-26/wdm_workspace"
                       uid="_1tdW" width="385" x="44" y="23"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="1"
                       classindex="0" height="27" id="groupDownload.combo"
                       uid="_1tdh" width="382" x="44" y="23"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="2"
                     classindex="1" feature="Options" height="129"
                     id="groupOptions" uid="_1tdu" width="507" x="9" y="164"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="OK" height="29" id="buttonOk7"
                     name="buttonOk" uid="_1tdv" width="92" x="418" y="310"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Entry Points" height="542"
                id="WRVxWorksKernelTaskEntryPointSelectionDialog" modal="true"
                name="WRVxWorksKernelTaskEntryPointSelectionDialog"
                uid="_1tdy" width="525">
      <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                     classindex="0" height="300"
                     id="WRVxWorksKernelTaskEntryPointSelectionDialog.tree"
                     uid="_1tdz" width="507" x="9" y="177"/>
      <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="2"
                     classindex="0"
                     feature="ToolTip: (? = any character, * = any string, &lt; = end of pattern)"
                     height="27"
                     id="textTip(?_=_any_character,_*_=_any_string,_&lt;_=_end_of_pattern)"
                     uid="_1td+" width="507" x="9" y="123"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Advanced Options" height="578"
                id="TOSObjectActionDialog" modal="true"
                name="TOSObjectActionDialog" uid="_1tea" width="525">
      <ComponentStep class="org.eclipse.swt.widgets.Text" classcount="3"
                     classindex="0" feature="ToolTip: Task Name" height="27"
                     id="textTipTask_Name" uid="_1teb" width="429" x="87"
                     y="101"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="3" feature="OK" height="29" id="buttonOk8"
                     name="buttonOk" uid="_1tec" width="92" x="418" y="530"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="2" feature="Cancel" height="29"
                     id="buttonCancel3" name="buttonCancel" uid="_1tiy"
                     width="92" x="320" y="564"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="License about to expire" height="182"
                id="LicenseExpireDialog" modal="true"
                name="LicenseExpireDialog" uid="_1ti3" width="555">
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="0" feature="Do not show this dialog again"
                     height="22" id="buttonDo_not_show_this_dialog_again"
                     uid="_1ti4" width="211" x="15" y="103"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="OK" height="29" id="buttonOK"
                     uid="_1tiM" width="92" x="448" y="134"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Processor Selection" height="534"
                id="WRUnifiedProcessorSelectionDialog" modal="true"
                name="WRUnifiedProcessorSelectionDialog" uid="_1vks"
                width="613">
      <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                     classindex="0" height="362"
                     id="WRUnifiedProcessorSelectionDialog.tree" uid="_1vkt"
                     width="601" x="6" y="107"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="2"
                     classindex="1" feature="OK" height="29" id="buttonOk9"
                     name="buttonOk" uid="_1vku" width="107" x="493" y="489"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Export" height="550" id="ImportExportWizard"
                modal="true" name="ImportExportWizard" uid="_1vlO"
                width="613">
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="9"
                     classindex="4" height="317" id="importExportPage"
                     name="importExportPage" uid="_1vlP" width="601" x="6"
                     y="107">
        <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                       classindex="0" height="243" id="importExportPage.tree"
                       uid="_1vlQ" width="581" x="10" y="64"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="1" feature="Next &gt;" height="29"
                     id="buttonNext3" name="buttonNext" uid="_1vlR"
                     width="107" x="265" y="505"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Export" height="572"
                id="WRExportTargetConnectionWizard" modal="true"
                name="WRExportTargetConnectionWizard" uid="_1vlS" width="632">
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="1"
                     classindex="0" feature="Export To" height="131"
                     id="groupExport_To" uid="_1vlT" width="610" x="11"
                     y="310">
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                       classindex="2" feature="Directory" height="22"
                       id="buttonDirectory" uid="_1vlU" width="84" x="7"
                       y="98"/>
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                       classindex="3" feature=" Browse... " height="29"
                       id="button_Browse..._2" uid="_1vlV" width="80" x="523"
                       y="95"/>
        <ComponentStep class="org.eclipse.swt.widgets.Combo" classcount="2"
                       classindex="1" height="29" id="groupExport_To.combo"
                       uid="_1vlY" width="400" x="118" y="95"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="1" feature="Next &gt;" height="29"
                     id="buttonNext4" name="buttonNext" uid="_1vlX"
                     width="107" x="284" y="527"/>
      <ComponentStep class="org.eclipse.swt.widgets.Composite" classcount="9"
                     classindex="4" height="339"
                     id="com.windriver.ide.target.ui.wizard.importexport.WRExportTargetConnectionSubstitutionPreviewPage"
                     name="com.windriver.ide.target.ui.wizard.importexport.WRExportTargetConnectionSubstitutionPreviewPage"
                     uid="_1vlZ" width="620" x="6" y="107">
        <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                       classindex="0" height="329"
                       id="com.windriver.ide.target.ui.wizard.importexport.WRExportTargetConnectionSubstitutionPreviewPage.tree"
                       uid="_1vla" width="509" x="5" y="5"/>
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="1"
                       classindex="0" feature="Configure..." height="29"
                       id="buttonConfigure..." uid="_1vm9" width="86" x="524"
                       y="10"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                     classindex="0" height="158"
                     id="WRExportTargetConnectionWizard.tree" uid="_1vlu"
                     width="610" x="11" y="147"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                     classindex="3" feature="Finish" height="29"
                     id="buttonFinish2" name="buttonFinish" uid="_1vmQ"
                     width="107" x="512" y="527"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.DirectoryDialog" engine="swt"
                feature="Browse for Folder" id="comBrowse_for_Folder"
                modal="true" uid="_1vlW"/>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Configure Path Substitutions" height="659"
                id="WRExportTargetConnectionSubstitutionPreviewPage__3__2"
                modal="true"
                name="WRExportTargetConnectionSubstitutionPreviewPage$$3$$2"
                uid="_1vmA" width="839">
      <ComponentStep class="org.eclipse.swt.widgets.Tree" classcount="1"
                     classindex="0" height="460"
                     id="WRExportTargetConnectionSubstitutionPreviewPage__3__2.tree"
                     uid="_1vmB" width="700" x="6" y="107"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="6"
                     classindex="4" feature="Cancel" height="29"
                     id="buttonCancel5" name="buttonCancel" uid="_1vmC"
                     width="107" x="605" y="614"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Import" height="550"
                id="WRImportTargetConnectionWizard" modal="true"
                name="WRImportTargetConnectionWizard" uid="_1vop" width="613">
      <ComponentStep class="org.eclipse.swt.widgets.Group" classcount="1"
                     classindex="0" feature="Import From" height="92"
                     id="groupImport_From" uid="_1voq" width="591" x="11"
                     y="112">
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                       classindex="2" feature="Directory" height="22"
                       id="buttonDirectory2" uid="_1vor" width="84" x="7"
                       y="59"/>
        <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="4"
                       classindex="3" feature=" Browse... " height="29"
                       id="button_Browse..._3" uid="_1vov" width="80" x="504"
                       y="56"/>
      </ComponentStep>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="6"
                     classindex="0" feature="Select All" height="29"
                     id="buttonSelect_All" uid="_1vp2" width="70" x="532"
                     y="209"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="6"
                     classindex="1" feature="Deselect All" height="29"
                     id="buttonDeselect_All" uid="_1vp3" width="70" x="532"
                     y="243"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="6"
                     classindex="5" feature="Finish" height="29"
                     id="buttonFinish3" name="buttonFinish" uid="_1vp9"
                     width="107" x="493" y="505"/>
    </WindowStep>
    <WindowStep class="org.eclipse.swt.widgets.Shell" engine="swt"
                feature="Open Perspective" height="474"
                id="SelectPerspectiveDialog" modal="true"
                name="SelectPerspectiveDialog" uid="_1vsU" width="348">
      <ComponentStep class="org.eclipse.swt.widgets.Table" classcount="1"
                     classindex="0" height="322"
                     id="SelectPerspectiveDialog.table" uid="_1vsV"
                     width="322" x="13" y="46"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="3"
                     classindex="0" feature="Show all" height="22"
                     id="buttonShow_all" uid="_1vsW" width="79" x="13"
                     y="377"/>
      <ComponentStep class="org.eclipse.swt.widgets.Button" classcount="3"
                     classindex="2" feature="OK" height="29" id="buttonOk10"
                     name="buttonOk" uid="_1vsX" width="107" x="228" y="429"/>
    </WindowStep>
  </WindowList>
</RootStep>
